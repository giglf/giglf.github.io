<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>giglf的盐缸</title>
  
  <subtitle>让咸鱼更咸</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.2bsitcker.cn/"/>
  <updated>2019-01-27T08:23:06.363Z</updated>
  <id>http://blog.2bsitcker.cn/</id>
  
  <author>
    <name>giglf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018flare-on recording</title>
    <link href="http://blog.2bsitcker.cn/2018/11/21/2018flare-on-recording/"/>
    <id>http://blog.2bsitcker.cn/2018/11/21/2018flare-on-recording/</id>
    <published>2018-11-21T02:52:25.000Z</published>
    <updated>2019-01-27T08:23:06.363Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://flare-on.com" target="_blank" rel="noopener">http://flare-on.com</a></p><p>记录一下今年的flare-on，断断续续做了好久，最后12题中总共解出6题，后面的题就不够时间看了</p><p>再一次感受到自己是在太菜了，发现自己在逆向的时候很不善于用一些有用的工具，大部分时候是通过自己手动硬逆，事实上，逆向的目的是要搞懂程序在干些什么，不必去过于探究一些细节，而对于我数学、算法方面的硬伤，只需要抽时间去恶补理论基础就好了。但对于逆向技巧，flareon给了一个很好的学习逆向的题目。</p><p>另外，flare-on的官方writeup真的是太感人了，太详细了！</p><p><a href="https://www.fireeye.com/blog/threat-research/2018/10/2018-flare-on-challenge-solutions.html" target="_blank" rel="noopener">https://www.fireeye.com/blog/threat-research/2018/10/2018-flare-on-challenge-solutions.html</a></p><p>希望明年能拿到徽章</p><a id="more"></a><hr><h2 id="Challenge-1"><a href="#Challenge-1" class="headerlink" title="Challenge 1"></a>Challenge 1</h2><p>一个java逆向，简单的通过jd-gui逆掉</p><h2 id="Challenge-2"><a href="#Challenge-2" class="headerlink" title="Challenge 2"></a>Challenge 2</h2><p>.net的逆向，一个扫雷的游戏，总共有897个雷，只有3个没雷的格子。</p><p>简单逆一下能发现这3个没雷的格子是初始化时硬编码的，所以确定了几个位置以后，直接点开3个格，就能getflag（数的我眼睛花</p><h2 id="Challenge-3"><a href="#Challenge-3" class="headerlink" title="Challenge 3"></a>Challenge 3</h2><p>这关包含48个PE文件，diff了一下发现只有部分数据不一样，每个文件的逻辑都是一样的，需要输入一个password，程序会创建一个jpg和显示一个字符。</p><p>这个jpg图像是一个lego拼接过程，左上角包含顺序数字。</p><p>48个文件，我开始想法是通过<code>pywin32</code>的进行模拟程序，把每一个处理自动化抽取出来，并且似乎最后要通过图像识别去提取图片中的数字。可惜这一部分我不会写，最后是通过手动的方式一个个抽取出来的（非常蠢的方法</p><hr><p>看回官方wp，resource是以一定格式储存的，所以其实是可以对每个binary进行提取处理。</p><p>这里有一个小技巧，就是通过python的vstruct.VStruct进行数据结构的构造</p><table><thead><tr><th>Offset</th><th>Description</th><th>(Decoded) value for 1BpnGjHOT7h5vvZsV4vISSb60Xj3pX5G.exe</th></tr></thead><tbody><tr><td>0x0</td><td>Password</td><td>ZImIT7DyCMOeF6</td></tr><tr><td>0x20</td><td>Filename</td><td>(XOR encoded) 65141174.png</td></tr><tr><td>0x30</td><td>Letter</td><td>(XOR encoded) w</td></tr><tr><td>0x4A</td><td>Return value</td><td>7</td></tr><tr><td>0x4C</td><td>Length RC4 encrypted data</td><td>0x47ED</td></tr><tr><td>0x50</td><td>RC4 encrypted data</td><td>&lt; PNG image data &gt;</td></tr></tbody></table><p>Table 2: Recovered resource data values for 1BpnGjHOT7h5vvZsV4vISSb60Xj3pX5G.exe </p><p>自己用了这么蠢的方法，大概是因为懒没有把binary逆清楚吧。。</p><hr><p>其他大佬解法</p><p><a href="https://bruce30262.github.io/flare-on-challenge-2018-write-up/" target="_blank" rel="noopener">https://bruce30262.github.io/flare-on-challenge-2018-write-up/</a></p><p>在一个ak了的dalao提到，他用到了LIEF这个工具</p><p>说实话，这个工具一直躺在我的GitHub star中。。我没有去看过他能干什么</p><p>lief能用来对一个二进制文件进行解析，在这题中，就能用其提取resource</p><p><img src="/2018/11/21/2018flare-on-recording/lief.png" alt="lief"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lief</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_code</span><span class="params">(filename)</span>:</span></span><br><span class="line">    binary = lief.parse(filename)</span><br><span class="line">    brick = binary.resources.childs.next()</span><br><span class="line">    id_101 = brick.childs.next()</span><br><span class="line">    data = id_101.childs.next().content</span><br><span class="line"></span><br><span class="line">    code = <span class="string">""</span></span><br><span class="line">    has_zero = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> has_zero == <span class="keyword">True</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                has_zero = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            has_zero = <span class="keyword">False</span></span><br><span class="line">            code += chr(d)</span><br><span class="line">    print(<span class="string">"&#123;&#125; =&gt; &#123;&#125;"</span>.format(filename, code))</span><br></pre></td></tr></table></figure><h2 id="Challenge-4"><a href="#Challenge-4" class="headerlink" title="Challenge 4"></a>Challenge 4</h2><p>challenge 4是一道非常有意思的题目，这是一个js代码注入木马</p><p>首先，这道题目给了一个binstall.exe，是<code>.net</code>程序，通过dnspy反编译能看到做了混淆，而这个混淆也很好去，查了一下往年的flareon也有类似的<code>.net</code>混淆的题目，通过<code>de4dot</code>便能解混淆，这只是符号混淆</p><p>简单逆向一下，能看到几个关键信息</p><p>首先，这个安装器向目录<code>%APPDATA%\Microsoft\Internet Explorer\browserassist.dll</code>释放了一个dll，然后，向注册表的<code>AppInit_DLLs</code>字段写入这个dll，这个字段的作用是当进程启动时，会加载该dll</p><p>这里可参考<a href="https://docs.microsoft.com/en-us/windows/desktop/dlls/secure-boot-and-appinit-dlls" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows/desktop/dlls/secure-boot-and-appinit-dlls</a></p><blockquote><p>Only a small set of modern legitimate applications use this mechanism to load DLLs, while a large set of malware use this mechanism to compromise systems. … therefore usage of AppInit_DLLs is not recommended.</p></blockquote><p>正常情况下应用很少会用到该字段去加载dll，大部分需要用到该字段的都是恶意软件</p><p>在安装完这个dll后， binstall.exe便运行完毕，接下来需要逆向这个释放出来的dll</p><hr><p>对于这个dll，我刚开始是硬逆的，后来找到import表，从import表中找到网络相关的函数，找到了http请求到一些东西</p><p>这里其实还有一个技巧，在官方wp中提到，我们可以通过在ida中<code>View -&gt; Open subviews -&gt;Signatures</code>添加<code>vc32_14</code>和<code>vc32ucrt</code>使得我们不用去逆一些库函数</p><p>当时有twitter提到了只有在firefox上这个dll才能正常运行，我也没有细想去为什么，现在看回官方wp，才发现在逆向dll时忽略了很多函数</p><p>首先，从DllEntryPoint中可以根据常规套路找到DLLMain-&gt;0x100027D0</p><p>在DllMain中，做了获取当前加载该dll的进程名，并把进程名传进了两个函数，当校验成功便调用CreateThread</p><p>函数<code>sub_10002660</code>是一个简单的hash，并且进程名hash值要等于0x4932B10F，作者说到这是病毒常见的套路，用以隐藏进程名。这个hash正是firefox.exe对应的hash，而后一个函数则是检查firefox的版本要低于55。PS：这个hash不可逆，所以我们只能通过猜测，因为已知这应该是一个浏览器进程，所以在常见的浏览器中挨个试。</p><p>在随后的函数中，加入了一些字符串混淆，简单的通过放在栈上的byte异或进行字符串的恢复。</p><p>我用的方法比较蠢，把这些byte给dump出来，再通过手工的方法写代码进行异或处理，出题人给出了一个ida的python脚本，通过unicorn进行程序模拟执行，在print出字符串</p><p>恢复一堆后，发现设置user-agent的还有一堆base64编码的</p><p>base64解码后发现是乱码，看了下上下文，发现base64解码后还要通过一串rc4的解密，最后恢复出来是一个网址 <code>pastebin.com/raw/hvaru8NU</code></p><p>get请求这个数据，然后发现是一个json文件，包含了一些inject code什么的</p><p>接下来我就没有继续逆dll了，因为json中有一个host显示flare-on.com，并且也标明了几个js文件名，猜测是javascript代码注入，下了个老版的firefox，成功执行后访问flare-on，F12查看请求，请求中正是包含了那几个js文件，看了看的确包含进了注入的代码</p><p>分析注入代码，不难发现他往flare-on.com这个仿shell的网页中加入了一个<code>su</code>命令，并且前端验证密码，简单地逆出密码后取得root权限，再继续看注入的代码，发现获取root权限后可以cd到一个key目录，cd进去后ls一下就拿到flag了</p><p><img src="/2018/11/21/2018flare-on-recording/c4_getflag.png" alt="c4_getflag"></p><hr><p>其他启示</p><p>在dalao的wp中提到了一个工具<a href="https://github.com/hasherezade/dll_to_exe" target="_blank" rel="noopener">dll_to_exe</a></p><p>能把dll转为exe，通过对dll的一些修改，使得能够直接运行进行调试</p><h2 id="Challenge-5"><a href="#Challenge-5" class="headerlink" title="Challenge 5"></a>Challenge 5</h2><p>wasm逆向</p><p>index.html会加载main.js，main.js再加载test.wasm</p><p>简单逆向main.js可以看到，向test.wasm里的函数传入一串bytecode，并与输入的q参数进行Match函数处理，最后返回值为1则输入的flag对。</p><p>在刚开始，我通过chrome debugger去debug wasm，但是量比较大，并且wasm储存变量的方式比较特殊，我花了很长时间都没有理解这是在进行什么运算。</p><p>后来我就想着去找些处理工具了，但是我找了类似 <a href="https://github.com/wwwg/wasmdec" target="_blank" rel="noopener">https://github.com/wwwg/wasmdec</a> and <a href="https://github.com/WebAssembly/wabt之类的，也没有能简化阅读的" target="_blank" rel="noopener">https://github.com/WebAssembly/wabt之类的，也没有能简化阅读的</a></p><p>后来发现jeb能处理wasm，联想到曾经在Android上jeb的强大，便下了个试用版体验</p><p>果然。。极其给力，一会儿便分析出来了</p><p>从main.js的输入是bytecode，整个wasm是一个简单的字节处理的虚拟机，对输入做加减乘除异或等操作，一个简单的python脚本便能解决</p><hr><p>但是官方wp不应该是通过这种方式做的，再来看回官方wp</p><p>官方wp有一种方法，先通过wasm2c转换成c的源码，再用O3编译，最后用现成的工具进行反编译分析，我试了一下。。最后出来的东西超庞大。。比较混乱</p><p>也提到了一个在线的ide<a href="https://webassembly.studio/，能以渲染过的wat格式进行展示，并且提到一个特性，在调试过程其可以触发Firefox的SpiderMonkey" target="_blank" rel="noopener">https://webassembly.studio/，能以渲染过的wat格式进行展示，并且提到一个特性，在调试过程其可以触发Firefox的SpiderMonkey</a> JIT compiler，使得我们可以查看wasm在CPU上是怎么运行的，当转化成为熟悉的x86语言后，能更容易去进行理解。</p><p>再另外，就是IDA的wasm插件了<a href="https://github.com/fireeye/idawasm" target="_blank" rel="noopener">https://github.com/fireeye/idawasm</a></p><p>这个插件正是fireeye做的，与普通反编译出来好处是能以ida的方式看清程序架构，并且变量名也经过处理</p><p>然后就是一步步逆了，还可以通过wasm_emu.py在ida中进行模拟运行</p><p>我使用jeb算是偷鸡了，正确操作应该熟悉wasm的架构，指令，并通过自己去进行指令简化，也可以自己写一个parser进行解析</p><p>懒了懒了</p><h2 id="Challenge-6"><a href="#Challenge-6" class="headerlink" title="Challenge 6"></a>Challenge 6</h2><p>这题就纯粹是一个常规的逆向题了</p><p>一共666轮验证，666轮的输入与binary中的data进行异或，最后出来flag</p><p>首先，当中有一个很大的结构体数组，该数组里包含smc代码，输入的字节需要传进去作为函数的参数，经过check函数的判断再以确定其中一轮是否正确。</p><p>一轮结束后，会通过一个固定种子的rand进行数组打乱，重新生成smc数据，并重新写到binary中，然后然后再一次运行单轮check</p><p>我的解法是编写了每一个check函数的求解，通过程序模拟的方式进行666轮求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> util</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'magic'</span>, <span class="string">'rb'</span>)</span><br><span class="line">binary = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUInt</span><span class="params">(offset)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">'&lt;I'</span>, binary[offset:offset+<span class="number">4</span>])[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUInt64</span><span class="params">(offset)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">'&lt;Q'</span>, binary[offset:offset+<span class="number">8</span>])[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFuncStruct</span><span class="params">(i)</span>:</span></span><br><span class="line">    func = getUInt64(<span class="number">0x5100</span>+<span class="number">0x120</span>*i)</span><br><span class="line">    func_off = func - <span class="number">0x400000</span></span><br><span class="line">    func_len = getUInt(<span class="number">0x5100</span>+<span class="number">0x120</span>*i+<span class="number">8</span>)</span><br><span class="line">    key_start = getUInt(<span class="number">0x5100</span>+<span class="number">0x120</span>*i+<span class="number">12</span>)</span><br><span class="line">    key_len = getUInt(<span class="number">0x5100</span>+<span class="number">0x120</span>*i+<span class="number">16</span>)</span><br><span class="line">    cpy_dst = getUInt(<span class="number">0x5100</span>+<span class="number">0x120</span>*i+<span class="number">20</span>)</span><br><span class="line">    data = getUInt64(<span class="number">0x5100</span>+<span class="number">0x120</span>*i+<span class="number">24</span>)</span><br><span class="line">    data_off = data - <span class="number">0x600000</span></span><br><span class="line">    data_need = binary[<span class="number">0x5100</span>+<span class="number">0x120</span>*i+<span class="number">32</span>:<span class="number">0x5100</span>+<span class="number">0x120</span>*(i+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'func_off'</span>:func_off, <span class="string">'func_len'</span>:func_len, <span class="string">'key_start'</span>:key_start, <span class="string">'key_len'</span>:key_len, <span class="string">'cpy_dst'</span>:cpy_dst, <span class="string">'data_off'</span>:data_off, <span class="string">'data_need'</span>:data_need&#125;</span><br><span class="line"></span><br><span class="line">funcList = [getFuncStruct(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>)]</span><br><span class="line"></span><br><span class="line">key = [<span class="number">0</span>] * <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_fibnacci</span><span class="params">(index)</span>:</span></span><br><span class="line">    key_start, key_len, data_need = funcList[index][<span class="string">'key_start'</span>], funcList[index][<span class="string">'key_len'</span>], funcList[index][<span class="string">'data_need'</span>]</span><br><span class="line">    result = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(key_len):</span><br><span class="line">        num = struct.unpack(<span class="string">'&lt;Q'</span>, data_need[<span class="number">8</span>*i:<span class="number">8</span>*(i+<span class="number">1</span>)])[<span class="number">0</span>]</span><br><span class="line">        key[key_start+i] = util.findFibnacci(num)</span><br><span class="line">        result += chr(key[key_start+i])</span><br><span class="line">    <span class="comment"># print 'solve fibnacci:' + str(index) + '\t' + result</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_crc32</span><span class="params">(index)</span>:</span></span><br><span class="line">    key_start, key_len, data_need = funcList[index][<span class="string">'key_start'</span>], funcList[index][<span class="string">'key_len'</span>], funcList[index][<span class="string">'data_need'</span>]</span><br><span class="line">    data_need = struct.unpack(<span class="string">'&lt;I'</span>, data_need[:<span class="number">4</span>])[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> key_len == <span class="number">1</span>:</span><br><span class="line">        c = util.breakCrc32_len1(data_need)</span><br><span class="line">        key[key_start] = ord(c)</span><br><span class="line">    <span class="keyword">elif</span> key_len == <span class="number">2</span>:</span><br><span class="line">        c = util.breakCrc32_len2(data_need)</span><br><span class="line">        key[key_start], key[key_start+<span class="number">1</span>] = ord(c[<span class="number">0</span>]), ord(c[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">elif</span> key_len == <span class="number">3</span>:</span><br><span class="line">        c = util.breakCrc32_len3(data_need)</span><br><span class="line">        key[key_start], key[key_start+<span class="number">1</span>], key[key_start+<span class="number">2</span>] = ord(c[<span class="number">0</span>]), ord(c[<span class="number">1</span>]), ord(c[<span class="number">2</span>])</span><br><span class="line">    <span class="comment"># print 'solve crc32:' + str(index) + '\t' + c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_xor2A</span><span class="params">(index)</span>:</span></span><br><span class="line">    key_start, key_len, data_need = funcList[index][<span class="string">'key_start'</span>], funcList[index][<span class="string">'key_len'</span>], funcList[index][<span class="string">'data_need'</span>]</span><br><span class="line">    result = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(key_len):</span><br><span class="line">        key[key_start+i] = <span class="number">0x2A</span> ^ ord(data_need[i])</span><br><span class="line">        result += chr(key[key_start+i])</span><br><span class="line">    <span class="comment"># print 'solve xor2A:' + str(index) + '\t' + result</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_xorWithStr</span><span class="params">(index)</span>:</span></span><br><span class="line">    key_start, key_len, data_need = funcList[index][<span class="string">'key_start'</span>], funcList[index][<span class="string">'key_len'</span>], funcList[index][<span class="string">'data_need'</span>]</span><br><span class="line">    v4 = map(ord, <span class="string">'Tis but a scratch.'</span>)</span><br><span class="line">    v10 = <span class="number">0</span></span><br><span class="line">    arr = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x100</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x100</span>):</span><br><span class="line">        v10 = (v10 + arr[i] + v4[i % <span class="number">18</span>]) &amp; <span class="number">0xff</span></span><br><span class="line">        arr[i], arr[v10] = arr[v10], arr[i]</span><br><span class="line">    v8 = <span class="number">0</span></span><br><span class="line">    v9 = <span class="number">0</span></span><br><span class="line">    result = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(key_len):</span><br><span class="line">        v9 = (v9 + <span class="number">1</span>) &amp; <span class="number">0xff</span></span><br><span class="line">        v8 = (v8 + arr[v9]) &amp; <span class="number">0xff</span></span><br><span class="line">        arr[v8], arr[v9] = arr[v9], arr[v8]</span><br><span class="line">        v10 = (arr[v9] + arr[v8]) &amp; <span class="number">0xff</span></span><br><span class="line">        key[key_start+i] = ord(data_need[i]) ^ arr[v10]</span><br><span class="line">        result += chr(key[key_start+i])</span><br><span class="line">    <span class="comment"># print 'solve xorWithStr:' + str(index) + '\t' + result</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_strangeBase64</span><span class="params">(index)</span>:</span></span><br><span class="line">    key_start, key_len, data_need = funcList[index][<span class="string">'key_start'</span>], funcList[index][<span class="string">'key_len'</span>], funcList[index][<span class="string">'data_need'</span>]</span><br><span class="line">    <span class="keyword">if</span>(key_len % <span class="number">3</span> !=<span class="number">0</span>):</span><br><span class="line">        read_size = (key_len/<span class="number">3</span>+<span class="number">1</span>)*<span class="number">4</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        read_size = (key_len/<span class="number">3</span>)*<span class="number">4</span></span><br><span class="line">    table = <span class="string">'\x2A\x39\x5F\x64\xC2\xA7\x46\x23\x53\x6B\x74\x47\x28\x4D\x70\x42\x49\x25\x52\x6A\x62\x38\x40\x4A\x69\x45\x44\x59\x2D\x31\x24\x50\x67\x79\x54\x21\x4C\x76\x71\x66\x2B\x63\x68\x6D\x51\x57\x4F\x30\x65\x4E\x5A\x34\x75\x6E\x33\x6C\x37\x48\x26\x32\x77\x61\x7A\x4B'</span></span><br><span class="line">    ori_table = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">    tran = string.maketrans(table, ori_table)</span><br><span class="line">    data_need = data_need[:read_size]</span><br><span class="line">    data_need = data_need.translate(tran)</span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(read_size):</span><br><span class="line">        <span class="keyword">if</span> data_need[i] == <span class="string">'\x00'</span>:</span><br><span class="line">            res += <span class="string">'='</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res += data_need[i]</span><br><span class="line">    res = base64.b64decode(res)</span><br><span class="line">    result = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(key_len):</span><br><span class="line">        key[key_start + i] = ord(res[i])</span><br><span class="line">        result += chr(key[key_start+i])</span><br><span class="line">    <span class="comment"># print 'solve strangeBase64:' + str(index) + '\t' + result</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_add13</span><span class="params">(index)</span>:</span></span><br><span class="line">    key_start, key_len, data_need = funcList[index][<span class="string">'key_start'</span>], funcList[index][<span class="string">'key_len'</span>], funcList[index][<span class="string">'data_need'</span>]</span><br><span class="line">    result = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(key_len):</span><br><span class="line">        key[key_start+i] = ord(data_need[i]) - <span class="number">13</span></span><br><span class="line">        result += chr(key[key_start+i])</span><br><span class="line">    <span class="comment"># print 'solve add13:' + str(index) + '\t' + result</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_equal</span><span class="params">(index)</span>:</span></span><br><span class="line">    key_start, key_len, data_need = funcList[index][<span class="string">'key_start'</span>], funcList[index][<span class="string">'key_len'</span>], funcList[index][<span class="string">'data_need'</span>]</span><br><span class="line">    result = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(key_len):</span><br><span class="line">        key[key_start + i] = ord(data_need[i]) </span><br><span class="line">        result += chr(key[key_start+i])</span><br><span class="line">    <span class="comment"># print 'solve equal:' + str(index) + '\t' + result</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findFunction</span><span class="params">(code)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> code[:<span class="number">27</span>] == <span class="string">'UH\x89\xE5H\x89&#125;\xB8\x89u\xB4H\x89U\xA8\xC7E\xFC\x00\x00\x00\x00\xE9\x19\x01\x00\x00'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'fibnacci'</span></span><br><span class="line">    <span class="keyword">elif</span> code[:<span class="number">35</span>] == <span class="string">'UH\x89\xE5H\x89&#125;\xD8\x89u\xD4H\x89U\xC8\xC6E\xF3\x00\xC7E\xFC\x00\x00\x00\x00\xC7E\xF4\xFF\xFF\xFF\xFF\xEBR'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'crc32'</span></span><br><span class="line">    <span class="keyword">elif</span> code[:<span class="number">41</span>] == <span class="string">'UH\x89\xE5H\x81\xEC\xD0\x00\x00\x00H\x89\xBD\xC8\xFE\xFF\xFF\x89\xB5\xC4\xFE\xFF\xFFH\x89\x95\xB8\xFE\xFF\xFFH\xB8Tis but '</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'xorWithStr'</span></span><br><span class="line">    <span class="keyword">elif</span> code[:<span class="number">25</span>] == <span class="string">'UH\x89\xE5H\x89&#125;\xA8\x89u\xA4H\x89U\x98H\xB8*9_d\xC2\xA7F#'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'base64'</span></span><br><span class="line">    <span class="keyword">elif</span> code[:<span class="number">31</span>] == <span class="string">'UH\x89\xE5H\x89&#125;\xE8\x89u\xE4H\x89U\xD8\xC7E\xFC\x00\x00\x00\x00\xC7E\xFC\x00\x00\x00\x00\xEBa'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'add13'</span></span><br><span class="line">    <span class="keyword">elif</span> code[:<span class="number">24</span>] == <span class="string">'UH\x89\xE5H\x89&#125;\xE8\x89u\xE4H\x89U\xD8\xC7E\xFC\x00\x00\x00\x00\xEBU'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'equal'</span></span><br><span class="line">    <span class="keyword">elif</span> code[:<span class="number">24</span>] == <span class="string">'UH\x89\xE5H\x89&#125;\xE8\x89u\xE4H\x89U\xD8\xC7E\xFC\x00\x00\x00\x00\xEB]'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'xor2A'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smc_core</span><span class="params">(arr1, arr2, length)</span>:</span></span><br><span class="line">    rel = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        rel += chr(ord(arr1[i]) ^ ord(arr2[i]))</span><br><span class="line">    <span class="keyword">return</span> rel</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_once_round</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> funcList</span><br><span class="line">    <span class="keyword">global</span> key</span><br><span class="line">    <span class="comment"># funcList = [getFuncStruct(i) for i in range(33)]</span></span><br><span class="line">    key = [<span class="number">0</span>]*<span class="number">100</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(funcList)):</span><br><span class="line">        func = funcList[i]</span><br><span class="line">        result = smc_core(binary[func[<span class="string">'func_off'</span>]:], binary[func[<span class="string">'data_off'</span>]:], func[<span class="string">'func_len'</span>])</span><br><span class="line">        func_name = findFunction(result)</span><br><span class="line">        <span class="keyword">if</span> func_name == <span class="string">'fibnacci'</span>:</span><br><span class="line">            solve_fibnacci(i)</span><br><span class="line">        <span class="keyword">elif</span> func_name == <span class="string">'crc32'</span>:</span><br><span class="line">            solve_crc32(i)</span><br><span class="line">        <span class="keyword">elif</span> func_name == <span class="string">'xorWithStr'</span>:</span><br><span class="line">            solve_xorWithStr(i)</span><br><span class="line">        <span class="keyword">elif</span> func_name == <span class="string">'base64'</span>:</span><br><span class="line">            solve_strangeBase64(i)</span><br><span class="line">        <span class="keyword">elif</span> func_name == <span class="string">'add13'</span>:</span><br><span class="line">            solve_add13(i)</span><br><span class="line">        <span class="keyword">elif</span> func_name == <span class="string">'equal'</span>:</span><br><span class="line">            solve_equal(i)</span><br><span class="line">        <span class="keyword">elif</span> func_name == <span class="string">'xor2A'</span>:</span><br><span class="line">            solve_xor2A(i)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(map(chr, key))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rand_index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replaceInBinary</span><span class="params">(off, buf, length)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> binary</span><br><span class="line">    binary = binary[:off] + buf + binary[off+length:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeTable</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> rand_index</span><br><span class="line">    binFuncOffs = <span class="number">0xbc6</span></span><br><span class="line">    new_func_src = <span class="string">''</span></span><br><span class="line">    key_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x21</span>):</span><br><span class="line">        v3 = i + util.random_num[rand_index] % (<span class="number">33</span>-i)</span><br><span class="line">        rand_index += <span class="number">1</span></span><br><span class="line">        func = funcList[v3]</span><br><span class="line">        </span><br><span class="line">        src = smc_core(binary[func[<span class="string">'func_off'</span>]:], binary[func[<span class="string">'data_off'</span>]:], func[<span class="string">'func_len'</span>])</span><br><span class="line">        func[<span class="string">'data_off'</span>] = (util.random_num[rand_index] % (<span class="number">0x10002</span> - func[<span class="string">'func_len'</span>]) + <span class="number">0x7620</span>)</span><br><span class="line">        rand_index += <span class="number">1</span></span><br><span class="line">        changeFunc = smc_core(src, binary[func[<span class="string">'data_off'</span>]:], func[<span class="string">'func_len'</span>])</span><br><span class="line">        new_func_src += changeFunc</span><br><span class="line">        </span><br><span class="line">        func[<span class="string">'func_off'</span>] = binFuncOffs</span><br><span class="line">        binFuncOffs += func[<span class="string">'func_len'</span>]</span><br><span class="line">        func[<span class="string">'key_start'</span>] = key_index</span><br><span class="line">        key_index += func[<span class="string">'key_len'</span>]</span><br><span class="line"></span><br><span class="line">        funcList[v3], funcList[i] = funcList[i], funcList[v3]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0x21</span>):</span><br><span class="line">        v4 = util.random_num[rand_index]</span><br><span class="line">        v4 = j + v4 % (<span class="number">33</span> - j)</span><br><span class="line">        rand_index += <span class="number">1</span></span><br><span class="line">        funcList[v4], funcList[j] = funcList[j], funcList[v4]</span><br><span class="line"></span><br><span class="line">    replaceInBinary(<span class="number">0xbc6</span>, new_func_src, len(new_func_src))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u64toS</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">'&lt;Q'</span>, num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    flag = u64toS(<span class="number">0x45123A7920755C24</span>) + u64toS(<span class="number">0x17263719711D201E</span>) + u64toS(<span class="number">0x4A7C67303E100367</span>) + u64toS(<span class="number">0x11621308555E1B11</span>) + u64toS(<span class="number">0x122C17445A7C6C68</span>) + u64toS(<span class="number">0x576D0C6324095979</span>) + u64toS(<span class="number">0x265D0F6A0C27651F</span>) + u64toS(<span class="number">0xA375C1433594643</span>) + u64toS(<span class="number">0x2C16022663</span>)</span><br><span class="line">    flag = map(ord, list(flag))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">666</span>):</span><br><span class="line">        once_key = solve_once_round()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+]: Solve round &#123;&#125;, key: &#123;&#125;'</span>.format(i, once_key)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(flag)):</span><br><span class="line">            flag[j] ^= ord(once_key[j])</span><br><span class="line">        changeTable()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span>.join(map(chr, flag))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="comment"># print solve_once_round()</span></span><br><span class="line">    <span class="comment"># changeTable()</span></span><br><span class="line">    <span class="comment"># print solve_once_round()</span></span><br></pre></td></tr></table></figure><p>本来计划用pwntools进行循环交互的，那么我就不需要去模拟数组打乱部分了，但是pwntools不知道什么原因会阻塞。我觉得我这种解法太复杂了，需要把整个binary逆一遍并且再模拟一遍，工作量很大，能否使用现有的工具去简化整个流程呢？</p><p>接下来看一看官方wp</p><hr><p>….看完了官方wp，居然是用gdb脚本爆破的，，，晕</p><h2 id="Challenge-7"><a href="#Challenge-7" class="headerlink" title="Challenge 7"></a>Challenge 7</h2><p>这是flare-on的第七题了，这道题当时简单看了一下没做出来，现在就着官方wp看一下</p><p>首先，刚开始的时候我看到了那个带flare-on字符串的函数，有个异或对比的操作，但是解出来是Th1s_1s_th3_wr0ng_k3y_</p><p>然后准备动态调看看什么情况，但是一跑就退出了，不知道什么情况，现在结合wp看，我是没有注意到关键的函数</p><p>很容易能注意到<code>sub_1001800</code>和<code>sub_1001600</code>这两个条件函数，只有满足才会执行接下来的流程</p><p>简单查了MS的api可知道，这是对系统的版本做了检查</p><p><code>sub_1001800</code>：只有Windows 7和Windows Server 2008 R2才能满足条件</p><p><code>sub_1001600</code>：程序要运行在WOW64的环境下</p><p>这里设计到WOW64（Windows on Windows ），这个机制是为了确保向前兼容，使得32位的程序能够直接运行在64位的系统上</p><p><img src="/2018/11/21/2018flare-on-recording/wow64.png" alt="wow64"></p><p>借用一下官方wp的图，原始32位windows跟借助wow所加载的dll是不一样的</p><p>程序还包含了一个x64call的函数，用了一种很hacker的技巧从32位跳转到执行64位程序</p><p><a href="http://rce.co/knockin-on-heavens-gate-dynamic-processor-mode-switching/" target="_blank" rel="noopener">http://rce.co/knockin-on-heavens-gate-dynamic-processor-mode-switching/</a></p><p>在分析中可以看到他把data哩的数据都跟0xDEEDEEB异或，简单异或出来后就是一个64位的dll</p><hr><p><u>未完待续。。。To be continue</u></p><!-- todo --><h2 id="Challenge-8"><a href="#Challenge-8" class="headerlink" title="Challenge 8"></a>Challenge 8</h2><p>继续看下一题，file得出是一个DOS/MBR 的boot sector</p><p>我们可以直接用qemu启动，启动出来是一个非常DOS的界面，蓝屏白字，要求逆向输入password</p><p>一股古老的气息扑面而来 That’s funny!</p><p><img src="/2018/11/21/2018flare-on-recording/c8_qemu.png" alt="qemu"></p><p>接下来可以用qemu+GDB调试</p><p><code>qemu-system-x86_64 doogie.bin -S -s</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> .gdbinit</span></span><br><span class="line">set $lastcs = -1</span><br><span class="line"></span><br><span class="line">define hook-stop</span><br><span class="line"><span class="meta">  #</span><span class="bash"> There doesn<span class="string">'t seem to be a good way to detect if we'</span>re <span class="keyword">in</span> 16- or</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 32-bit mode, but we always run with CS == 8 <span class="keyword">in</span> 32-bit mode.</span></span><br><span class="line">  if $cs == 8 || $cs == 27</span><br><span class="line">    if $lastcs != 8 &amp;&amp; $lastcs != 27</span><br><span class="line">      set architecture i386</span><br><span class="line">    end</span><br><span class="line">    x/i $pc</span><br><span class="line">  else</span><br><span class="line">    if $lastcs == -1 || $lastcs == 8 || $lastcs == 27</span><br><span class="line">      set architecture i8086</span><br><span class="line">    end</span><br><span class="line">    # Translate the segment:offset into a physical address</span><br><span class="line">    printf "[%4x:%4x] ", $cs, $eip</span><br><span class="line">    x/i $cs*16+$eip</span><br><span class="line">  end</span><br><span class="line">  set $lastcs = $cs</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这里有个技巧，因为gef等插件不能显示实地址上的调试信息，所以我们可以通过这个脚本令单步调试的时候显示出bootloader上的指令</p><p><code>gdb -x .gdbinit doogie.bin</code> </p><p><code>b *0x7c00</code></p><p><code>target remote 127.0.0.1:1234</code></p><p>对于ROM，默认加载地址是在0x7c00，这是BIOS中的约定，具体为什么可以看</p><p><a href="https://www.glamenv-septzen.net/en/view/6" target="_blank" rel="noopener">Why BIOS loads MBR into 0x7C00 in x86</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">seg000:0027 sub_27          proc near               ; CODE XREF: seg000:0021↑p</span><br><span class="line">seg000:0027                 xor     eax, eax</span><br><span class="line">seg000:002A                 mov     di, sp</span><br><span class="line">seg000:002C                 push    eax</span><br><span class="line">seg000:002E                 push    ebx</span><br><span class="line">seg000:0030                 push    es</span><br><span class="line">seg000:0031                 push    8000h</span><br><span class="line">seg000:0034                 push    7</span><br><span class="line">seg000:0036                 push    10h</span><br><span class="line">seg000:0038                 mov     si, sp</span><br><span class="line">seg000:003A                 mov     dl, ds:7C45h</span><br><span class="line">seg000:003E                 mov     ah, 42h ; &apos;B&apos;</span><br><span class="line">seg000:0040                 int     13h             ; DISK - IBM/MS Extension - EXTENDED READ (DL - drive, DS:SI - disk address packet)</span><br><span class="line">seg000:0042                 mov     sp, di</span><br><span class="line">seg000:0044                 retn</span><br><span class="line">seg000:0044 sub_27          endp</span><br></pre></td></tr></table></figure><p>那么，关键便是sub_27函数中的<code>int 13h</code>了</p><p>引用wiki中的解释</p><p><a href="https://en.wikipedia.org/wiki/INT_13H#INT_13h_AH=42h:_Extended_Read_Sectors_From_Drive" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/INT_13H#INT_13h_AH=42h:_Extended_Read_Sectors_From_Drive</a></p><p>那么，在这里便是</p><table><thead><tr><th style="text-align:center">DAP Element</th><th style="text-align:center">Hex Byte</th></tr></thead><tbody><tr><td style="text-align:center">Size</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">Reserved</td><td style="text-align:center">00</td></tr><tr><td style="text-align:center"># Sectors to Read</td><td style="text-align:center">00 07</td></tr><tr><td style="text-align:center">Destination Address</td><td style="text-align:center">00 00 80 00</td></tr><tr><td style="text-align:center">Start Sector</td><td style="text-align:center">00 00 00 00 00 00 00 01</td></tr></tbody></table><p>这整个中断的操作就是从第一扇区（sector）开始读取7个扇区放到0x8000上</p><p>而一个扇区的大小为0x200，即512 Bytes，所以我们不看一开始的loader，只需要把整个image rebase到0x8000-0x200 = 0x7E00即可对后续进行分析</p><p>或者可以把image偏移从0x200开始的数据dump出来，然后rebase到0x8000进行分析</p><p>然后则是分析程序逻辑，逻辑非常简单，把binary中固定的data与当前日期异或再与用户输入的密码异或</p><p>首先日期从开头文字已经提示了，是<code>1990/02/06</code><br>然后对用户输入的密码，首先明确几个限制，必须再0x20-0x7f这个可见字符集中，另外储存密码的buffer总长度为21</p><p>因为用于异或的data很大，那么这不可能是输出@flare-on之类的flag，猜测这是个asciiart</p><p>既然是asciiart，则输出应当也是可见字符，接下来便是通过暴力的方法进行解了</p><p>这实际上便是密码学中的一个问题，参考cryptopals上的一道题目</p><p><a href="http://cryptopals.com/sets/1/challenges/6" target="_blank" rel="noopener">http://cryptopals.com/sets/1/challenges/6</a></p><p>通过计算等长的字符串的汉明距离（hamming distance），距离最小的便是猜测密码的可能长度</p><p>然后便可以对密码进行进一步的猜测</p><p>官方wp中提到一个开源工具可以用来进行xor评分猜测</p><p><a href="https://github.com/hellman/xortool" target="_blank" rel="noopener">https://github.com/hellman/xortool</a></p><h2 id="challenge-9"><a href="#challenge-9" class="headerlink" title="challenge 9"></a>challenge 9</h2><p>To be continue…still writing…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://flare-on.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://flare-on.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;记录一下今年的flare-on，断断续续做了好久，最后12题中总共解出6题，后面的题就不够时间看了&lt;/p&gt;
&lt;p&gt;再一次感受到自己是在太菜了，发现自己在逆向的时候很不善于用一些有用的工具，大部分时候是通过自己手动硬逆，事实上，逆向的目的是要搞懂程序在干些什么，不必去过于探究一些细节，而对于我数学、算法方面的硬伤，只需要抽时间去恶补理论基础就好了。但对于逆向技巧，flareon给了一个很好的学习逆向的题目。&lt;/p&gt;
&lt;p&gt;另外，flare-on的官方writeup真的是太感人了，太详细了！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.fireeye.com/blog/threat-research/2018/10/2018-flare-on-challenge-solutions.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.fireeye.com/blog/threat-research/2018/10/2018-flare-on-challenge-solutions.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;希望明年能拿到徽章&lt;/p&gt;
    
    </summary>
    
      <category term="WriteUp" scheme="http://blog.2bsitcker.cn/categories/WriteUp/"/>
    
    
      <category term="逆向" scheme="http://blog.2bsitcker.cn/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="flare-on" scheme="http://blog.2bsitcker.cn/tags/flare-on/"/>
    
  </entry>
  
  <entry>
    <title>诈尸一下</title>
    <link href="http://blog.2bsitcker.cn/2018/10/08/%E8%AF%88%E5%B0%B8%E4%B8%80%E4%B8%8B/"/>
    <id>http://blog.2bsitcker.cn/2018/10/08/诈尸一下/</id>
    <published>2018-10-08T02:08:24.000Z</published>
    <updated>2018-10-08T03:01:58.252Z</updated>
    
    <content type="html"><![CDATA[<p>在咸鱼很久以后，我突然想起了这个被我荒废了很久的博客</p><p>结合在断更之后所做过的事，现在立几个flag，先占几个坑，发布准备更新的文章</p><ol><li>android的api以及Linux内核hook的实现</li><li>Flare-on5 题解1-6</li><li>giglf的工具集</li></ol><p>这段时间打了好多ctf比赛，主做re，但是没打算写wp23333</p><p>有些是太久远了，而更主要原因是因为做出来的题没价值</p><p>最近做了flare-on5，做出了6题，flareon感觉还是能学到非常多的东西的</p><p>接下来打算着重总结一下</p><p>暂时，就这样（顺便测试一下新电脑上的hexo deploy</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在咸鱼很久以后，我突然想起了这个被我荒废了很久的博客&lt;/p&gt;
&lt;p&gt;结合在断更之后所做过的事，现在立几个flag，先占几个坑，发布准备更新的文章&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;android的api以及Linux内核hook的实现&lt;/li&gt;
&lt;li&gt;Flare-on5 题解1-
      
    
    </summary>
    
      <category term="感想or发疯" scheme="http://blog.2bsitcker.cn/categories/%E6%84%9F%E6%83%B3or%E5%8F%91%E7%96%AF/"/>
    
    
      <category term="随便写写啦" scheme="http://blog.2bsitcker.cn/tags/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99%E5%95%A6/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu克隆mac地址后连不上网</title>
    <link href="http://blog.2bsitcker.cn/2018/04/06/Ubuntu%E5%85%8B%E9%9A%86mac%E5%9C%B0%E5%9D%80%E5%90%8E%E8%BF%9E%E4%B8%8D%E4%B8%8A%E7%BD%91/"/>
    <id>http://blog.2bsitcker.cn/2018/04/06/Ubuntu克隆mac地址后连不上网/</id>
    <published>2018-04-06T02:53:35.000Z</published>
    <updated>2018-04-06T03:04:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录最近配置ubuntu网络时遇到的神坑……</p><p>首先，我现在工位的电脑我装的是ubuntu16.04，然后因为端口的ip是跟mac地址绑定的，并且当时绑的是我笔记本的地址</p><p>所以，为了避免麻烦再绑一次，我就想直接改了ubuntu的mac就好了，那样我有时用笔记本直接插网线也就可以了</p><a id="more"></a><p>重点来了，我采取的方式是直接在网络连接里设置，clone mac address改成我笔记本的mac地址</p><p>结果是，重启电脑后，网络连接反复像网线没插好，一直在重复尝试连接，刚连上就又断了！</p><p>排除了网线、网络问题（因为直接插上我笔记本是能秒连的）</p><p>ubuntu里ifconfig能看到网卡，检查过网卡驱动也是好的，应该也不是这个原因</p><p>后来，我发现，如果我把克隆mac地址去掉，网络就秒连了！但是这样我还是上不了网啊！</p><p>上网搜了一波，终于发现了这个bug的出处</p><p><a href="https://askubuntu.com/questions/307717/networkmanager-problem-with-cloned-mac-address" target="_blank" rel="noopener">https://askubuntu.com/questions/307717/networkmanager-problem-with-cloned-mac-address</a></p><p>居然是因为network-manager的bug？？？</p><p>再看描述，居然还是从ubuntu12.04遗留下来的，居然还没解决？？？</p><p>好了……最后解决了，我写了个脚本，每次开机后执行下就好了……</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 down</span><br><span class="line">ifconfig eth0 hw ether XX:XX:XX:XX:XX:XX</span><br><span class="line">ifconfig eth0 up</span><br></pre></td></tr></table></figure><p>记得把eth0换成你自己的网卡……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录最近配置ubuntu网络时遇到的神坑……&lt;/p&gt;
&lt;p&gt;首先，我现在工位的电脑我装的是ubuntu16.04，然后因为端口的ip是跟mac地址绑定的，并且当时绑的是我笔记本的地址&lt;/p&gt;
&lt;p&gt;所以，为了避免麻烦再绑一次，我就想直接改了ubuntu的mac就好了，那样我有时用笔记本直接插网线也就可以了&lt;/p&gt;
    
    </summary>
    
      <category term="Study_Note" scheme="http://blog.2bsitcker.cn/categories/Study-Note/"/>
    
    
      <category term="network-manager" scheme="http://blog.2bsitcker.cn/tags/network-manager/"/>
    
  </entry>
  
  <entry>
    <title>FindTheActivity出题记录</title>
    <link href="http://blog.2bsitcker.cn/2018/03/26/FindTheActivity%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.2bsitcker.cn/2018/03/26/FindTheActivity出题记录/</id>
    <published>2018-03-26T02:54:43.000Z</published>
    <updated>2018-03-26T03:09:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>某次ctf内部赛上出了一题android的re，算是第一次认真出题了23333</p><p>因为太菜了，这破题从开始想到写花我4天= =，最后还改了一个思路</p><p>题目源码<a href="https://github.com/giglf/CTF_RE_FindTheActivity" target="_blank" rel="noopener">https://github.com/giglf/CTF_RE_FindTheActivity</a></p><a id="more"></a><h1 id="FindTheActivity"><a href="#FindTheActivity" class="headerlink" title="FindTheActivity"></a>FindTheActivity</h1><p>我刚开始想到的出题思路是启动一个trick的Activity，误导验证过程，再通过AMS hook修改实际启动的Activity，真正启动的是一个要通过解密出来的dex里的Activity，这个解密出来的dex要通过DexClassLoader进行加载</p><p>但是我害怕这个太简单，就想着再加了层NativeActivity</p><p>从google的样例代码直接扒了下来简单修改了一下（不然完全不会写</p><p>初始想法是把内层的整个dex给加密到so文件的data段，然后jeb反编译的时候会什么都看不到，再动态加载内存里的dex，但是……因为太菜了不会写（捂脸），这个参考了之前pwnhub上的一道题，后来仔细看了下，发现我内层的dex写得有点大……正常编译下来700多k，本身想法是直接加密后拷到代码中作为一个全局常量放在.data段，想参考apk加固的做法，但是一直没找到……总结下来还是太菜了，感觉给整个文件patch到data段不应该是这么个做法</p><p>所以我就改成了从NativeActivity传一个key给MainActivity，作为获取解密的秘钥的关键，强制让解题者去看NativeActivity（滑稽），但是还遗留了一个偷鸡解法</p><p>其中AMS hook替换启动的Activity参考了这篇博客里的做法</p><p><a href="http://weishu.me/2016/03/21/understand-plugin-framework-activity-management/" target="_blank" rel="noopener">http://weishu.me/2016/03/21/understand-plugin-framework-activity-management/</a></p><h1 id="writeup"><a href="#writeup" class="headerlink" title="writeup"></a>writeup</h1><h2 id="正常解法"><a href="#正常解法" class="headerlink" title="正常解法"></a>正常解法</h2><p>首先安装上手机，发现是一个屏幕颜色不断变换的界面，点击操作无别的反应。</p><p>然后jeb直接反编译，可以发现底下有6个类，其中名称很明显的是<code>CheckActivity</code>和<code>MainActivity</code></p><p>对于一个android的apk，首先思路是要查看一下AndroidManifest.xml文件，这记录了该apk的一些权限、Activity等组件注册信息。</p><p><code>&lt;intent-filter&gt;</code>包含这两句的是第一个启动的Activity</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>最后可以看到第一个启动的其实是NativeActivity，搜一下能知道这是一个纯粹靠cpp写的Activity，可以从apk解压出/lib/libnative-main.so，这是包含NativeActivity的地方，并且主函数为<code>android_main</code> （但是我做了轻轻的混淆，把这符号名给删了）</p><p>但是搜一下字符串能找到</p><p><code>.text:00006288    0000003A    C    Ahahahah, go to shake your phone 100 times in 10 seconds!</code></p><p>这样的字符串</p><p>跳转过去就是原来的<code>android_main</code>了</p><p>10秒里摇一摇摇到100次，会跳转到MainActivity（这开始应该是试出来的），会通过log输出一些信息，可以从ddms中看到</p><hr><p>再看到MainActivity，全程就是一个crackme，获取输入，然后放到intent里，再启动CheckActivtity，然后开始验证</p><p>这个验证过程很简单，很容易就能恢复出<code>green{Do_you_really_think_this_is_flag?}</code></p><p>这是是flag吗？？并不是，这只是一个trick（要这么简单的话我写那么多类干嘛哦）</p><p>但是intent的的确确是启动了CheckActivity这个Activity，但实际上这个flag在手机里输入试下也是出现wrong的。</p><p>之后可以注意到，在MainActivity中还有个attachBaseContext，这个方法是在Activity生成时最开始调用的，注意到里面调用了另外的一个a的类</p><p>后面这些类都做混淆了</p><p>几个类翻看一下c里面有许多base64编码的字符串，简单解一下能看到一些类名，还有一个<code>ctf.green.findtheactivity.check.CheckActivity</code>的类名，但是目录显然不包含<code>ctf.green.findtheactivity.check</code>的包，后面还能看到DexClassLoader的类的调用，dex其实就是android虚拟机的可执行文件，可以猜想他加载了另外一个Dex！</p><p>再往代码上面看，能看到getAssets()的调用，base64解码后是一串类似MD5的值（的确也是MD5），然后在apk包里的asset目录能找到这个文件</p><p>接下来的操作，复制出来，对读到的字节还调用了一个函数，可以猜到是做一个解密的操作，这个解密的类是b，其中秘钥是文件名和一个int值拆解成的4字节byte数组轮流进行异或</p><p>而这个int值跟上去是MainActivity中从启动intent获取的一个叫key的字段的值</p><p>而启动MainActivity的是NativeActivity，再从NativeActivity中看，在摇到100次后会调用一个函数，这时还传进去一个int值，int值是根据摇晃次数生成的，但摇晃次数是固定的，实际这就是一个写死的值，很容易算出是70624300（数字人生——林子祥 233333）</p><p>获取key后就是解密asset底下那个文件了</p><p>因为这里算法类已经给出，可以直接复制一下自己写个java调用，或者对算法熟悉的可以看出这是一个ARC4的加解密，直接恢复后就出来那个动态加载的dex了</p><p>反编译一下这个dex，跟那个trick的CheckActivity非常相似，而且对flag的验证也只是几个异或，本来想着到最后一步了就不难为大家了（其实也是懒得写更复杂的验证算法2333333）</p><p>最后就能出来真正的flag了</p><h2 id="偷鸡解法"><a href="#偷鸡解法" class="headerlink" title="偷鸡解法"></a>偷鸡解法</h2><p>后来还放出了一个hint，注意data目录，因为DexClassLoader加载的dex在程序中有一步复制出来的步骤</p><p>查看手机里<code>/data/data/&lt;package&gt;/</code>这个存放app的信息的目录，就能发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@pisces:/data/data/ctf.green.findtheactivity # ls</span><br><span class="line">app_dex</span><br><span class="line">app_outdex</span><br><span class="line">cache</span><br><span class="line">files</span><br><span class="line">lib</span><br></pre></td></tr></table></figure><p>有个app_dex和app_outdex的目录</p><p>从app_outdex中能找到一个dex文件，这其实就已经是解密过后的dex了！</p><p>正常逻辑是解密后放到<code>app_dex</code>，然后<code>app_outdex</code>生成的是一个缓存用的odex文件，程序中在dex成功加载后就会删除两个文件夹里的内容，所以app_dex是空的，但是运行需要这个odex文件，odex文件是没删掉的！</p><p>通过adb pull把odex文件拷出</p><p>再用baksmali把odex解出来smali</p><p><code>java ‐jar baksmali.jar de ‐‐classpath‐dir &lt;framework‐dir&gt; &lt;classes.dex&gt;</code></p><p>用smali<br><code>java ‐jar smali.jar ass out</code></p><p>把smali恢复成dex，得到out.dex，就能正常反编译了，然后就是那个智障的验证过程</p><p>或者，可以在动态调试还没删除app_dex下的dex的时候pull出来，再或者……看手速？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;某次ctf内部赛上出了一题android的re，算是第一次认真出题了23333&lt;/p&gt;
&lt;p&gt;因为太菜了，这破题从开始想到写花我4天= =，最后还改了一个思路&lt;/p&gt;
&lt;p&gt;题目源码&lt;a href=&quot;https://github.com/giglf/CTF_RE_FindTheActivity&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/giglf/CTF_RE_FindTheActivity&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="WriteUp" scheme="http://blog.2bsitcker.cn/categories/WriteUp/"/>
    
    
      <category term="Android" scheme="http://blog.2bsitcker.cn/tags/Android/"/>
    
      <category term="writeup" scheme="http://blog.2bsitcker.cn/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>编译小米3td内核记录</title>
    <link href="http://blog.2bsitcker.cn/2018/01/31/%E7%BC%96%E8%AF%91%E5%B0%8F%E7%B1%B33td%E5%86%85%E6%A0%B8%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.2bsitcker.cn/2018/01/31/编译小米3td内核记录/</id>
    <published>2018-01-31T12:34:45.000Z</published>
    <updated>2018-03-26T03:10:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先吐槽一下小米3移动版，居然用的是英伟达的CPU，而联通、电信版是高通的</p><p>比较舒服的是小米已经开源了很多内核源码，资料基本都能查到</p><hr><p>虽然安卓底层也是linux的内核，但因为安卓百花齐放，一堆不同的硬件、适配，不同版本的手机也有定制的内核，不然很可能出现某个硬件用不了的情况</p><p>另外，编译过程还出了很多的错误emmmmm</p><p>猜测是编译器版本不同导致的问题</p><p>一下算是手把手教如何编译一遍了……</p><a id="more"></a><h2 id="Mi3-TD分支选择"><a href="#Mi3-TD分支选择" class="headerlink" title="Mi3 TD分支选择"></a>Mi3 TD分支选择</h2><p>首先再吐槽一下，github的repo description没有显示全，导致刚开始我没找到Mi3 TD的分支，但在网页的title可以全部显示出来</p><blockquote><p>MiCode/Xiaomi_Kernel_OpenSource: Xiaomi kernel OpenSource：cancro-kk-oss(contain MI 3W, MI 3C, MI 4 series, MI NOTE), armani-jb-oss(H1S), dior-kk-oss(HM-NOTE-LTE), ferrari-l-oss(Xiaomi 4i), thmoas-kk-oss(HM2 LTE),libra-l-oss(Xiaomi 4c,Xiaomi 4s and Xiaomi NotePro),kenzo-l-oss(HM Note3),ido-l-oss(Redme 3 and Redmi 2 android L),gucci-kk-oss(HM Note dual SIM version),pisces-kk-oss(MI 3TD),gemini-m-oss(Mi 5),hydrogen-m-oss(Mi Max),mocha-kk-oss(Mi Pad),latte-l-oss(Mi Pad2),land-m-oss(Redmi 3S),markw-m-oss(Redmi 4),scorpio-m-oss(Mi 5/5s/5s Plus/Note2 and MIX),mido-m-oss(Redmi Note4X),sagit-n-oss(Xiaomi 6 and MIX 2),jason-n-oss(MI Note 3),cancro-m-oss(Mi 3W/C, Mi 4, Mi Note),oxygen-n-oss(Mi Max2),tissot-n-oss(Mi A1)</p></blockquote><p><a href="https://github.com/MiCode/Xiaomi_Kernel_OpenSource/tree/pisces-kk-oss" target="_blank" rel="noopener">https://github.com/MiCode/Xiaomi_Kernel_OpenSource/tree/pisces-kk-oss</a></p><p>对应分支是这个<code>pisces-kk-oss</code></p><p>其他不同的手机可以选对应的版本</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>因为我的Ubuntu很多库都装好了= = 并不清楚准确需要到那些库，但有一点是，我使用的交叉编译工具是<code>arm-none-eabi-gcc</code> 可直接通过apt下载</p><p>再补充一下，我的编译环境是Ubuntu16.04 amd64</p><p>当所有都装好后，就可以正式开始编译的工作了</p><h2 id="编译操作"><a href="#编译操作" class="headerlink" title="编译操作"></a>编译操作</h2><p>进入到内核源码目录，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ARCH=arm</span><br><span class="line"><span class="built_in">export</span> CROSS_COMPILE=arm-none-eabi-</span><br></pre></td></tr></table></figure><p>然后，从项目的git log可以看到</p><blockquote><p> Kernel: Xiaomi kernel changes for XIAOMI 3TD<br> ​    </p><pre><code>The Patch based on NVIDIA release TAG tegra-17r18-android-4.2The kernel config file used is tegra11_pisces_user_defconfigChange-Id: Ie601491b74b18e87303ec010b4df660e127f03beSigned-off-by: hehao &lt;hehao@xiaomi.com&gt;</code></pre></blockquote><p>kernel config file的版本</p><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make tegra11_pisces_user_defconfig</span><br></pre></td></tr></table></figure><p>进行编译的预设置</p><p>另外，因为我是要借用Module.symvers编写LKM的，所以在生成的<code>.config</code> 文件中，设置<code>CONFIG_MODVERSIONS=y</code></p><p>这篇文章大家可以参考<a href="http://www.freebuf.com/articles/system/93168.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/system/93168.html</a></p><p>一切准备就绪，就可以直接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>了</p><h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><p>编译过程中断了好几次，经过修改后终于是成功了</p><p>这里就总结一些各个存在问题的地方</p><ol><li>代码BUG？</li></ol><p>在编译到<code>/drivers/media/video/tegra/ad5823.c</code> 的时候</p><p>会出现<code>error: iteration 6u invokes undefined behavior</code> 的编译错误</p><p>说是第六次循环的时候出现未定义行为</p><p>看了一下代码</p><p>这一行循环是这样的，看内容是遍历ad5823_gpios，然后针对里面的元素进行操作</p><p>但是看下面的static代码，这个结构体数组只有6个，然后循环体里用了<code>&lt;=</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">nvc_gpio_init</span> <span class="title">ad5823_gpios</span>[] = &#123;</span></span><br><span class="line">&#123;AD5823_GPIO_RESET, GPIOF_OUT_INIT_LOW, <span class="string">"reset"</span>, <span class="literal">false</span>, <span class="literal">true</span>,&#125;,</span><br><span class="line">&#123;AD5823_GPIO_I2CMUX, <span class="number">0</span>, <span class="string">"i2c_mux"</span>, <span class="number">0</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;AD5823_GPIO_GP1, <span class="number">0</span>, <span class="string">"gp1"</span>, <span class="number">0</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;AD5823_GPIO_GP2, <span class="number">0</span>, <span class="string">"gp2"</span>, <span class="number">0</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;AD5823_GPIO_GP3, <span class="number">0</span>, <span class="string">"gp3"</span>, <span class="number">0</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;AD5823_GPIO_CAM_AF_PWDN, <span class="number">0</span>, <span class="string">"cam_af_pwdn"</span>, <span class="number">1</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= ARRAY_SIZE(ad5823_gpios); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (info-&gt;gpio[i].flag &amp;&amp; info-&gt;gpio[i].own) &#123;</span><br><span class="line">gpio_free(info-&gt;gpio[i].gpio);</span><br><span class="line">info-&gt;gpio[i].own = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把<code>&lt;=</code>改成<code>&lt;</code> 后就好了</p><ol start="2"><li>报头文件找不到的错误，主要文件<code>drivers/tspdrv/tspdrv.c</code></li></ol><p>include的方式都是用&lt;&gt;，但所需的头文件都在同目录找到了，猜这是编译器版本的原因了，把那几个&lt;&gt;改成双引号””就好了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tspdrv.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ImmVibeSPI.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tspdrvOutputDataHandler.c"</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_HIGH_RES_TIMERS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"VibeOSKernelLinuxHRTime.c"</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"VibeOSKernelLinuxTime.c"</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>include/linux/dynamic_debug.h:64:16: error: implicit declaration of function &#39;KBUILD_STR&#39;</code></li></ol><p>这个报错在google的时候找到了一毛一样的错误，在Makefile添加了参数后解决~</p><p><a href="https://stackoverflow.com/questions/41388294/error-while-compiling-android-3-10-kernel-source" target="_blank" rel="noopener">https://stackoverflow.com/questions/41388294/error-while-compiling-android-3-10-kernel-source</a></p><p>根目录的Makefile在KBUILD_CFLAGS添加</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">KBUILD_CFLAGS += -w</span><br><span class="line"><span class="comment"># if all errors are to be suppressed</span></span><br><span class="line"></span><br><span class="line">KBUILD_CFLAGS += -Wno-error=unused-but-set-variable</span><br><span class="line"><span class="comment"># if that specific error is to be suppressed.</span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>error: ‘tspdrv’ undeclared</code></li></ol><p>这个问题直接在Xiaomi kernel的issues下找到了</p><p><a href="https://github.com/MiCode/Xiaomi_Kernel_OpenSource/issues/62" target="_blank" rel="noopener">https://github.com/MiCode/Xiaomi_Kernel_OpenSource/issues/62</a></p><p>把<code>drivers/tspdrv</code> 下的Makefile修改一下</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##EXTRA_CFLAGS += -I$(M)</span></span><br><span class="line">EXTRA_CFLAGS += -I<span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br></pre></td></tr></table></figure><p>就成功了</p><h2 id="编译成功"><a href="#编译成功" class="headerlink" title="编译成功"></a>编译成功</h2><p>没啥说了，好冷不想写了[doge]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先吐槽一下小米3移动版，居然用的是英伟达的CPU，而联通、电信版是高通的&lt;/p&gt;
&lt;p&gt;比较舒服的是小米已经开源了很多内核源码，资料基本都能查到&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;虽然安卓底层也是linux的内核，但因为安卓百花齐放，一堆不同的硬件、适配，不同版本的手机也有定制的内核，不然很可能出现某个硬件用不了的情况&lt;/p&gt;
&lt;p&gt;另外，编译过程还出了很多的错误emmmmm&lt;/p&gt;
&lt;p&gt;猜测是编译器版本不同导致的问题&lt;/p&gt;
&lt;p&gt;一下算是手把手教如何编译一遍了……&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://blog.2bsitcker.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://blog.2bsitcker.cn/tags/Android/"/>
    
      <category term="内核编译" scheme="http://blog.2bsitcker.cn/tags/%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/"/>
    
      <category term="mi3_td" scheme="http://blog.2bsitcker.cn/tags/mi3-td/"/>
    
  </entry>
  
  <entry>
    <title>Blog update again...</title>
    <link href="http://blog.2bsitcker.cn/2017/11/28/Blog-update-again/"/>
    <id>http://blog.2bsitcker.cn/2017/11/28/Blog-update-again/</id>
    <published>2017-11-28T11:51:17.000Z</published>
    <updated>2017-11-28T12:34:58.000Z</updated>
    
    <content type="html"><![CDATA[<p> 简单来说</p><p>就是觉得以前用的那个主题freemind</p><p>太单调了</p><p>毕竟也不是自己写的</p><p>某次看别人的博客，看到一个叫spfk的主题</p><p><a href="https://github.com/luuman/hexo-theme-spfk" target="_blank" rel="noopener">https://github.com/luuman/hexo-theme-spfk</a></p><p>感觉就是</p><p>艾玛太炫酷了</p><p>然后就用了</p><a id="more"></a><p>还有就是修复了数学公式不能正常渲染的bugs</p><p>再就是，我把背景图换成了美食系列</p><p>祝你们看博客愉快 ！</p><p>这真的不是一篇美食博客</p><p><img src="/2017/11/28/Blog-update-again/bg-1.jpg" alt="bg-1"></p><p>超想回去吃双皮奶了 (つД｀)･ﾟ･</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 简单来说&lt;/p&gt;
&lt;p&gt;就是觉得以前用的那个主题freemind&lt;/p&gt;
&lt;p&gt;太单调了&lt;/p&gt;
&lt;p&gt;毕竟也不是自己写的&lt;/p&gt;
&lt;p&gt;某次看别人的博客，看到一个叫spfk的主题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/luuman/hexo-theme-spfk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/luuman/hexo-theme-spfk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感觉就是&lt;/p&gt;
&lt;p&gt;艾玛太炫酷了&lt;/p&gt;
&lt;p&gt;然后就用了&lt;/p&gt;
    
    </summary>
    
      <category term="感想or发疯" scheme="http://blog.2bsitcker.cn/categories/%E6%84%9F%E6%83%B3or%E5%8F%91%E7%96%AF/"/>
    
    
      <category term="随便写写啦" scheme="http://blog.2bsitcker.cn/tags/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99%E5%95%A6/"/>
    
  </entry>
  
  <entry>
    <title>源码分析Android so加载过程</title>
    <link href="http://blog.2bsitcker.cn/2017/11/22/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Android-so%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
    <id>http://blog.2bsitcker.cn/2017/11/22/源码分析Android-so加载过程/</id>
    <published>2017-11-22T11:34:04.000Z</published>
    <updated>2017-11-22T11:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在目前许多的Android应用加固中，都用到了so文件，并且通过针对so文件的section table进行混淆处理，以避免ida等逆向工具进行静态分析，因为在Android源码中，so的加载是完全不需要section信息的。</p><p>在此之前，很多文章都已经写到过关于Android so加载的流程，但很多都是基于Android4.x系统</p><p>虽然流程大同小异，但在Android5.0以后已经从Dalvik转换成ART，文件关系上已经对不上</p><p>因此，我针对Android7.1.2_r28的代码，对so加载过程进行分析</p><h1 id="so加载"><a href="#so加载" class="headerlink" title="so加载"></a>so加载</h1><p>在加载一个so的时候，必然要写一句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.loadLibrary(<span class="string">"native-lib"</span>);</span><br></pre></td></tr></table></figure><p>那么，我们就从这个函数看起</p><a id="more"></a><p>在aosp目录中，这个方法位于<code>./libcore/ojluni/src/main/java/java/lang/Runtime.java</code> 当中</p><p>(一些关于异常错误处理的代码已删除，方便只看加载思路)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// ./libcore/ojluni/src/main/java/java/lang/Runtime.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadLibrary</span><span class="params">(String libname)</span> </span>&#123;</span><br><span class="line">        loadLibrary0(VMStack.getCallingClassLoader(), libname);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">loadLibrary0</span><span class="params">(ClassLoader loader, String libname)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    ......</span><br><span class="line">          </span><br><span class="line">        String libraryName = libname;</span><br><span class="line">        <span class="keyword">if</span> (loader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String filename = loader.findLibrary(libraryName);</span><br><span class="line">            </span><br><span class="line">            String error = doLoad(filename, loader);</span><br><span class="line">            <span class="keyword">if</span> (error != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedLinkError(error);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">......</span><br><span class="line">      <span class="comment">//下面删掉代码为根据平台加载对应的library，如x86、arm等</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">doLoad</span><span class="params">(String name, ClassLoader loader)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">  String librarySearchPath = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (loader != <span class="keyword">null</span> &amp;&amp; loader <span class="keyword">instanceof</span> BaseDexClassLoader) &#123;</span><br><span class="line">            BaseDexClassLoader dexClassLoader = (BaseDexClassLoader) loader;</span><br><span class="line">            librarySearchPath = dexClassLoader.getLdLibraryPath();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// nativeLoad should be synchronized so there's only one LD_LIBRARY_PATH in use regardless</span></span><br><span class="line">        <span class="comment">// of how many ClassLoaders are in the system, but dalvik doesn't support synchronized</span></span><br><span class="line">        <span class="comment">// internal natives.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nativeLoad(name, loader, librarySearchPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> should be synchronized, but dalvik doesn't support synchronized internal natives.</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">nativeLoad</span><span class="params">(String filename, ClassLoader loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            String librarySearchPath)</span></span>;</span><br></pre></td></tr></table></figure><hr><p>可以看到，到最后将会调用nativeLoad进入到native代码，接下来我们看一看native层的代码</p><p>nativeLoad代码位于<code>./libcore/ojluni/src/main/native/Runtime.c</code> </p><p>在以前的安卓源码中，相关定义是放在Dalvik虚拟机下的，后来换了ART，路径也有所变化，为此我找了很久</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./libcore/ojluni/src/main/native/Runtime.c</span></span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Runtime_nativeLoad(JNIEnv* env, jclass ignored, jstring javaFilename,</span><br><span class="line">                   jobject javaLoader, jstring javaLibrarySearchPath)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> JVM_NativeLoad(env, javaFilename, javaLoader, javaLibrarySearchPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后跳转到art目录下</span></span><br><span class="line"><span class="comment">// ./art/runtime/openjdkjvm/OpenjdkJvm.cc</span></span><br><span class="line"><span class="function">JNIEXPORT jstring <span class="title">JVM_NativeLoad</span><span class="params">(JNIEnv* env,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 jstring javaFilename,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 jobject javaLoader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 jstring javaLibrarySearchPath)</span> </span>&#123;</span><br><span class="line">  <span class="function">ScopedUtfChars <span class="title">filename</span><span class="params">(env, javaFilename)</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (filename.c_str() == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> error_msg;</span><br><span class="line">  &#123;</span><br><span class="line">    art::JavaVMExt* vm = art::Runtime::Current()-&gt;GetJavaVM();</span><br><span class="line">    <span class="keyword">bool</span> success = vm-&gt;LoadNativeLibrary(env,</span><br><span class="line">                                         filename.c_str(),</span><br><span class="line">                                         javaLoader,</span><br><span class="line">                                         javaLibrarySearchPath,</span><br><span class="line">                                         &amp;error_msg);</span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Don't let a pending exception from JNI_OnLoad cause a CheckJNI issue with NewStringUTF.</span></span><br><span class="line">  env-&gt;ExceptionClear();</span><br><span class="line">  <span class="keyword">return</span> env-&gt;NewStringUTF(error_msg.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过一系列的跳转，终于跑到关键的函数了</p><p>这个函数太长，不便于看思路，所以我只保留下了一些关键的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./art/runtime/java_vm_ext.cc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> JavaVMExt::LoadNativeLibrary(JNIEnv* env,</span><br><span class="line">                                  <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; path,</span><br><span class="line">                                  jobject class_loader,</span><br><span class="line">                                  jstring library_path,</span><br><span class="line">                                  <span class="built_in">std</span>::<span class="built_in">string</span>* error_msg) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//检查该NativeLibrary是否已加载</span></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Open the shared library.  Because we're using a full path, the system</span></span><br><span class="line">  <span class="comment">// doesn't have to search through LD_LIBRARY_PATH.  (It may do so to</span></span><br><span class="line">  <span class="comment">// resolve this library's dependencies though.)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Failures here are expected when java.library.path has several entries</span></span><br><span class="line">  <span class="comment">// and we have to hunt for the lib.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Below we dlopen but there is no paired dlclose, this would be necessary if we supported</span></span><br><span class="line">  <span class="comment">// class unloading. Libraries will only be unloaded when the reference count (incremented by</span></span><br><span class="line">  <span class="comment">// dlopen) becomes zero from dlclose.</span></span><br><span class="line"></span><br><span class="line">  Locks::mutator_lock_-&gt;AssertNotHeld(self);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* path_str = path.empty() ? <span class="literal">nullptr</span> : path.c_str();</span><br><span class="line">  <span class="keyword">void</span>* handle = android::OpenNativeLibrary(env,</span><br><span class="line">                                            runtime_-&gt;GetTargetSdkVersion(),</span><br><span class="line">                                            path_str,</span><br><span class="line">                                            class_loader,</span><br><span class="line">                                            library_path);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> needs_native_bridge = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (handle == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (android::NativeBridgeIsSupported(path_str)) &#123;</span><br><span class="line">      handle = android::NativeBridgeLoadLibrary(path_str, RTLD_NOW);</span><br><span class="line">      needs_native_bridge = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  VLOG(jni) &lt;&lt; <span class="string">"[Call to dlopen(\""</span> &lt;&lt; path &lt;&lt; <span class="string">"\", RTLD_NOW) returned "</span> &lt;&lt; handle &lt;&lt; <span class="string">"]"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (handle == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    *error_msg = dlerror();</span><br><span class="line">    VLOG(jni) &lt;&lt; <span class="string">"dlopen(\""</span> &lt;&lt; path &lt;&lt; <span class="string">"\", RTLD_NOW) failed: "</span> &lt;&lt; *error_msg;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> ......</span><br><span class="line">  </span><br><span class="line">  VLOG(jni) &lt;&lt; <span class="string">"[Added shared library \""</span> &lt;&lt; path &lt;&lt; <span class="string">"\" for ClassLoader "</span> &lt;&lt; class_loader &lt;&lt; <span class="string">"]"</span>;</span><br><span class="line"> ......</span><br><span class="line">  <span class="keyword">bool</span> was_successful = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">void</span>* sym;</span><br><span class="line">  <span class="keyword">if</span> (needs_native_bridge) &#123;</span><br><span class="line">    library-&gt;SetNeedsNativeBridge();</span><br><span class="line">  &#125;</span><br><span class="line">  sym = library-&gt;FindSymbol(<span class="string">"JNI_OnLoad"</span>, <span class="literal">nullptr</span>);</span><br><span class="line">  <span class="keyword">if</span> (sym == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    VLOG(jni) &lt;&lt; <span class="string">"[No JNI_OnLoad found in \""</span> &lt;&lt; path &lt;&lt; <span class="string">"\"]"</span>;</span><br><span class="line">    was_successful = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Call JNI_OnLoad.  We have to override the current class</span></span><br><span class="line">    <span class="comment">// loader, which will always be "null" since the stuff at the</span></span><br><span class="line">    <span class="comment">// top of the stack is around Runtime.loadLibrary().  (See</span></span><br><span class="line">    <span class="comment">// the comments in the JNI FindClass function.)</span></span><br><span class="line">    ScopedLocalRef&lt;jobject&gt; old_class_loader(env, env-&gt;NewLocalRef(self-&gt;GetClassLoaderOverride()));</span><br><span class="line">    self-&gt;SetClassLoaderOverride(class_loader);</span><br><span class="line"></span><br><span class="line">    VLOG(jni) &lt;&lt; <span class="string">"[Calling JNI_OnLoad in \""</span> &lt;&lt; path &lt;&lt; <span class="string">"\"]"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*JNI_OnLoadFn)</span><span class="params">(JavaVM*, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line">    JNI_OnLoadFn jni_on_load = <span class="keyword">reinterpret_cast</span>&lt;JNI_OnLoadFn&gt;(sym);</span><br><span class="line">    <span class="keyword">int</span> version = (*jni_on_load)(<span class="keyword">this</span>, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (runtime_-&gt;GetTargetSdkVersion() != <span class="number">0</span> &amp;&amp; runtime_-&gt;GetTargetSdkVersion() &lt;= <span class="number">21</span>) &#123;</span><br><span class="line">      fault_manager.EnsureArtActionInFrontOfSignalChain();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    self-&gt;SetClassLoaderOverride(old_class_loader.get());</span><br><span class="line"></span><br><span class="line"> ......</span><br><span class="line">   <span class="comment">//Version check</span></span><br><span class="line">    VLOG(jni) &lt;&lt; <span class="string">"[Returned "</span> &lt;&lt; (was_successful ? <span class="string">"successfully"</span> : <span class="string">"failure"</span>)</span><br><span class="line">              &lt;&lt; <span class="string">" from JNI_OnLoad in \""</span> &lt;&lt; path &lt;&lt; <span class="string">"\"]"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  library-&gt;SetResult(was_successful);</span><br><span class="line">  <span class="keyword">return</span> was_successful;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排除去一些版本检测，一些操作的语句，其实这个函数做的就是两个步骤</p><ol><li>调用<code>android::OpenNativeLibrary</code>，动态加载so到内存</li><li>从so中找到<code>JNI_Onload</code>函数，并调用。<code>sym = library-&gt;FindSymbol(&quot;JNI_OnLoad&quot;, nullptr);</code></li></ol><hr><p>然后我们再找到<code>android::OpenNativeLibrary</code>的源码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//./system/core/libnativeloader/include/nativeloader/native_loader.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">OpenNativeLibrary</span><span class="params">(JNIEnv* env,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">int32_t</span> target_sdk_version,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">const</span> <span class="keyword">char</span>* path,</span></span></span><br><span class="line"><span class="function"><span class="params">                        jobject class_loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                        jstring library_path)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__ANDROID__)</span></span><br><span class="line">  UNUSED(target_sdk_version);</span><br><span class="line">  <span class="keyword">if</span> (class_loader == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> dlopen(path, RTLD_NOW);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; guard(g_namespaces_mutex);</span><br><span class="line">  <span class="keyword">android_namespace_t</span>* ns = g_namespaces-&gt;FindNamespaceByClassLoader(env, class_loader);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ns == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="comment">// This is the case where the classloader was not created by ApplicationLoaders</span></span><br><span class="line">    <span class="comment">// In this case we create an isolated not-shared namespace for it.</span></span><br><span class="line">    ns = g_namespaces-&gt;Create(env, class_loader, <span class="literal">false</span>, library_path, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span> (ns == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  android_dlextinfo extinfo;</span><br><span class="line">  extinfo.flags = ANDROID_DLEXT_USE_NAMESPACE;</span><br><span class="line">  extinfo.library_namespace = ns;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> android_dlopen_ext(path, RTLD_NOW, &amp;extinfo);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  UNUSED(env, target_sdk_version, class_loader, library_path);</span><br><span class="line">  <span class="keyword">return</span> dlopen(path, RTLD_NOW);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路也很简单，这里就是调用了<code>dlopen</code></p><p>然后后面对应还有<code>dlclose</code> <code>dlsym</code> <code>dlerror</code>等对应 programming interface to dynamic linking loader</p><p>这些函数位于</p><p><code>./bionic/linker/dlfcn.cpp</code></p><p>具体实现位于</p><p><code>./bionic/linker/linker.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//./bionic/linker/linker.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">do_dlopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">int</span> flags, <span class="keyword">const</span> android_dlextinfo* extinfo,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">void</span>* caller_addr)</span> </span>&#123;</span><br><span class="line">  soinfo* <span class="keyword">const</span> caller = find_containing_library(caller_addr);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((flags &amp; ~(RTLD_NOW|RTLD_LAZY|RTLD_LOCAL|RTLD_GLOBAL|RTLD_NODELETE|RTLD_NOLOAD)) != <span class="number">0</span>) &#123;</span><br><span class="line">    DL_ERR(<span class="string">"invalid flags to dlopen: %x"</span>, flags);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">android_namespace_t</span>* ns = get_caller_namespace(caller);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//一些flag的设置和检查</span></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> asan_name_holder;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* translated_name = name;</span><br><span class="line">  <span class="keyword">if</span> (g_is_asan) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_is_in_dir(name, kSystemLibDir)) &#123;</span><br><span class="line">      asan_name_holder = <span class="built_in">std</span>::<span class="built_in">string</span>(kAsanSystemLibDir) + <span class="string">"/"</span> + basename(name);</span><br><span class="line">      <span class="keyword">if</span> (file_exists(asan_name_holder.c_str())) &#123;</span><br><span class="line">        translated_name = asan_name_holder.c_str();</span><br><span class="line">        PRINT(<span class="string">"linker_asan dlopen translating \"%s\" -&gt; \"%s\""</span>, name, translated_name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file_is_in_dir(name, kVendorLibDir)) &#123;</span><br><span class="line">      asan_name_holder = <span class="built_in">std</span>::<span class="built_in">string</span>(kAsanVendorLibDir) + <span class="string">"/"</span> + basename(name);</span><br><span class="line">      <span class="keyword">if</span> (file_exists(asan_name_holder.c_str())) &#123;</span><br><span class="line">        translated_name = asan_name_holder.c_str();</span><br><span class="line">        PRINT(<span class="string">"linker_asan dlopen translating \"%s\" -&gt; \"%s\""</span>, name, translated_name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ProtectedDataGuard guard;</span><br><span class="line">  soinfo* si = find_library(ns, translated_name, flags, extinfo, caller);</span><br><span class="line">  <span class="keyword">if</span> (si != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    si-&gt;call_constructors();</span><br><span class="line">    <span class="keyword">return</span> si-&gt;to_handle();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要关注一个关键的结构体<code>soinfo</code></p><p>这个结构体储存了so在加载后的信息</p><p>其定义在<code>./bionic/linker/linker.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">soinfo</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">typedef</span> LinkedList&lt;soinfo, SoinfoListAllocator&gt; <span class="keyword">soinfo_list_t</span>;</span><br><span class="line">  <span class="keyword">typedef</span> LinkedList&lt;<span class="keyword">android_namespace_t</span>, NamespaceListAllocator&gt; <span class="keyword">android_namespace_list_t</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__work_around_b_24465209__)</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">char</span> old_name_[SOINFO_NAME_LEN];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span>* phdr</span>;</span><br><span class="line">  <span class="keyword">size_t</span> phnum;</span><br><span class="line">  ElfW(Addr) entry;</span><br><span class="line">  ElfW(Addr) base;</span><br><span class="line">  <span class="keyword">size_t</span> size;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__work_around_b_24465209__)</span></span><br><span class="line">  <span class="keyword">uint32_t</span> unused1;  <span class="comment">// DO NOT USE, maintained for compatibility.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  ElfW(Dyn)* dynamic;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__work_around_b_24465209__)</span></span><br><span class="line">  <span class="keyword">uint32_t</span> unused2; <span class="comment">// DO NOT USE, maintained for compatibility</span></span><br><span class="line">  <span class="keyword">uint32_t</span> unused3; <span class="comment">// DO NOT USE, maintained for compatibility</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  soinfo* next;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">uint32_t</span> flags_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* strtab_;</span><br><span class="line">  ElfW(Sym)* symtab_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> nbucket_;</span><br><span class="line">  <span class="keyword">size_t</span> nchain_;</span><br><span class="line">  <span class="keyword">uint32_t</span>* bucket_;</span><br><span class="line">  <span class="keyword">uint32_t</span>* chain_;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__mips__) || !defined(__LP64__)</span></span><br><span class="line">  <span class="comment">// This is only used by mips and mips64, but needs to be here for</span></span><br><span class="line">  <span class="comment">// all 32-bit architectures to preserve binary compatibility.</span></span><br><span class="line">  ElfW(Addr)** plt_got_;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(USE_RELA)</span></span><br><span class="line">  ElfW(Rela)* plt_rela_;</span><br><span class="line">  <span class="keyword">size_t</span> plt_rela_count_;</span><br><span class="line"></span><br><span class="line">  ElfW(Rela)* rela_;</span><br><span class="line">  <span class="keyword">size_t</span> rela_count_;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  ElfW(Rel)* plt_rel_;</span><br><span class="line">  <span class="keyword">size_t</span> plt_rel_count_;</span><br><span class="line"></span><br><span class="line">  ElfW(Rel)* rel_;</span><br><span class="line">  <span class="keyword">size_t</span> rel_count_;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">linker_function_t</span>* preinit_array_;</span><br><span class="line">  <span class="keyword">size_t</span> preinit_array_count_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">linker_function_t</span>* init_array_;</span><br><span class="line">  <span class="keyword">size_t</span> init_array_count_;</span><br><span class="line">  <span class="keyword">linker_function_t</span>* fini_array_;</span><br><span class="line">  <span class="keyword">size_t</span> fini_array_count_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">linker_function_t</span> init_func_;</span><br><span class="line">  <span class="keyword">linker_function_t</span> fini_func_;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__arm__)</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// ARM EABI section used for stack unwinding.</span></span><br><span class="line">  <span class="keyword">uint32_t</span>* ARM_exidx;</span><br><span class="line">  <span class="keyword">size_t</span> ARM_exidx_count;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__mips__)</span></span><br><span class="line">  <span class="keyword">uint32_t</span> mips_symtabno_;</span><br><span class="line">  <span class="keyword">uint32_t</span> mips_local_gotno_;</span><br><span class="line">  <span class="keyword">uint32_t</span> mips_gotsym_;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">mips_relocate_got</span><span class="params">(<span class="keyword">const</span> VersionTracker&amp; version_tracker,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> <span class="keyword">soinfo_list_t</span>&amp; global_group,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> <span class="keyword">soinfo_list_t</span>&amp; local_group)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(__LP64__)</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">mips_check_and_adjust_fp_modes</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">size_t</span> ref_count_;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  link_map link_map_head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> constructors_called;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// When you read a virtual address from the ELF file, add this</span></span><br><span class="line">  <span class="comment">// value to get the corresponding address in the process' address space.</span></span><br><span class="line">  ElfW(Addr) load_bias;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(__LP64__)</span></span><br><span class="line">  <span class="keyword">bool</span> has_text_relocations;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">bool</span> has_DT_SYMBOLIC;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  soinfo(<span class="keyword">android_namespace_t</span>* ns, <span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">const</span> struct stat* file_stat,</span><br><span class="line">         <span class="keyword">off64_t</span> file_offset, <span class="keyword">int</span> rtld_flags);</span><br><span class="line">  ~soinfo();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">call_constructors</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">call_destructors</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">call_pre_init_constructors</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">prelink_image</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">link_image</span><span class="params">(<span class="keyword">const</span> <span class="keyword">soinfo_list_t</span>&amp; global_group, <span class="keyword">const</span> <span class="keyword">soinfo_list_t</span>&amp; local_group,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">const</span> android_dlextinfo* extinfo)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">protect_relro</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_child</span><span class="params">(soinfo* child)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">remove_all_links</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">ino_t</span> get_st_ino() <span class="keyword">const</span>;</span><br><span class="line">  <span class="keyword">dev_t</span> get_st_dev() <span class="keyword">const</span>;</span><br><span class="line">  <span class="keyword">off64_t</span> get_file_offset() <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint32_t</span> get_rtld_flags() <span class="keyword">const</span>;</span><br><span class="line">  <span class="keyword">uint32_t</span> get_dt_flags_1() <span class="keyword">const</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_dt_flags_1</span><span class="params">(<span class="keyword">uint32_t</span> dt_flags_1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">soinfo_list_t</span>&amp; get_children();</span><br><span class="line">  <span class="function"><span class="keyword">const</span> soinfo_list_t&amp; <span class="title">get_children</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">soinfo_list_t</span>&amp; get_parents();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">find_symbol_by_name</span><span class="params">(SymbolName&amp; symbol_name,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> version_info* vi,</span></span></span><br><span class="line">                           const ElfW(Sym)** symbol) const;</span><br><span class="line"></span><br><span class="line">  ElfW(Sym)* find_symbol_by_address(<span class="keyword">const</span> <span class="keyword">void</span>* addr);</span><br><span class="line">  ElfW(Addr) resolve_symbol_address(<span class="keyword">const</span> ElfW(Sym)* s) <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">  const char* get_string(ElfW(Word) index) const;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">can_unload</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_gnu_hash</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="keyword">inline</span> <span class="title">has_min_version</span><span class="params">(<span class="keyword">uint32_t</span> min_version __unused)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__work_around_b_24465209__)</span></span><br><span class="line">    <span class="keyword">return</span> (flags_ &amp; FLAG_NEW_SOINFO) != <span class="number">0</span> &amp;&amp; version_ &gt;= min_version;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_linked</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_linker</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_main_executable</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_linked</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_linker_flag</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_main_executable</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_nodelete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">increment_ref_count</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">size_t</span> decrement_ref_count();</span><br><span class="line"></span><br><span class="line">  <span class="function">soinfo* <span class="title">get_local_group_root</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_soname</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* soname)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">get_soname</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">get_realpath</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Versym)</span>* <span class="title">get_versym</span><span class="params">(<span class="keyword">size_t</span> n)</span> <span class="keyword">const</span></span>;</span><br><span class="line">  ElfW(Addr) get_verneed_ptr() <span class="keyword">const</span>;</span><br><span class="line">  <span class="keyword">size_t</span> get_verneed_cnt() <span class="keyword">const</span>;</span><br><span class="line">  ElfW(Addr) get_verdef_ptr() <span class="keyword">const</span>;</span><br><span class="line">  <span class="keyword">size_t</span> get_verdef_cnt() <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">  bool find_verdef_version_index(const version_info* vi, ElfW(Versym)* versym) const;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint32_t</span> get_target_sdk_version() <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_dt_runpath</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *)</span></span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; get_dt_runpath() <span class="keyword">const</span>;</span><br><span class="line">  <span class="keyword">android_namespace_t</span>* get_primary_namespace();</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_secondary_namespace</span><span class="params">(<span class="keyword">android_namespace_t</span>* secondary_ns)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_mapped_by_caller</span><span class="params">(<span class="keyword">bool</span> reserved_map)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_mapped_by_caller</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uintptr_t</span> get_handle() <span class="keyword">const</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">generate_handle</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span>* <span class="title">to_handle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">elf_lookup</span><span class="params">(SymbolName&amp; symbol_name, <span class="keyword">const</span> version_info* vi, <span class="keyword">uint32_t</span>* symbol_index)</span> <span class="keyword">const</span></span>;</span><br><span class="line">  ElfW(Sym)* elf_addr_lookup(<span class="keyword">const</span> <span class="keyword">void</span>* addr);</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">gnu_lookup</span><span class="params">(SymbolName&amp; symbol_name, <span class="keyword">const</span> version_info* vi, <span class="keyword">uint32_t</span>* symbol_index)</span> <span class="keyword">const</span></span>;</span><br><span class="line">  ElfW(Sym)* gnu_addr_lookup(<span class="keyword">const</span> <span class="keyword">void</span>* addr);</span><br><span class="line"></span><br><span class="line">  bool lookup_version_info(const VersionTracker&amp; version_tracker, ElfW(Word) sym,</span><br><span class="line">                           <span class="keyword">const</span> <span class="keyword">char</span>* sym_name, <span class="keyword">const</span> version_info** vi);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">call_array</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* array_name, <span class="keyword">linker_function_t</span>* functions, <span class="keyword">size_t</span> count, <span class="keyword">bool</span> reverse)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">call_function</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* function_name, <span class="keyword">linker_function_t</span> function)</span></span>;</span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElfRelIteratorT&gt;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">relocate</span><span class="params">(<span class="keyword">const</span> VersionTracker&amp; version_tracker, ElfRelIteratorT&amp;&amp; rel_iterator,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">const</span> <span class="keyword">soinfo_list_t</span>&amp; global_group, <span class="keyword">const</span> <span class="keyword">soinfo_list_t</span>&amp; local_group)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">// This part of the structure is only available</span></span><br><span class="line">  <span class="comment">// when FLAG_NEW_SOINFO is set in this-&gt;flags.</span></span><br><span class="line">  <span class="keyword">uint32_t</span> version_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// version &gt;= 0</span></span><br><span class="line">  <span class="keyword">dev_t</span> st_dev_;</span><br><span class="line">  <span class="keyword">ino_t</span> st_ino_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dependency graph</span></span><br><span class="line">  <span class="keyword">soinfo_list_t</span> children_;</span><br><span class="line">  <span class="keyword">soinfo_list_t</span> parents_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// version &gt;= 1</span></span><br><span class="line">  <span class="keyword">off64_t</span> file_offset_;</span><br><span class="line">  <span class="keyword">uint32_t</span> rtld_flags_;</span><br><span class="line">  <span class="keyword">uint32_t</span> dt_flags_1_;</span><br><span class="line">  <span class="keyword">size_t</span> strtab_size_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// version &gt;= 2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> gnu_nbucket_;</span><br><span class="line">  <span class="keyword">uint32_t</span>* gnu_bucket_;</span><br><span class="line">  <span class="keyword">uint32_t</span>* gnu_chain_;</span><br><span class="line">  <span class="keyword">uint32_t</span> gnu_maskwords_;</span><br><span class="line">  <span class="keyword">uint32_t</span> gnu_shift2_;</span><br><span class="line">  ElfW(Addr)* gnu_bloom_filter_;</span><br><span class="line"></span><br><span class="line">  soinfo* local_group_root_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint8_t</span>* android_relocs_;</span><br><span class="line">  <span class="keyword">size_t</span> android_relocs_size_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* soname_;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> realpath_;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Versym)</span>* versym_</span>;</span><br><span class="line"></span><br><span class="line">  ElfW(Addr) verdef_ptr_;</span><br><span class="line">  <span class="keyword">size_t</span> verdef_cnt_;</span><br><span class="line"></span><br><span class="line">  ElfW(Addr) verneed_ptr_;</span><br><span class="line">  <span class="keyword">size_t</span> verneed_cnt_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint32_t</span> target_sdk_version_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// version &gt;= 3</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; dt_runpath_;</span><br><span class="line">  <span class="keyword">android_namespace_t</span>* primary_namespace_;</span><br><span class="line">  <span class="keyword">android_namespace_list_t</span> secondary_namespaces_;</span><br><span class="line">  <span class="keyword">uintptr_t</span> handle_;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">friend</span> soinfo* <span class="title">get_libdl_info</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>关注一下可以发现，soinfo结构体里包含的只有<code>segment table</code>的信息，并不包含section的信息</p><hr><p>注意发现，其获取soinfo的信息是通过一个叫<code>find_containing_library</code> 的方法，这个是检测so文件是否已经加载到内存中，如果已经加载到内存中，就可以直接return了。</p><p>如果尚未加载到内存中，则会通过<code>find_library</code> 函数获取soinfo信息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./bioni/linker/linker.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> soinfo* <span class="title">find_library</span><span class="params">(<span class="keyword">android_namespace_t</span>* ns,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">int</span> rtld_flags,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">const</span> android_dlextinfo* extinfo,</span></span></span><br><span class="line"><span class="function"><span class="params">                            soinfo* needed_by)</span> </span>&#123;</span><br><span class="line">  soinfo* si;</span><br><span class="line">  <span class="keyword">if</span> (name == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    si = somain;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!find_libraries(ns, needed_by, &amp;name, <span class="number">1</span>, &amp;si, <span class="literal">nullptr</span>, <span class="number">0</span>, rtld_flags,</span><br><span class="line">                             extinfo, <span class="comment">/* add_as_children */</span> <span class="literal">false</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> si;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">find_libraries</span><span class="params">(<span class="keyword">android_namespace_t</span>* ns,</span></span></span><br><span class="line"><span class="function"><span class="params">                           soinfo* start_with,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> library_names[],</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">size_t</span> library_names_count, soinfo* soinfos[],</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;soinfo*&gt;* ld_preloads,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">size_t</span> ld_preloads_count, <span class="keyword">int</span> rtld_flags,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> android_dlextinfo* extinfo,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">bool</span> add_as_children)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Step 0: prepare.</span></span><br><span class="line">  LoadTaskList load_tasks;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">const</span> soinfo*, ElfReader&gt; readers_map;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; library_names_count; ++i) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* name = library_names[i];</span><br><span class="line">    load_tasks.push_back(LoadTask::create(name, start_with, &amp;readers_map));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Construct global_group.</span></span><br><span class="line">  soinfo::<span class="keyword">soinfo_list_t</span> global_group = make_global_group(ns);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If soinfos array is null allocate one on stack.</span></span><br><span class="line">  <span class="comment">// The array is needed in case of failure; for example</span></span><br><span class="line">  <span class="comment">// when library_names[] = &#123;libone.so, libtwo.so&#125; and libone.so</span></span><br><span class="line">  <span class="comment">// is loaded correctly but libtwo.so failed for some reason.</span></span><br><span class="line">  <span class="comment">// In this case libone.so should be unloaded on return.</span></span><br><span class="line">  <span class="comment">// See also implementation of failure_guard below.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (soinfos == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">size_t</span> soinfos_size = <span class="keyword">sizeof</span>(soinfo*)*library_names_count;</span><br><span class="line">    soinfos = <span class="keyword">reinterpret_cast</span>&lt;soinfo**&gt;(alloca(soinfos_size));</span><br><span class="line">    <span class="built_in">memset</span>(soinfos, <span class="number">0</span>, soinfos_size);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// list of libraries to link - see step 2.</span></span><br><span class="line">  <span class="keyword">size_t</span> soinfos_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> scope_guard = make_scope_guard([&amp;]() &#123;</span><br><span class="line">    <span class="keyword">for</span> (LoadTask* t : load_tasks) &#123;</span><br><span class="line">      LoadTask::deleter(t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> failure_guard = make_scope_guard([&amp;]() &#123;</span><br><span class="line">    <span class="comment">// Housekeeping</span></span><br><span class="line">    soinfo_unload(soinfos, soinfos_count);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ZipArchiveCache zip_archive_cache;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step 1: expand the list of load_tasks to include</span></span><br><span class="line">  <span class="comment">// all DT_NEEDED libraries (do not load them just yet)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i&lt;load_tasks.size(); ++i) &#123;</span><br><span class="line">    LoadTask* task = load_tasks[i];</span><br><span class="line">    soinfo* needed_by = task-&gt;get_needed_by();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> is_dt_needed = needed_by != <span class="literal">nullptr</span> &amp;&amp; (needed_by != start_with || add_as_children);</span><br><span class="line">    task-&gt;set_extinfo(is_dt_needed ? <span class="literal">nullptr</span> : extinfo);</span><br><span class="line">    task-&gt;set_dt_needed(is_dt_needed);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!find_library_internal(ns, task, &amp;zip_archive_cache, &amp;load_tasks, rtld_flags)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    soinfo* si = task-&gt;get_soinfo();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_dt_needed) &#123;</span><br><span class="line">      needed_by-&gt;add_child(si);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (si-&gt;is_linked()) &#123;</span><br><span class="line">      si-&gt;increment_ref_count();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// When ld_preloads is not null, the first</span></span><br><span class="line">    <span class="comment">// ld_preloads_count libs are in fact ld_preloads.</span></span><br><span class="line">    <span class="keyword">if</span> (ld_preloads != <span class="literal">nullptr</span> &amp;&amp; soinfos_count &lt; ld_preloads_count) &#123;</span><br><span class="line">      ld_preloads-&gt;push_back(si);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (soinfos_count &lt; library_names_count) &#123;</span><br><span class="line">      soinfos[soinfos_count++] = si;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step 2: Load libraries in random order (see b/24047022)</span></span><br><span class="line">  LoadTaskList load_list;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; task : load_tasks) &#123;</span><br><span class="line">    soinfo* si = task-&gt;get_soinfo();</span><br><span class="line">    <span class="keyword">auto</span> pred = [&amp;](<span class="keyword">const</span> LoadTask* t) &#123;</span><br><span class="line">      <span class="keyword">return</span> t-&gt;get_soinfo() == si;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!si-&gt;is_linked() &amp;&amp;</span><br><span class="line">        <span class="built_in">std</span>::find_if(load_list.begin(), load_list.end(), pred) == load_list.end() ) &#123;</span><br><span class="line">      load_list.push_back(task);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  shuffle(&amp;load_list);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; task : load_list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!task-&gt;load()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step 3: pre-link all DT_NEEDED libraries in breadth first order.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; task : load_tasks) &#123;</span><br><span class="line">    soinfo* si = task-&gt;get_soinfo();</span><br><span class="line">    <span class="keyword">if</span> (!si-&gt;is_linked() &amp;&amp; !si-&gt;prelink_image()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step 4: Add LD_PRELOADed libraries to the global group for</span></span><br><span class="line">  <span class="comment">// future runs. There is no need to explicitly add them to</span></span><br><span class="line">  <span class="comment">// the global group for this run because they are going to</span></span><br><span class="line">  <span class="comment">// appear in the local group in the correct order.</span></span><br><span class="line">  <span class="keyword">if</span> (ld_preloads != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; si : *ld_preloads) &#123;</span><br><span class="line">      si-&gt;set_dt_flags_1(si-&gt;get_dt_flags_1() | DF_1_GLOBAL);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step 5: link libraries.</span></span><br><span class="line">  soinfo::<span class="keyword">soinfo_list_t</span> local_group;</span><br><span class="line">  walk_dependencies_tree(</span><br><span class="line">      (start_with != <span class="literal">nullptr</span> &amp;&amp; add_as_children) ? &amp;start_with : soinfos,</span><br><span class="line">      (start_with != <span class="literal">nullptr</span> &amp;&amp; add_as_children) ? <span class="number">1</span> : soinfos_count,</span><br><span class="line">      [&amp;] (soinfo* si) &#123;</span><br><span class="line">    local_group.push_back(si);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We need to increment ref_count in case</span></span><br><span class="line">  <span class="comment">// the root of the local group was not linked.</span></span><br><span class="line">  <span class="keyword">bool</span> was_local_group_root_linked = local_group.front()-&gt;is_linked();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> linked = local_group.visit([&amp;](soinfo* si) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!si-&gt;is_linked()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!si-&gt;link_image(global_group, local_group, extinfo)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (linked) &#123;</span><br><span class="line">    local_group.for_each([](soinfo* si) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!si-&gt;is_linked()) &#123;</span><br><span class="line">        si-&gt;set_linked();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    failure_guard.disable();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!was_local_group_root_linked) &#123;</span><br><span class="line">    local_group.front()-&gt;increment_ref_count();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> linked;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到，27行有一个<code>ELFReader</code> ，找到他的定义处</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./bionic/linker/linker_phdr.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElfReader</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  ElfReader();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">Read</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">int</span> fd, <span class="keyword">off64_t</span> file_offset, <span class="keyword">off64_t</span> file_size)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">Load</span><span class="params">(<span class="keyword">const</span> android_dlextinfo* extinfo)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">name</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> name_.c_str(); &#125;</span><br><span class="line">  <span class="keyword">size_t</span> phdr_count() <span class="keyword">const</span> &#123; <span class="keyword">return</span> phdr_num_; &#125;</span><br><span class="line">  ElfW(Addr) load_start() <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;ElfW(Addr)&gt;(load_start_); &#125;</span><br><span class="line">  <span class="keyword">size_t</span> load_size() <span class="keyword">const</span> &#123; <span class="keyword">return</span> load_size_; &#125;</span><br><span class="line">  ElfW(Addr) load_bias() <span class="keyword">const</span> &#123; <span class="keyword">return</span> load_bias_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span>* <span class="title">loaded_phdr</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> loaded_phdr_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Dyn)</span>* <span class="title">dynamic</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> dynamic_; &#125;</span><br><span class="line">  const char* get_string(ElfW(Word) index) const;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_mapped_by_caller</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> mapped_by_caller_; &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">ReadElfHeader</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">VerifyElfHeader</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">ReadProgramHeaders</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">ReadSectionHeaders</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">ReadDynamicSection</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">ReserveAddressSpace</span><span class="params">(<span class="keyword">const</span> android_dlextinfo* extinfo)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">LoadSegments</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">FindPhdr</span><span class="params">()</span></span>;</span><br><span class="line">  bool CheckPhdr(ElfW(Addr));</span><br><span class="line">  bool CheckFileRange(ElfW(Addr) offset, size_t size, size_t alignment);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> did_read_;</span><br><span class="line">  <span class="keyword">bool</span> did_load_;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> name_;</span><br><span class="line">  <span class="keyword">int</span> fd_;</span><br><span class="line">  <span class="keyword">off64_t</span> file_offset_;</span><br><span class="line">  <span class="keyword">off64_t</span> file_size_;</span><br><span class="line"></span><br><span class="line">  ElfW(Ehdr) header_;</span><br><span class="line">  <span class="keyword">size_t</span> phdr_num_;</span><br><span class="line"></span><br><span class="line">  MappedFileFragment phdr_fragment_;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span>* phdr_table_</span>;</span><br><span class="line"></span><br><span class="line">  MappedFileFragment shdr_fragment_;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Shdr)</span>* shdr_table_</span>;</span><br><span class="line">  <span class="keyword">size_t</span> shdr_num_;</span><br><span class="line"></span><br><span class="line">  MappedFileFragment dynamic_fragment_;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Dyn)</span>* dynamic_</span>;</span><br><span class="line"></span><br><span class="line">  MappedFileFragment strtab_fragment_;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* strtab_;</span><br><span class="line">  <span class="keyword">size_t</span> strtab_size_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// First page of reserved address space.</span></span><br><span class="line">  <span class="keyword">void</span>* load_start_;</span><br><span class="line">  <span class="comment">// Size in bytes of reserved address space.</span></span><br><span class="line">  <span class="keyword">size_t</span> load_size_;</span><br><span class="line">  <span class="comment">// Load bias.</span></span><br><span class="line">  ElfW(Addr) load_bias_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Loaded phdr.</span></span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span>* loaded_phdr_</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Is map owned by the caller</span></span><br><span class="line">  <span class="keyword">bool</span> mapped_by_caller_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从其private的方法就能看出，有一系列读取ELF信息的操作。</p><p>这里要说明一下，这里显然有<code>ReadSectionHeaders()</code> 和 <code>ReadDynamicSection()</code> 两个函数，这在4.x的安卓源码中是没有的，别的没看过，并不清楚。</p><p>在ELFReader中也对应多了一个<code>Read</code>的函数，这是用来读取一个ELF的信息，但是真正运行的时候只需要其加载到内存中，也即是<code>Load</code> 函数。而<code>Load</code>函数中则只需要segment的信息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> ElfReader::Read(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">int</span> fd, <span class="keyword">off64_t</span> file_offset, <span class="keyword">off64_t</span> file_size) &#123;</span><br><span class="line">  CHECK(!did_read_);</span><br><span class="line">  CHECK(!did_load_);</span><br><span class="line">  name_ = name;</span><br><span class="line">  fd_ = fd;</span><br><span class="line">  file_offset_ = file_offset;</span><br><span class="line">  file_size_ = file_size;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ReadElfHeader() &amp;&amp;</span><br><span class="line">      VerifyElfHeader() &amp;&amp;</span><br><span class="line">      ReadProgramHeaders() &amp;&amp;</span><br><span class="line">      ReadSectionHeaders() &amp;&amp;</span><br><span class="line">      ReadDynamicSection()) &#123;</span><br><span class="line">    did_read_ = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> did_read_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ElfReader::Load(<span class="keyword">const</span> android_dlextinfo* extinfo) &#123;</span><br><span class="line">  CHECK(did_read_);</span><br><span class="line">  CHECK(!did_load_);</span><br><span class="line">  <span class="keyword">if</span> (ReserveAddressSpace(extinfo) &amp;&amp;</span><br><span class="line">      LoadSegments() &amp;&amp;</span><br><span class="line">      FindPhdr()) &#123;</span><br><span class="line">    did_load_ = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> did_load_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说，在Android运行时，对于一个so，只需要用到它的segment信息，由此可以对section部分进行删除，而ida等工具静态分析都是通过section的信息进行分析的，所以由此可以有效地防止so被静态分析逆向。</p><hr><p>注意到下面还有调用<code>si-&gt;call_constructors()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> soinfo::call_constructors() &#123;</span><br><span class="line">  <span class="keyword">if</span> (constructors_called) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We set constructors_called before actually calling the constructors, otherwise it doesn't</span></span><br><span class="line">  <span class="comment">// protect against recursive constructor calls. One simple example of constructor recursion</span></span><br><span class="line">  <span class="comment">// is the libc debug malloc, which is implemented in libc_malloc_debug_leak.so:</span></span><br><span class="line">  <span class="comment">// 1. The program depends on libc, so libc's constructor is called here.</span></span><br><span class="line">  <span class="comment">// 2. The libc constructor calls dlopen() to load libc_malloc_debug_leak.so.</span></span><br><span class="line">  <span class="comment">// 3. dlopen() calls the constructors on the newly created</span></span><br><span class="line">  <span class="comment">//    soinfo for libc_malloc_debug_leak.so.</span></span><br><span class="line">  <span class="comment">// 4. The debug .so depends on libc, so CallConstructors is</span></span><br><span class="line">  <span class="comment">//    called again with the libc soinfo. If it doesn't trigger the early-</span></span><br><span class="line">  <span class="comment">//    out above, the libc constructor will be called again (recursively!).</span></span><br><span class="line">  constructors_called = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!is_main_executable() &amp;&amp; preinit_array_ != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="comment">// The GNU dynamic linker silently ignores these, but we warn the developer.</span></span><br><span class="line">    PRINT(<span class="string">"\"%s\": ignoring DT_PREINIT_ARRAY in shared library!"</span>, get_realpath());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get_children().for_each([] (soinfo* si) &#123;</span><br><span class="line">    si-&gt;call_constructors();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  TRACE(<span class="string">"\"%s\": calling constructors"</span>, get_realpath());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// DT_INIT should be called before DT_INIT_ARRAY if both are present.</span></span><br><span class="line">  call_function(<span class="string">"DT_INIT"</span>, init_func_);</span><br><span class="line">  call_array(<span class="string">"DT_INIT_ARRAY"</span>, init_array_, init_array_count_, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数通过执行<code>.init(_array)</code>定义的内容，从而完成so的初始化</p><hr><p><code>dlopen</code>的内容就不继续探究了，这里主要是有关Linux动态链接库方面的内容了。</p><p>总结一下</p><p>Android对so的加载</p><ol><li>通过<code>System.loadLibrary</code> 传递so的路径、classLoader等信息，然后进入native代码</li><li>进入native代码后，通过调用<code>android::OpenNativeLibrary</code> 函数，跳转到dlopen，加载so到内存</li><li>在dlopen中，会通过执行<code>.init(array)</code> 的内容进行so的一些动态链接信息初始化</li><li><code>android::OpenNativeLibrary</code> 执行完后，会调用so中<code>JNI_Onload</code>函数，从而完成native函数的注册</li></ol><hr><h6 id="Android-7-1-1的代码相比4-x的源码复杂了好多……"><a href="#Android-7-1-1的代码相比4-x的源码复杂了好多……" class="headerlink" title="Android 7.1.1的代码相比4.x的源码复杂了好多……"></a>Android 7.1.1的代码相比4.x的源码复杂了好多……</h6>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在目前许多的Android应用加固中，都用到了so文件，并且通过针对so文件的section table进行混淆处理，以避免ida等逆向工具进行静态分析，因为在Android源码中，so的加载是完全不需要section信息的。&lt;/p&gt;
&lt;p&gt;在此之前，很多文章都已经写到过关于Android so加载的流程，但很多都是基于Android4.x系统&lt;/p&gt;
&lt;p&gt;虽然流程大同小异，但在Android5.0以后已经从Dalvik转换成ART，文件关系上已经对不上&lt;/p&gt;
&lt;p&gt;因此，我针对Android7.1.2_r28的代码，对so加载过程进行分析&lt;/p&gt;
&lt;h1 id=&quot;so加载&quot;&gt;&lt;a href=&quot;#so加载&quot; class=&quot;headerlink&quot; title=&quot;so加载&quot;&gt;&lt;/a&gt;so加载&lt;/h1&gt;&lt;p&gt;在加载一个so的时候，必然要写一句&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;System.loadLibrary(&lt;span class=&quot;string&quot;&gt;&quot;native-lib&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么，我们就从这个函数看起&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://blog.2bsitcker.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://blog.2bsitcker.cn/tags/Android/"/>
    
      <category term="so加载" scheme="http://blog.2bsitcker.cn/tags/so%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>记录一个Windows下Makefile的神坑</title>
    <link href="http://blog.2bsitcker.cn/2017/11/12/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AAWindows%E4%B8%8BMakefile%E7%9A%84%E7%A5%9E%E5%9D%91/"/>
    <id>http://blog.2bsitcker.cn/2017/11/12/记录一个Windows下Makefile的神坑/</id>
    <published>2017-11-12T08:31:02.000Z</published>
    <updated>2017-11-22T03:36:38.000Z</updated>
    
    <content type="html"><![CDATA[<p> 之前在写一个cpp的项目，不想用一些比较臃肿的IDE，所以就直接vscode+Makefile了</p><p>然后，因为是在windows下开发，遇到了一些神坑了。。</p><hr><p>首先是make clean （别问我为什么不用cmake，是懒得配置</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">clean:</span></span><br><span class="line">rm <span class="variable">$(TARGET)</span> <span class="variable">$(OBJS)</span></span><br></pre></td></tr></table></figure><p>很正常的代码，但是就是运行崩了</p><p>并不是因为rm的原因，因为这是运行在powershell下的结果</p><p>首先，它报出了这样的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">process_begin: CreateProcess(NULL, rm sb.exe src/main.o src/ELFReader.o, ...) failed.</span><br><span class="line">make (e=2): 系统找不到指定的文件。</span><br><span class="line">Makefile:23: recipe for target &apos;clean&apos; failed</span><br><span class="line">make: *** [clean] Error 2</span><br></pre></td></tr></table></figure><p>似乎是找不到命令的原因。</p><p>后来我发现在powershell底下，rm后面的文件与文件之间必须要是逗号分隔……</p><p>修改后，还是爆出一样的错误，经过一系列的搜索并没有搜出个什么来</p><p>后来经朋友提醒……加个引号试试</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">clean:</span></span><br><span class="line"><span class="string">"rm <span class="variable">$(TARGET)</span> <span class="variable">$(OBJS)</span>"</span></span><br></pre></td></tr></table></figure><p>很有道理，那么CreateProcess第二个就像一个参数了</p><p>果然，不一样的报错了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;rm sb.exe src/main.o src/ELFReader.o&quot;</span><br><span class="line">/usr/bin/bash: rm sb.exe src/main.o src/ELFReader.o: No such file or directory</span><br><span class="line">Makefile:30: recipe for target &apos;clean&apos; failed</span><br><span class="line">make: *** [clean] Error 127</span><br></pre></td></tr></table></figure><p>好的，你告诉我为什么在Windows下会调用的是bash（万脸问号）？？？</p><p>结合起来搜索，似乎说这是因为git bash的原因 ´_&gt;`</p><p>不过，我并不打算管了，Windows下开发不用ide坑太多了</p><p>果断转移到Linux底下去</p><hr><p>另外就是，MinGW在window下的依赖问题</p><p>如果是mingw-w64，则能很好的进行64位程序的编译，但是，当我加上-m32</p><p>正常的默认设置是不支持编译32位程序的，但SJLJ的是支持的</p><p>重新安装过后，-m32能正常编译了，但是程序运行会爆出</p><p><code>应用程序无法正常启动0xc000007b</code>的错误，似乎也是一些依赖问题</p><p>但暂时不打算解决了，要想编译32位的程序，大可另外下个w32版本的mingw</p><p>Windows实在……太坑了´_&gt;`</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 之前在写一个cpp的项目，不想用一些比较臃肿的IDE，所以就直接vscode+Makefile了&lt;/p&gt;
&lt;p&gt;然后，因为是在windows下开发，遇到了一些神坑了。。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;首先是make clean （别问我为什么不用cmake，是懒得配置&lt;/p&gt;

      
    
    </summary>
    
      <category term="Study_Note" scheme="http://blog.2bsitcker.cn/categories/Study-Note/"/>
    
    
      <category term="Makefile" scheme="http://blog.2bsitcker.cn/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr_思路</title>
    <link href="http://blog.2bsitcker.cn/2017/10/25/pwnable-kr-%E6%80%9D%E8%B7%AF/"/>
    <id>http://blog.2bsitcker.cn/2017/10/25/pwnable-kr-思路/</id>
    <published>2017-10-25T07:34:59.000Z</published>
    <updated>2019-01-29T10:18:48.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>学二进制、pwn，pwnable.kr是一个必须要刷的网站，所以开一篇文章专门记录自己的刷题历程</p><p>其实网上很多都有，但我这里主要记录各题的思路，不写详细的解法，也主要用于自己的归纳总结，do it yourself，才能学到更多</p><p>对我所说的思路有不了解或有不同的看法的，欢迎email我 <a href="mailto:lin.giglf@gmail.com" target="_blank" rel="noopener">lin.giglf@gmail.com</a> 一起讨论</p><p>不定期更新</p><a id="more"></a><hr><h2 id="Toddler’s-Bottle"><a href="#Toddler’s-Bottle" class="headerlink" title="Toddler’s Bottle"></a>Toddler’s Bottle</h2><p>这个章节做完有点久了。。然后才来补思路，如果有什么错误欢迎联系我 ↑</p><h4 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h4><p>知道linux 下<code>stdin=0</code> <code>stdout=1</code> <code>stderr=2</code></p><h4 id="collision"><a href="#collision" class="headerlink" title="collision"></a>collision</h4><p>学会怎么用python构造非ascii字符的输入</p><h4 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h4><p>一个简单的溢出，覆盖相邻变量的值</p><h4 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h4><p>这其实是一道逆向题。。直接逆就好</p><h4 id="passcode"><a href="#passcode" class="headerlink" title="passcode"></a>passcode</h4><p>scanf没有加取地址符，debug发现能控制passcode1的值，然后可以通过覆写plt达到目的</p><h4 id="random"><a href="#random" class="headerlink" title="random"></a>random</h4><p>随机数种子固定，每次生成随机数一样</p><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><p>这题挺有意思的，写程序执行实现每个阶段的要求，需要了解一些socket相关的知识还有Linux软连接，很有趣！</p><h4 id="leg"><a href="#leg" class="headerlink" title="leg"></a>leg</h4><p>考察arm汇编的阅读，要知道一点，pc的值为当前地址+8</p><h4 id="mistake"><a href="#mistake" class="headerlink" title="mistake"></a>mistake</h4><p>打开password给fd赋值时没有用括号，优先级问题从读文件变成了stdin</p><h4 id="shellshock"><a href="#shellshock" class="headerlink" title="shellshock"></a>shellshock</h4><p>给了一个特定版本的bash，这是一个cve，（CVE-2014-6271），bash是不会继承定义的函数，但是会继承定义的环境变量。而在该版本及以下的bash当中，对环境变量函数的解析在函数定义完毕后并不会停止。便导致了这个漏洞。</p><h4 id="coin1"><a href="#coin1" class="headerlink" title="coin1"></a>coin1</h4><p>通过二分法找出那枚硬币，关键其实是怎么编写与服务器通信的脚本。It’s a good way to learn pwntools.</p><h4 id="blackjack"><a href="#blackjack" class="headerlink" title="blackjack"></a>blackjack</h4><p>阅读代码，发现输入bet money时能溢出，You just need to win one time.</p><h4 id="lotto"><a href="#lotto" class="headerlink" title="lotto"></a>lotto</h4><p>看检测代码部分，双层循环，则只要其中一位能在random中找到就行了</p><h4 id="cmd1"><a href="#cmd1" class="headerlink" title="cmd1"></a>cmd1</h4><p>程序过滤了sh, tmp, flag</p><p>于是/bin/cat fla* ,可以用通配符来解决过滤的flag</p><h4 id="cmd2"><a href="#cmd2" class="headerlink" title="cmd2"></a>cmd2</h4><p>过滤了<code>/</code> ，还删除了对应的环境变量，无法直接cat了，flag依旧可以通过通配符解决。</p><p>网上搜wp看到了很多种思路</p><ol><li>cd 到根目录，通过$(pwd)构造<code>/</code>的</li><li>把命令编码成八进制，通过echo解决的</li></ol><h4 id="uaf"><a href="#uaf" class="headerlink" title="uaf"></a>uaf</h4><p>use after free。在调用的时候，没有检测是否对象已经free，free了后的内存可以任意写，此时写入getshell的地址，则再次调用时就会调用到getshell的函数。</p><h4 id="codemap"><a href="#codemap" class="headerlink" title="codemap"></a>codemap</h4><p>让学习的是ida的IDC脚本编写，当然可以选择使用python，已经提示了注意某个地址寄存器的值，只要在循环每次读入寄存器的值，找出符合的那几个数即可。</p><h4 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h4><p>这题关键是要让程序跑通，主要就是那段内嵌汇编要正常运作不能崩。</p><p>内嵌汇编中，movntps是对xmm进行操作的，xmm是128bits寄存器，16字节，则要求空间要16字节对齐。每次输入满足对齐规则的空间大小。</p><h4 id="asm"><a href="#asm" class="headerlink" title="asm"></a>asm</h4><p>考shellcode的编写，嗯，pwntools的确是个好东西</p><h4 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h4><p>链表中，在unlink一个单位时，很容易出问题</p><p>例如，有一链表 <code>A &lt;-&gt; B &lt;-&gt; C</code></p><p>unlink(B)时，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bk = B-&gt;bk;</span><br><span class="line">fd = B-&gt;fd;</span><br><span class="line">fd-&gt;bk = bk;</span><br><span class="line">bk-&gt;fd = fd;</span><br></pre></td></tr></table></figure><p>如果把B-&gt;bk、B-&gt;fd改写了，则可以改写任意地址的内容。</p><p>例如，假设bk指针在结构体第8字节，改写<code>fd = B-&gt;fd = address-8</code> </p><p>则<code>fd-&gt;bk = address-8+8 = bk = B-&gt;bk</code></p><p>可以把address地址改写，即可以改写任意地址的内容 </p><h4 id="blukat"><a href="#blukat" class="headerlink" title="blukat"></a>blukat</h4><p>password是没有权限去读的，但是在运行的blukat有读的权限并且我们可以运行blukat，在调试中直接就可以看到读到buf中的password内容，而且这个password内容还伪装了一把permission denied。。</p><h4 id="horcruxes"><a href="#horcruxes" class="headerlink" title="horcruxes"></a>horcruxes</h4><p>说明需要rop，很容易找到溢出点，并且没开canary，第一想法是溢出gets直接跳到open flag那里就可以得到flag了。但是试了好一会都没成功，后来才发现在ropme的函数里地址都包含0x0A，即<code>\n</code> ，gets是会截断的。因此只能反复跳到ABCDEFG并计算出sum值最后再call ropme去满足条件获取flag </p><h2 id="Rookiss"><a href="#Rookiss" class="headerlink" title="Rookiss"></a>Rookiss</h2><h4 id="brain-fuck"><a href="#brain-fuck" class="headerlink" title="brain fuck"></a>brain fuck</h4><p>这题属于GOT表替换，brainfuck的指令能随意移动指针，可以移动到GOT表做函数替换</p><h4 id="md5-calculator"><a href="#md5-calculator" class="headerlink" title="md5 calculator"></a>md5 calculator</h4><p>这题的关键点，找到溢出点，base64编码跟原码长度为4:3，存在溢出</p><p>但开了Canary保护，能看到在开头验证码生成时用了对应的cookie，所以可以通过验证码反推出cookie，绕过Canary保护</p><h4 id="simple-login"><a href="#simple-login" class="headerlink" title="simple login"></a>simple login</h4><p>溢出限制了长度，只能溢出到ebp，ret处理不了，但这里在auth函数的ret后，紧接着是main函数的ret，理清思路后可以利用</p><h4 id="otp"><a href="#otp" class="headerlink" title="otp"></a>otp</h4><p>这个题。。。没接触过根本想不到，<code>ulimite -f 0</code>限制文件大小，使得密码为0</p><h4 id="ascii-easy"><a href="#ascii-easy" class="headerlink" title="ascii_easy"></a>ascii_easy</h4><p>这题是我花时间最长的一题了，上网搜了wp，然后发现题目改过，虽然思路差不多，就是构造ascii的shellcode，但一直也没成功。后来github搜到一个解法，发现是函数调用问题，对于系统调用的跟通常的函数调用有点不一样。</p><p>例如call execve，可以参考 <a href="http://shell-storm.org/blog/Return-Oriented-Programming-and-ROPgadget-tool/" target="_blank" rel="noopener">http://shell-storm.org/blog/Return-Oriented-Programming-and-ROPgadget-tool/</a> </p><p>然后就是，想方设法构造在ascii范围内的shellcode，并且可以通过环境变量的方式做一个/bin/sh的别名链接，使得我们不需要构造出/bin/sh的地址。但实际想要构造也能成功，通过地址的变换，再找几个rop_chain实现</p><h4 id="tiny-easy"><a href="#tiny-easy" class="headerlink" title="tiny_easy"></a>tiny_easy</h4><p>一个只包含几条指令的binary，简单调试可得，最后call的是argv[0]，并且栈可执行，但是有aslr</p><p>通常，直接启动执行argv[0]是程序执行路径。那么这里有个知识点，可以通过execl进行启动，l参数启动的时候argv[0]是可以自定义的，于是我们可以通过argv往栈上写shellcode，但是call的地址不确定，我们可以通过栈喷的方式，在shellcode前填充大量的slide code（例如nop），于是便可以跑到shellcode上getshell。</p><p><strong>技巧：</strong>调试通过exec系列启动的程序，gdb中<code>set follow-fork-mode child</code>可令调试程序执行跟进到子进程，<code>catch exec</code>可以挂接gdb到通过exec启动的程序上，在该程序上下断点。</p><h4 id="fsb"><a href="#fsb" class="headerlink" title="fsb"></a>fsb</h4><p>简单分析即可知道存在format string (格式化字符串)漏洞</p><p>emmm printf不仅可以用来泄漏地址，还可以用来写入地址，printf包含一个%n的占位符，这个参数的作用是</p><blockquote><p>不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</p></blockquote><p>于是可以通过这个这个方式向栈上写入地址，而因为key的地址是可以获得的（通过printf泄漏或者直接获取都可以，因为key位于.bss段 并且程序没开启aslr），便可以向栈上写入key的地址</p><p>接下来便可以用同样方法覆写key的地址或者直接泄漏key的值了</p><h4 id="dragon"><a href="#dragon" class="headerlink" title="dragon"></a>dragon</h4><p>RPG游戏，试验了一下怎么都不可能正常的打败dragon的，但是我们发现dragon每一轮都会给自己加血，并且dragon的HP储存是个char，那么就恰好存在一个溢出，溢出到负数便可以触发打败dragon</p><p>那么怎么利用？dragon被打败后会free掉，同时malloc一个同样大小的buf，而后面居然还调用free掉的dragon里的函数，这就是一个UAF，复写dragon中的func到system(“/bin/sh”)就OK了</p><h4 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h4><p>linux kernel pwn，实现了一个kernel module，而这个kernel module包含一个bug，任意地址写。</p><p>因为在kernel对任意地址写可以达到进行任意的系统调用，例如通过<code>commit_creds(prepare_kernel_cred(0))</code>进行提权。通过 cat /proc/kallsyms便可以查看两个系统调用的符号地址。</p><p>最后有一个需要绕过的点，kernel module实现的系统调用会对小写字符大写，而符号地址当中便包含一个0x6c，我用了别人wp的一个方法，向该地址前面的内存填充nop指令，然后跳转到0x60之前的地址，从而绕过该限制。另外也有师傅通过汇编实现了真正的全地址任意写，看了一下网上的wp，简直就是各显神通。</p><p>最后提权后直接cat /root/flag就OK了</p><h4 id="Crypto1"><a href="#Crypto1" class="headerlink" title="Crypto1"></a>Crypto1</h4><p>密码学题目，关于AES128CBC的使用漏洞，题目会给出由个人提供输入AES128_CBC加密结果，key、IV不知</p><p>因为在CBC模式下，16byte的分组有，当前n <em> 16 byte的信息前缀相同时，加密出来的前n </em> 16也是相等的</p><p>这个设计到分组密码与CBC模式的弱点</p><p>因此当有段不明信息<code>secretmessage</code>，可以通过比较</p><p>AES128Encode(<code>---------------s</code>)</p><p>AES128Encode(<code>---------------*</code>)</p><p>构造最后一位*，进行爆破比对，从而得出最终明文</p><h4 id="echo1"><a href="#echo1" class="headerlink" title="echo1"></a>echo1</h4><p>超大的栈溢出，什么保护都没有，直接往栈上写shellcode然后再通过bss作为跳板jmp rsp就可以getshell</p><p>要注意一点就是pwntools写shellcode时，<code>shellcraft.sh</code>是32位的<code>shellcraft.amd64.sh</code>是64位的</p><h2 id="Grotesque"><a href="#Grotesque" class="headerlink" title="Grotesque"></a>Grotesque</h2><h2 id="Hacker’s-Secret"><a href="#Hacker’s-Secret" class="headerlink" title="Hacker’s Secret"></a>Hacker’s Secret</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;学二进制、pwn，pwnable.kr是一个必须要刷的网站，所以开一篇文章专门记录自己的刷题历程&lt;/p&gt;
&lt;p&gt;其实网上很多都有，但我这里主要记录各题的思路，不写详细的解法，也主要用于自己的归纳总结，do it yourself，才能学到更多&lt;/p&gt;
&lt;p&gt;对我所说的思路有不了解或有不同的看法的，欢迎email我 &lt;a href=&quot;mailto:lin.giglf@gmail.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lin.giglf@gmail.com&lt;/a&gt; 一起讨论&lt;/p&gt;
&lt;p&gt;不定期更新&lt;/p&gt;
    
    </summary>
    
      <category term="WriteUp" scheme="http://blog.2bsitcker.cn/categories/WriteUp/"/>
    
    
      <category term="pwnable.kr" scheme="http://blog.2bsitcker.cn/tags/pwnable-kr/"/>
    
      <category term="pwn" scheme="http://blog.2bsitcker.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Blog update!</title>
    <link href="http://blog.2bsitcker.cn/2017/10/09/Blog-update/"/>
    <id>http://blog.2bsitcker.cn/2017/10/09/Blog-update/</id>
    <published>2017-10-09T09:48:30.000Z</published>
    <updated>2017-10-13T09:46:20.000Z</updated>
    
    <content type="html"><![CDATA[<p> 终于颓颓颓颓了很长一段时间，开始修我的blog</p><p>这里说一下我blog的更新的地方吧</p><hr><p>博客依然由hexo+freemind主题建成</p><ol><li><p>图床修复：采用<code>hexo-asset-image</code>插件，图片直接同步到repo中，在pages上直接引用</p></li><li><p>留言系统修复：多说关闭了，只能换一个，disqus以前用过，但是登陆方式有限制，对国内用户不太友好，后来找到一个叫livere(来必力)的，看着还挺好用，就换成这个了。</p></li><li><p>从前博客挂在github pages上，用的<a href="http://gifish.tk" target="_blank" rel="noopener">http://gifish.tk</a> 的域名。但由于github禁了百度的爬虫，导致百度会搜不到，现在同步挂到了github pages和coding.net pages上，让百度可以搜到博客的内容，不过试了下，似乎刚配置好百度的爬虫还没更新。然后更新域名为<a href="http://blog.2bsticker.cn" target="_blank" rel="noopener">http://blog.2bsticker.cn</a> ，国外线路解析到github，国内线路解析到coding.net，试了试github page不能设置多个CNAME记录，于是吧gifish.tk url重定向到了github page上。</p><p>综上，目前你可以通过以下链接访问我的博客</p><ul><li><a href="http://gifish.tk" target="_blank" rel="noopener">http://gifish.tk</a></li><li><a href="http://blog.2bsticker.cn" target="_blank" rel="noopener">http://blog.2bsticker.cn</a></li><li><a href="http://giglf.github.io" target="_blank" rel="noopener">http://giglf.github.io</a></li><li><a href="http://gifish.coding.me" target="_blank" rel="noopener">http://gifish.coding.me</a></li></ul><p>以后想注册个个人长期使用的域名，日后再更新。</p></li><li><p>添加<code>hexo-wordcount</code>插件，修改侧边栏的样式，每篇文章可显示字数和预计阅读时间。</p></li><li><p>添加小蒜子阅读数量统计，显示于侧边栏。</p></li><li><p>添加rss订阅链接。</p></li><li><p>freemind的样式更改为readable-inverse</p></li><li><p>更新About Me面页</p></li><li><p>更新了freemind的字体包，添加了google analyse和baidu统计，这个主要用于自己查看数据用的。</p></li></ol><hr><p>依然存在问题</p><ol><li>hexo-math插件出问题，怎么配置都没成功，数学公式不能正常显示（还好博客还没有很多公式）</li><li>https配置未成功，配置自定义域名后，coding.net和github都要识别域名的所有权才能给站点开启https，其中coding.net用的是Let’s Encrpty的认证，尝试了很多种，尚未配置成功。</li></ol><hr><p>资料参考</p><p><a href="http://masikkk.com/tags/Hexo/" target="_blank" rel="noopener">http://masikkk.com/tags/Hexo/</a></p><h6 id="有些文章感觉挺没意思的，不过写了就不删了，以后看心情再写些有意义点的文章23333"><a href="#有些文章感觉挺没意思的，不过写了就不删了，以后看心情再写些有意义点的文章23333" class="headerlink" title="有些文章感觉挺没意思的，不过写了就不删了，以后看心情再写些有意义点的文章23333"></a>有些文章感觉挺没意思的，不过写了就不删了，以后看心情再写些有意义点的文章23333</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 终于颓颓颓颓了很长一段时间，开始修我的blog&lt;/p&gt;
&lt;p&gt;这里说一下我blog的更新的地方吧&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;博客依然由hexo+freemind主题建成&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;图床修复：采用&lt;code&gt;hexo-asset-image&lt;/code&gt;
      
    
    </summary>
    
      <category term="感想or发疯" scheme="http://blog.2bsitcker.cn/categories/%E6%84%9F%E6%83%B3or%E5%8F%91%E7%96%AF/"/>
    
    
      <category term="随便写写啦" scheme="http://blog.2bsitcker.cn/tags/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99%E5%95%A6/"/>
    
  </entry>
  
  <entry>
    <title>About recently</title>
    <link href="http://blog.2bsitcker.cn/2017/09/04/About-recently/"/>
    <id>http://blog.2bsitcker.cn/2017/09/04/About-recently/</id>
    <published>2017-09-04T14:46:58.000Z</published>
    <updated>2017-09-04T15:07:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>仔细看一下，上一篇特么是4月份的事了，现在9月份，已近5个月没有更新过了</p><p>在这五个月中，本来有想过写东西的，但由于一直很烦（对，其实也不算太忙）</p><p>烦于找实习，实习失利又去考虑找读研导师，一直折腾来折腾去，各种破事。</p><hr><p>如果说大三上是因为各种课程各种实验堆积搞得自己很忙很烦，那么大三下就是各种破事堆积搞得自己很烦</p><p>每天都很烦！</p><p>还好，这段可怕的日子已经过去了，我也丝毫不留恋，如今仅仅会感叹一下时间过得真快，现在学校又都是军训的萌新，不止一次感叹年轻真好</p><p>在这五个月，有几次我都想更些blog，不过一直没写，没组织，现在考虑下是不是应该补上。</p><p>其中包括：</p><ol><li>DDCTF前几题的wp</li><li>一次pwnhub关于Android的逆向（没多大意思，有点不打算写了）</li><li>最近一次pwnhub关于pyc的逆向</li></ol><p>还有些想写的，但似乎忘了，果然应该及时写的= =</p><p>然后，最近想要从零开始写一个小型的操作系统内核，正在肝文档，抄代码，会及时记下这个过程的</p><hr><p>再就是，关于这个博客的修整</p><p>首先的问题是：</p><ol><li>以前的图床收费，图片全挂了，需要修复</li><li>留言挂了，等待修复</li><li>以前hexo的配置有问题，似乎ban了某些搜索引擎，待修复</li></ol><p>所以计划是：</p><ol><li>修复以前的图片</li><li>修复留言系统</li><li>站点重新配置，修改一下样式之类的</li><li>补一下文章。。。</li><li>考虑配置个https</li></ol><p>就酱</p><hr><p>但愿人生能往自己喜欢的方向发展，丰富多彩。</p><h6 id="但是没钱是个大问题"><a href="#但是没钱是个大问题" class="headerlink" title="但是没钱是个大问题"></a>但是没钱是个大问题</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;仔细看一下，上一篇特么是4月份的事了，现在9月份，已近5个月没有更新过了&lt;/p&gt;
&lt;p&gt;在这五个月中，本来有想过写东西的，但由于一直很烦（对，其实也不算太忙）&lt;/p&gt;
&lt;p&gt;烦于找实习，实习失利又去考虑找读研导师，一直折腾来折腾去，各种破事。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;如果说
      
    
    </summary>
    
      <category term="感想or发疯" scheme="http://blog.2bsitcker.cn/categories/%E6%84%9F%E6%83%B3or%E5%8F%91%E7%96%AF/"/>
    
    
      <category term="随便写写啦" scheme="http://blog.2bsitcker.cn/tags/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99%E5%95%A6/"/>
    
  </entry>
  
  <entry>
    <title>Android签名原理介绍（2）--schemev2</title>
    <link href="http://blog.2bsitcker.cn/2017/04/11/Android%E7%AD%BE%E5%90%8D%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%EF%BC%882%EF%BC%89-schemev2/"/>
    <id>http://blog.2bsitcker.cn/2017/04/11/Android签名原理介绍（2）-schemev2/</id>
    <published>2017-04-11T05:49:59.000Z</published>
    <updated>2017-11-22T11:51:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>接上一篇，接下来介绍7.0后新增的v2签名认证方式</p><h2 id="APK-Signature-Scheme-v2"><a href="#APK-Signature-Scheme-v2" class="headerlink" title="APK Signature Scheme v2"></a>APK Signature Scheme v2</h2><p>与v1方式签名不同的是，v2的签名是对整个文件的一种签名方式</p><p>直接从字节码上对apk进行签名，不必遍历每个入口进行计算签名</p><p>并且每一个改动都会使得签名失败，因此其提高了签名认证的速度和签名保护的安全性</p><p>但是有一点得注意的是，v2签名仅用在7.0以上的系统中，因为只有7.0以上的系统有有关v2签名认证的代码</p><p>因此为了适配早前的系统，正常还是采用v1签名，或是v1v2签名并存</p><p>在后面的代码可以看出来，7.0以上的系统会先进行v2签名的认证，若没检测到v2签名信息，则再进行v1的方法</p><p>但是由于一些应用需要打包渠道包，每次修改再编译再签名实在太耗时，大部分会选择关闭v2签名</p><p>在build Gradle中添加</p><blockquote><p>v2SigningEnabled false</p></blockquote><p>因为在v1签名中，<code>META-INF</code>中的内容是不会检测的，这使得在打包渠道包时不需要重复重新签名</p><blockquote><p>渠道包指的是在各大应用市场，发布的apk包的清单文件中，某个meta-data标签下，配置的value不一样，这个标签的作用就是用来区分是哪个市场的</p></blockquote><a id="more"></a><p>下图是从google上扒来的图，更详细的介绍可以看google</p><blockquote><p><a href="https://source.android.com/security/apksigning/v2" target="_blank" rel="noopener">https://source.android.com/security/apksigning/v2</a></p></blockquote><p><img src="https://source.android.com/security/images/apk-before-after-signing.png" alt="APK before and after signing"></p><p>与不签名相比，v2签名在ZIP Central Directory section之前插入了一段<code>signing block</code>，这就是所有签名的信息</p><p><img src="https://source.android.com/security/images/apk-validation-process.png" alt="APK signature verification process"></p><p>签名认证过程</p><hr><p>这里是Android7.1.1_r28下signApk工具中使用v2签名方式进行签名的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer[] sign(</span><br><span class="line">        ByteBuffer inputApk,</span><br><span class="line">        List&lt;SignerConfig&gt; signerConfigs)</span><br><span class="line">                <span class="keyword">throws</span> ApkParseException, InvalidKeyException, SignatureException &#123;</span><br><span class="line">    <span class="comment">// Slice/create a view in the inputApk to make sure that:</span></span><br><span class="line">    <span class="comment">// 1. inputApk is what's between position and limit of the original inputApk, and</span></span><br><span class="line">    <span class="comment">// 2. changes to position, limit, and byte order are not reflected in the original.</span></span><br><span class="line">    ByteBuffer originalInputApk = inputApk;</span><br><span class="line">    inputApk = originalInputApk.slice();</span><br><span class="line">    inputApk.order(ByteOrder.LITTLE_ENDIAN);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Locate ZIP End of Central Directory (EoCD), Central Directory, and check that Central</span></span><br><span class="line">    <span class="comment">// Directory is immediately followed by the ZIP End of Central Directory.</span></span><br><span class="line">    <span class="keyword">int</span> eocdOffset = ZipUtils.findZipEndOfCentralDirectoryRecord(inputApk);</span><br><span class="line">    <span class="keyword">if</span> (eocdOffset == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApkParseException(<span class="string">"Failed to locate ZIP End of Central Directory"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ZipUtils.isZip64EndOfCentralDirectoryLocatorPresent(inputApk, eocdOffset)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApkParseException(<span class="string">"ZIP64 format not supported"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    inputApk.position(eocdOffset);</span><br><span class="line">    <span class="keyword">long</span> centralDirSizeLong = ZipUtils.getZipEocdCentralDirectorySizeBytes(inputApk);</span><br><span class="line">    <span class="keyword">if</span> (centralDirSizeLong &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApkParseException(</span><br><span class="line">                <span class="string">"ZIP Central Directory size out of range: "</span> + centralDirSizeLong);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> centralDirSize = (<span class="keyword">int</span>) centralDirSizeLong;</span><br><span class="line">    <span class="keyword">long</span> centralDirOffsetLong = ZipUtils.getZipEocdCentralDirectoryOffset(inputApk);</span><br><span class="line">    <span class="keyword">if</span> (centralDirOffsetLong &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApkParseException(</span><br><span class="line">                <span class="string">"ZIP Central Directory offset in file out of range: "</span> + centralDirOffsetLong);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> centralDirOffset = (<span class="keyword">int</span>) centralDirOffsetLong;</span><br><span class="line">    <span class="keyword">int</span> expectedEocdOffset = centralDirOffset + centralDirSize;</span><br><span class="line">    <span class="keyword">if</span> (expectedEocdOffset &lt; centralDirOffset) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApkParseException(</span><br><span class="line">                <span class="string">"ZIP Central Directory extent too large. Offset: "</span> + centralDirOffset</span><br><span class="line">                        + <span class="string">", size: "</span> + centralDirSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (eocdOffset != expectedEocdOffset) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApkParseException(</span><br><span class="line">                <span class="string">"ZIP Central Directory not immeiately followed by ZIP End of"</span></span><br><span class="line">                        + <span class="string">" Central Directory. CD end: "</span> + expectedEocdOffset</span><br><span class="line">                        + <span class="string">", EoCD start: "</span> + eocdOffset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create ByteBuffers holding the contents of everything before ZIP Central Directory,</span></span><br><span class="line">    <span class="comment">// ZIP Central Directory, and ZIP End of Central Directory.</span></span><br><span class="line">    inputApk.clear();</span><br><span class="line">    ByteBuffer beforeCentralDir = getByteBuffer(inputApk, centralDirOffset);</span><br><span class="line">    ByteBuffer centralDir = getByteBuffer(inputApk, eocdOffset - centralDirOffset);</span><br><span class="line">    <span class="comment">// Create a copy of End of Central Directory because we'll need modify its contents later.</span></span><br><span class="line">    <span class="keyword">byte</span>[] eocdBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[inputApk.remaining()];</span><br><span class="line">    inputApk.get(eocdBytes);</span><br><span class="line">    ByteBuffer eocd = ByteBuffer.wrap(eocdBytes);</span><br><span class="line">    eocd.order(inputApk.order());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Figure which which digests to use for APK contents.</span></span><br><span class="line">    Set&lt;Integer&gt; contentDigestAlgorithms = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SignerConfig signerConfig : signerConfigs) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> signatureAlgorithm : signerConfig.signatureAlgorithms) &#123;</span><br><span class="line">            contentDigestAlgorithms.add(</span><br><span class="line">                    getSignatureAlgorithmContentDigestAlgorithm(signatureAlgorithm));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute digests of APK contents.</span></span><br><span class="line">    Map&lt;Integer, <span class="keyword">byte</span>[]&gt; contentDigests; <span class="comment">// digest algorithm ID -&gt; digest</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        contentDigests =</span><br><span class="line">                computeContentDigests(</span><br><span class="line">                        contentDigestAlgorithms,</span><br><span class="line">                        <span class="keyword">new</span> ByteBuffer[] &#123;beforeCentralDir, centralDir, eocd&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (DigestException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SignatureException(<span class="string">"Failed to compute digests of APK"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sign the digests and wrap the signatures and signer info into an APK Signing Block.</span></span><br><span class="line">    ByteBuffer apkSigningBlock =</span><br><span class="line">            ByteBuffer.wrap(generateApkSigningBlock(signerConfigs, contentDigests));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update Central Directory Offset in End of Central Directory Record. Central Directory</span></span><br><span class="line">    <span class="comment">// follows the APK Signing Block and thus is shifted by the size of the APK Signing Block.</span></span><br><span class="line">    centralDirOffset += apkSigningBlock.remaining();</span><br><span class="line">    eocd.clear();</span><br><span class="line">    ZipUtils.setZipEocdCentralDirectoryOffset(eocd, centralDirOffset);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Follow the Java NIO pattern for ByteBuffer whose contents have been consumed.</span></span><br><span class="line">    originalInputApk.position(originalInputApk.limit());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reset positions (to 0) and limits (to capacity) in the ByteBuffers below to follow the</span></span><br><span class="line">    <span class="comment">// Java NIO pattern for ByteBuffers which are ready for their contents to be read by caller.</span></span><br><span class="line">    <span class="comment">// Contrary to the name, this does not clear the contents of these ByteBuffer.</span></span><br><span class="line">    beforeCentralDir.clear();</span><br><span class="line">    centralDir.clear();</span><br><span class="line">    eocd.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Insert APK Signing Block immediately before the ZIP Central Directory.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ByteBuffer[] &#123;</span><br><span class="line">        beforeCentralDir,</span><br><span class="line">        apkSigningBlock,</span><br><span class="line">        centralDir,</span><br><span class="line">        eocd,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateApkSigningBlock(<span class="keyword">byte</span>[] apkSignatureSchemeV2Block) &#123;</span><br><span class="line">    <span class="comment">// FORMAT:</span></span><br><span class="line">    <span class="comment">// uint64:  size (excluding this field)</span></span><br><span class="line">    <span class="comment">// repeated ID-value pairs:</span></span><br><span class="line">    <span class="comment">//     uint64:           size (excluding this field)</span></span><br><span class="line">    <span class="comment">//     uint32:           ID</span></span><br><span class="line">    <span class="comment">//     (size - 4) bytes: value</span></span><br><span class="line">    <span class="comment">// uint64:  size (same as the one above)</span></span><br><span class="line">    <span class="comment">// uint128: magic</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> resultSize =</span><br><span class="line">            <span class="number">8</span> <span class="comment">// size</span></span><br><span class="line">            + <span class="number">8</span> + <span class="number">4</span> + apkSignatureSchemeV2Block.length <span class="comment">// v2Block as ID-value pair</span></span><br><span class="line">            + <span class="number">8</span> <span class="comment">// size</span></span><br><span class="line">            + <span class="number">16</span> <span class="comment">// magic</span></span><br><span class="line">            ;</span><br><span class="line">    ByteBuffer result = ByteBuffer.allocate(resultSize);</span><br><span class="line">    result.order(ByteOrder.LITTLE_ENDIAN);</span><br><span class="line">    <span class="keyword">long</span> blockSizeFieldValue = resultSize - <span class="number">8</span>;</span><br><span class="line">    result.putLong(blockSizeFieldValue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> pairSizeFieldValue = <span class="number">4</span> + apkSignatureSchemeV2Block.length;</span><br><span class="line">    result.putLong(pairSizeFieldValue);</span><br><span class="line">    result.putInt(APK_SIGNATURE_SCHEME_V2_BLOCK_ID);</span><br><span class="line">    result.put(apkSignatureSchemeV2Block);</span><br><span class="line"></span><br><span class="line">    result.putLong(blockSizeFieldValue);</span><br><span class="line">    result.put(APK_SIGNING_BLOCK_MAGIC);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.array();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateSignerBlock(</span><br><span class="line">        SignerConfig signerConfig,</span><br><span class="line">        Map&lt;Integer, <span class="keyword">byte</span>[]&gt; contentDigests) <span class="keyword">throws</span> InvalidKeyException, SignatureException &#123;</span><br><span class="line">    <span class="keyword">if</span> (signerConfig.certificates.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SignatureException(<span class="string">"No certificates configured for signer"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    PublicKey publicKey = signerConfig.certificates.get(<span class="number">0</span>).getPublicKey();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] encodedPublicKey = encodePublicKey(publicKey);</span><br><span class="line"></span><br><span class="line">    V2SignatureSchemeBlock.SignedData signedData = <span class="keyword">new</span> V2SignatureSchemeBlock.SignedData();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        signedData.certificates = encodeCertificates(signerConfig.certificates);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CertificateEncodingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SignatureException(<span class="string">"Failed to encode certificates"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Pair&lt;Integer, <span class="keyword">byte</span>[]&gt;&gt; digests =</span><br><span class="line">            <span class="keyword">new</span> ArrayList&lt;&gt;(signerConfig.signatureAlgorithms.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> signatureAlgorithm : signerConfig.signatureAlgorithms) &#123;</span><br><span class="line">        <span class="keyword">int</span> contentDigestAlgorithm =</span><br><span class="line">                getSignatureAlgorithmContentDigestAlgorithm(signatureAlgorithm);</span><br><span class="line">        <span class="keyword">byte</span>[] contentDigest = contentDigests.get(contentDigestAlgorithm);</span><br><span class="line">        <span class="keyword">if</span> (contentDigest == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    getContentDigestAlgorithmJcaDigestAlgorithm(contentDigestAlgorithm)</span><br><span class="line">                    + <span class="string">" content digest for "</span></span><br><span class="line">                    + getSignatureAlgorithmJcaSignatureAlgorithm(signatureAlgorithm)</span><br><span class="line">                    + <span class="string">" not computed"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        digests.add(Pair.create(signatureAlgorithm, contentDigest));</span><br><span class="line">    &#125;</span><br><span class="line">    signedData.digests = digests;</span><br><span class="line"></span><br><span class="line">    V2SignatureSchemeBlock.Signer signer = <span class="keyword">new</span> V2SignatureSchemeBlock.Signer();</span><br><span class="line">    <span class="comment">// FORMAT:</span></span><br><span class="line">    <span class="comment">// * length-prefixed sequence of length-prefixed digests:</span></span><br><span class="line">    <span class="comment">//   * uint32: signature algorithm ID</span></span><br><span class="line">    <span class="comment">//   * length-prefixed bytes: digest of contents</span></span><br><span class="line">    <span class="comment">// * length-prefixed sequence of certificates:</span></span><br><span class="line">    <span class="comment">//   * length-prefixed bytes: X.509 certificate (ASN.1 DER encoded).</span></span><br><span class="line">    <span class="comment">// * length-prefixed sequence of length-prefixed additional attributes:</span></span><br><span class="line">    <span class="comment">//   * uint32: ID</span></span><br><span class="line">    <span class="comment">//   * (length - 4) bytes: value</span></span><br><span class="line">    signer.signedData = encodeAsSequenceOfLengthPrefixedElements(<span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;</span><br><span class="line">        encodeAsSequenceOfLengthPrefixedPairsOfIntAndLengthPrefixedBytes(signedData.digests),</span><br><span class="line">        encodeAsSequenceOfLengthPrefixedElements(signedData.certificates),</span><br><span class="line">        <span class="comment">// additional attributes</span></span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>],</span><br><span class="line">    &#125;);</span><br><span class="line">    signer.publicKey = encodedPublicKey;</span><br><span class="line">    signer.signatures = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> signatureAlgorithm : signerConfig.signatureAlgorithms) &#123;</span><br><span class="line">        Pair&lt;String, ? extends AlgorithmParameterSpec&gt; signatureParams =</span><br><span class="line">                getSignatureAlgorithmJcaSignatureAlgorithm(signatureAlgorithm);</span><br><span class="line">        String jcaSignatureAlgorithm = signatureParams.getFirst();</span><br><span class="line">        AlgorithmParameterSpec jcaSignatureAlgorithmParams = signatureParams.getSecond();</span><br><span class="line">        <span class="keyword">byte</span>[] signatureBytes;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Signature signature = Signature.getInstance(jcaSignatureAlgorithm);</span><br><span class="line">            signature.initSign(signerConfig.privateKey);</span><br><span class="line">            <span class="keyword">if</span> (jcaSignatureAlgorithmParams != <span class="keyword">null</span>) &#123;</span><br><span class="line">                signature.setParameter(jcaSignatureAlgorithmParams);</span><br><span class="line">            &#125;</span><br><span class="line">            signature.update(signer.signedData);</span><br><span class="line">            signatureBytes = signature.sign();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidKeyException(<span class="string">"Failed sign using "</span> + jcaSignatureAlgorithm, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException | InvalidAlgorithmParameterException</span><br><span class="line">                | SignatureException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SignatureException(<span class="string">"Failed sign using "</span> + jcaSignatureAlgorithm, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Signature signature = Signature.getInstance(jcaSignatureAlgorithm);</span><br><span class="line">            signature.initVerify(publicKey);</span><br><span class="line">            <span class="keyword">if</span> (jcaSignatureAlgorithmParams != <span class="keyword">null</span>) &#123;</span><br><span class="line">                signature.setParameter(jcaSignatureAlgorithmParams);</span><br><span class="line">            &#125;</span><br><span class="line">            signature.update(signer.signedData);</span><br><span class="line">            <span class="keyword">if</span> (!signature.verify(signatureBytes)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SignatureException(<span class="string">"Signature did not verify"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidKeyException(<span class="string">"Failed to verify generated "</span> + jcaSignatureAlgorithm</span><br><span class="line">                    + <span class="string">" signature using public key from certificate"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException | InvalidAlgorithmParameterException</span><br><span class="line">                | SignatureException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SignatureException(<span class="string">"Failed to verify generated "</span> + jcaSignatureAlgorithm</span><br><span class="line">                    + <span class="string">" signature using public key from certificate"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        signer.signatures.add(Pair.create(signatureAlgorithm, signatureBytes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FORMAT:</span></span><br><span class="line">    <span class="comment">// * length-prefixed signed data</span></span><br><span class="line">    <span class="comment">// * length-prefixed sequence of length-prefixed signatures:</span></span><br><span class="line">    <span class="comment">//   * uint32: signature algorithm ID</span></span><br><span class="line">    <span class="comment">//   * length-prefixed bytes: signature of signed data</span></span><br><span class="line">    <span class="comment">// * length-prefixed bytes: public key (X.509 SubjectPublicKeyInfo, ASN.1 DER encoded)</span></span><br><span class="line">    <span class="keyword">return</span> encodeAsSequenceOfLengthPrefixedElements(</span><br><span class="line">            <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;</span><br><span class="line">                signer.signedData,</span><br><span class="line">                encodeAsSequenceOfLengthPrefixedPairsOfIntAndLengthPrefixedBytes(</span><br><span class="line">                        signer.signatures),</span><br><span class="line">                signer.publicKey,</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里贴上关键的两个函数</p><p>通过分析可知，其签名过程分为以下几个步骤</p><ol><li>把apk看为zip，把zip的三个块划分开</li><li>分别对三个块从提前获取到的摘要算法(signerConfigs)进行hash处理，这部分就是用于签名的信息</li><li>通过私钥对从这三个块获得的签名数据进行加密，获得签名，并编码公钥，签名结果</li></ol><p>格式在注释中已说</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SIGNEDDATA FORMAT:</span></span><br><span class="line">        <span class="comment">// * length-prefixed sequence of length-prefixed digests:</span></span><br><span class="line">        <span class="comment">//   * uint32: signature algorithm ID</span></span><br><span class="line">        <span class="comment">//   * length-prefixed bytes: digest of contents</span></span><br><span class="line">        <span class="comment">// * length-prefixed sequence of certificates:</span></span><br><span class="line">        <span class="comment">//   * length-prefixed bytes: X.509 certificate (ASN.1 DER encoded).</span></span><br><span class="line">        <span class="comment">// * length-prefixed sequence of length-prefixed additional attributes:</span></span><br><span class="line">        <span class="comment">//   * uint32: ID</span></span><br><span class="line">        <span class="comment">//   * (length - 4) bytes: value</span></span><br><span class="line">        </span><br><span class="line"> <span class="comment">//BLOCK FORMAT:</span></span><br><span class="line">        <span class="comment">// * length-prefixed signed data</span></span><br><span class="line">        <span class="comment">// * length-prefixed sequence of length-prefixed signatures:</span></span><br><span class="line">        <span class="comment">//   * uint32: signature algorithm ID</span></span><br><span class="line">        <span class="comment">//   * length-prefixed bytes: signature of signed data</span></span><br><span class="line">        <span class="comment">// * length-prefixed bytes: public key (X.509 SubjectPublicKeyInfo, ASN.1 DER encoded)</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//SIGNED　BLOCK FORMAT:</span></span><br><span class="line">        <span class="comment">// uint64:  size (excluding this field)</span></span><br><span class="line">        <span class="comment">// repeated ID-value pairs:</span></span><br><span class="line">        <span class="comment">//     uint64:           size (excluding this field)</span></span><br><span class="line">        <span class="comment">//     uint32:           ID</span></span><br><span class="line">        <span class="comment">//     (size - 4) bytes: value</span></span><br><span class="line">        <span class="comment">// uint64:  size (same as the one above)</span></span><br><span class="line">        <span class="comment">// uint128: magic</span></span><br></pre></td></tr></table></figure><p><img src="https://source.android.com/security/images/apk-integrity-protection.png" alt="APK digest"></p><p>对于验证过程</p><blockquote><h3 id="APK-Signature-Scheme-v2-verification"><a href="#APK-Signature-Scheme-v2-verification" class="headerlink" title="APK Signature Scheme v2 verification"></a>APK Signature Scheme v2 verification</h3><ol><li>Locate the APK Signing Block and verify that:<ol><li>Two size fields of APK Signing Block contain the same value.</li><li>ZIP Central Directory is immediately followed by ZIP End of Central Directory record.</li><li>ZIP End of Central Directory is not followed by more data.</li></ol></li><li>Locate the first APK Signature Scheme v2 Block inside the APK Signing Block. If the v2 Block if present, proceed to step 3. Otherwise, fall back to verifying the APK <a href="https://source.android.com/security/apksigning/v2#v1-verification" target="_blank" rel="noopener">using v1 scheme</a>.</li><li>For each <code>signer</code> in the APK Signature Scheme v2 Block:Choose the strongest supported <code>signature algorithm ID</code> from <code>signatures</code>. The strength ordering is up to each implementation/platform version.Verify the corresponding <code>signature</code> from <code>signatures</code> against <code>signed data</code> using <code>public key</code>. (It is now safe to parse <code>signed data</code>.)Verify that the ordered list of signature algorithm IDs in <code>digests</code> and <code>signatures</code> is identical. (This is to prevent signature stripping/addition.)<a href="https://source.android.com/security/apksigning/v2#integrity-protected-contents" target="_blank" rel="noopener">Compute the digest of APK contents</a> using the same digest algorithm as the digest algorithm used by the signature algorithm.Verify that the computed digest is identical to the corresponding <code>digest</code> from <code>digests</code>.Verify that SubjectPublicKeyInfo of the first <code>certificate</code> of <code>certificates</code> is identical to <code>public key</code>.</li><li>Verification succeeds if at least one <code>signer</code> was found and step 3 succeeded for each found <code>signer</code>.</li></ol></blockquote><p>即</p><ol><li>定位到signing block</li><li>获取签名证书的段，读取公钥，解密签名数据</li><li>获取摘要算法，对另外三个块进行hash，并与解密出来的数据对比</li></ol><p>对于有多个不同签名的apk，将会拥有多个signing block</p><p>以下即是其中一个apk的v2签名块</p><p><img src="/2017/04/11/Android签名原理介绍（2）-schemev2/startOfSignBlock_zpsaxlxuhct.jpg" alt="startOfSignBlock"></p><p><img src="/2017/04/11/Android签名原理介绍（2）-schemev2/endOfSignBlock_zpsaffeizzi.jpg" alt="endOfSignBlock"></p><p>中间还有很多的信息省略了</p><p>这里可以看到在签名块结尾的magic number</p><p><code>APK Sig Block 42</code></p><hr><p>对于v2签名介绍已完毕，下一篇将会简单地对比两种签名方式 (好像该对比的都对比得差不多了23333)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上一篇，接下来介绍7.0后新增的v2签名认证方式&lt;/p&gt;
&lt;h2 id=&quot;APK-Signature-Scheme-v2&quot;&gt;&lt;a href=&quot;#APK-Signature-Scheme-v2&quot; class=&quot;headerlink&quot; title=&quot;APK Signature Scheme v2&quot;&gt;&lt;/a&gt;APK Signature Scheme v2&lt;/h2&gt;&lt;p&gt;与v1方式签名不同的是，v2的签名是对整个文件的一种签名方式&lt;/p&gt;
&lt;p&gt;直接从字节码上对apk进行签名，不必遍历每个入口进行计算签名&lt;/p&gt;
&lt;p&gt;并且每一个改动都会使得签名失败，因此其提高了签名认证的速度和签名保护的安全性&lt;/p&gt;
&lt;p&gt;但是有一点得注意的是，v2签名仅用在7.0以上的系统中，因为只有7.0以上的系统有有关v2签名认证的代码&lt;/p&gt;
&lt;p&gt;因此为了适配早前的系统，正常还是采用v1签名，或是v1v2签名并存&lt;/p&gt;
&lt;p&gt;在后面的代码可以看出来，7.0以上的系统会先进行v2签名的认证，若没检测到v2签名信息，则再进行v1的方法&lt;/p&gt;
&lt;p&gt;但是由于一些应用需要打包渠道包，每次修改再编译再签名实在太耗时，大部分会选择关闭v2签名&lt;/p&gt;
&lt;p&gt;在build Gradle中添加&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;v2SigningEnabled false&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为在v1签名中，&lt;code&gt;META-INF&lt;/code&gt;中的内容是不会检测的，这使得在打包渠道包时不需要重复重新签名&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;渠道包指的是在各大应用市场，发布的apk包的清单文件中，某个meta-data标签下，配置的value不一样，这个标签的作用就是用来区分是哪个市场的&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://blog.2bsitcker.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://blog.2bsitcker.cn/tags/Android/"/>
    
      <category term="签名认证" scheme="http://blog.2bsitcker.cn/tags/%E7%AD%BE%E5%90%8D%E8%AE%A4%E8%AF%81/"/>
    
      <category term="scheme v2" scheme="http://blog.2bsitcker.cn/tags/scheme-v2/"/>
    
  </entry>
  
  <entry>
    <title>Android签名原理介绍（1）--schemev1</title>
    <link href="http://blog.2bsitcker.cn/2017/04/07/Android%E7%AD%BE%E5%90%8D%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%EF%BC%881%EF%BC%89--schemev1/"/>
    <id>http://blog.2bsitcker.cn/2017/04/07/Android签名原理介绍（1）--schemev1/</id>
    <published>2017-04-07T15:48:25.000Z</published>
    <updated>2017-11-22T11:51:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为某些不知名的原因，让我感觉很有必要学习一下apk签名的方式，于是。。。便有了这篇</p><p>（真的好久没写了哇，近期烦心事真的太多了）</p><p>我在网上搜了各种大大小小关于apk签名的文章，但始终没有能让我满意的，而且也感觉一直缺乏一篇能从字节上分析对比新旧两种签名方式的文章，so……</p><p>传统的安卓签名方式是通过jar的签名方式实现的，在apk包下，会有一个<code>META-INF</code>的文件夹，META-INF的文件夹下，会有<code>MANIFEST.MF</code> <code>CERT.SF</code> <code>CERT.RSA</code>三个文件，均是用于apk签名认证的。</p><p>而在Android7.0后，新增了一个APK Signature Scheme v2的签名方式，更为强效。而原来的签名方式则是 JAR-signed APK verification (v1 scheme)</p><p>详细可看官方的文档 </p><blockquote><p><a href="https://source.android.com/security/apksigning/v2#v1-verification" target="_blank" rel="noopener">https://source.android.com/security/apksigning/v2#v1-verification</a></p></blockquote><a id="more"></a><h2 id="JAR-signed-APK-verification-v1-scheme"><a href="#JAR-signed-APK-verification-v1-scheme" class="headerlink" title="JAR-signed APK verification (v1 scheme)"></a>JAR-signed APK verification (v1 scheme)</h2><p>分析一下原版的签名方式</p><p>├─META-INF<br>│      CERT.RSA<br>│      CERT.SF<br>│      MANIFEST.MF</p><p><code>MANIFEST.MF</code>：储存了apk底下除了META-INF文件夹外其余文件的SHA1后对应的base64的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Built-By: Generated-by-ADT</span><br><span class="line">Created-By: Android Gradle 2.3.0</span><br><span class="line"></span><br><span class="line">Name: res/anim/design_snackbar_in.xml</span><br><span class="line">SHA1-Digest: QPiYcwJRp7LvVEneHabhK9QbisA=</span><br><span class="line"></span><br><span class="line">Name: res/layout/design_text_input_password_icon.xml</span><br><span class="line">SHA1-Digest: jJEvq6P1Soe1bsUay8j+cdxWKGk=</span><br><span class="line"></span><br><span class="line">Name: res/drawable-hdpi-v4/abc_list_longpressed_holo.9.png</span><br><span class="line">SHA1-Digest: KQunCQh0E4bP0utgN0cHdQr9OwA=</span><br><span class="line"></span><br><span class="line">Name: res/drawable-xxhdpi-v4/abc_ic_star_half_black_16dp.png</span><br><span class="line">SHA1-Digest: EikVyBT5I7pmbJO2k8qF0V5hUc0=</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>CERT.SF</code>：在MAINFEST.MF文件的基础上，增加了对MANIFEST.MF的SHA1的值，并在base64编码后放到开头。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Signature-Version: 1.0</span><br><span class="line">SHA1-Digest-Manifest: rYILhq+GQ4rnRO9NeNUFTLzDiFs=</span><br><span class="line">Created-By: 1.0 (Android)</span><br><span class="line"></span><br><span class="line">Name: res/anim/design_snackbar_in.xml</span><br><span class="line">SHA1-Digest: QPiYcwJRp7LvVEneHabhK9QbisA=</span><br><span class="line"></span><br><span class="line">Name: res/layout/design_text_input_password_icon.xml</span><br><span class="line">SHA1-Digest: jJEvq6P1Soe1bsUay8j+cdxWKGk=</span><br><span class="line"></span><br><span class="line">Name: res/drawable-hdpi-v4/abc_list_longpressed_holo.9.png</span><br><span class="line">SHA1-Digest: KQunCQh0E4bP0utgN0cHdQr9OwA=</span><br><span class="line"></span><br><span class="line">Name: res/drawable-xxhdpi-v4/abc_ic_star_half_black_16dp.png</span><br><span class="line">SHA1-Digest: EikVyBT5I7pmbJO2k8qF0V5hUc0=</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>CERT.RSA</code>：这个则是RSA证书文件了，文本文件打开肯定是乱码，我们可以通过openssl查看其信息。</p><p>应该算挺标准的X509格式的证书吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">$ openssl pkcs7 -inform DER -in CERT.RSA -noout -print_certs -text</span><br><span class="line">Certificate:</span><br><span class="line">    Data:</span><br><span class="line">        Version: 3 (0x2)</span><br><span class="line">        Serial Number: 2064162882 (0x7b08a042)</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">        Issuer: OU=gifish, CN=lin.giglf</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Feb 28 14:20:15 2017 GMT</span><br><span class="line">            Not After : Feb 22 14:20:15 2042 GMT</span><br><span class="line">        Subject: OU=gifish, CN=lin.giglf</span><br><span class="line">        Subject Public Key Info:</span><br><span class="line">            Public Key Algorithm: rsaEncryption</span><br><span class="line">                Public-Key: (2048 bit)</span><br><span class="line">                Modulus:</span><br><span class="line">                    00:af:8a:df:e1:7f:70:b4:97:85:71:1b:ca:b8:9e:</span><br><span class="line">                    48:80:7a:4e:10:5a:a7:d7:aa:85:3a:7c:0a:99:42:</span><br><span class="line">                    ec:db:01:d7:28:ad:69:72:04:e6:9e:f3:0a:56:30:</span><br><span class="line">                    f1:d8:1e:8b:bd:d9:94:2e:ac:b0:64:83:71:89:24:</span><br><span class="line">                    e4:8e:63:f1:24:7f:73:d7:e4:48:d6:82:11:f6:9c:</span><br><span class="line">                    1f:de:4a:22:52:f1:b3:7b:0b:7a:01:09:fc:8e:36:</span><br><span class="line">                    85:2c:79:b3:25:60:93:aa:61:d2:d4:7c:e1:ab:70:</span><br><span class="line">                    40:5b:bb:cd:30:9a:cd:40:89:df:8d:73:25:87:ce:</span><br><span class="line">                    49:1e:63:42:47:d7:f4:66:40:56:db:67:6b:89:b2:</span><br><span class="line">                    4f:8e:9f:4a:f3:04:f4:40:58:02:83:c0:81:0b:5e:</span><br><span class="line">                    79:e6:d3:7f:3b:32:22:47:ed:f2:42:1f:7c:94:41:</span><br><span class="line">                    b1:d2:4b:f7:df:d0:61:68:1f:74:60:07:56:05:e4:</span><br><span class="line">                    44:27:5d:15:24:66:02:3e:51:06:7b:13:9c:f1:31:</span><br><span class="line">                    f3:15:39:6f:de:22:27:44:f9:3a:42:59:c8:20:f4:</span><br><span class="line">                    41:5a:4e:36:b0:8e:25:eb:a4:a8:72:01:e6:81:56:</span><br><span class="line">                    86:67:01:e5:bd:43:28:99:14:57:90:ff:b3:e9:f5:</span><br><span class="line">                    c6:85:d7:36:cb:05:c0:31:c6:b0:f5:b9:ec:54:ae:</span><br><span class="line">                    83:85</span><br><span class="line">                Exponent: 65537 (0x10001)</span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Subject Key Identifier:</span><br><span class="line">                30:06:A9:7C:68:78:A4:7A:50:52:4F:B6:75:DE:5D:88:86:AD:DD:4F</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">         26:2b:cf:a3:fa:4d:81:c5:a7:37:6f:4a:95:2c:ba:f4:73:cc:</span><br><span class="line">         57:69:8c:0e:4e:07:ad:6a:df:9e:ad:c1:62:68:82:c9:89:35:</span><br><span class="line">         9f:17:32:4c:98:a3:f5:45:fb:54:75:8e:ea:74:5f:ad:b4:56:</span><br><span class="line">         c6:4c:c1:e9:f0:c5:0d:12:37:b1:83:35:16:af:de:43:e7:1b:</span><br><span class="line">         58:26:eb:86:c5:3c:da:88:6a:28:fa:65:cf:49:c6:ff:84:d7:</span><br><span class="line">         dd:1e:ad:3f:01:a0:4e:ae:52:a4:98:8f:4f:94:84:04:5f:93:</span><br><span class="line">         43:01:39:80:69:02:46:ac:bc:b4:12:f9:b2:fd:4b:ed:50:71:</span><br><span class="line">         cc:6d:1f:5f:5e:5d:e0:67:a2:a3:65:af:bf:e0:bd:26:8e:51:</span><br><span class="line">         56:d1:76:6a:e7:56:90:4e:aa:57:90:60:d0:47:38:3f:2f:9c:</span><br><span class="line">         38:01:e0:2d:4a:6c:9e:e5:5a:e5:33:fe:a6:46:f2:a9:03:ed:</span><br><span class="line">         28:2e:7a:de:e3:a8:33:3f:1c:3d:ca:eb:dd:7d:28:82:6f:2a:</span><br><span class="line">         b1:09:37:7f:b8:2c:59:75:e0:0c:2b:5f:87:9a:24:f3:2b:88:</span><br><span class="line">         5e:bb:71:60:51:d2:a4:68:c2:8f:ba:8e:46:3d:14:d9:21:13:</span><br><span class="line">         68:23:c0:f2:05:3a:21:5e:10:20:05:59:f9:06:33:9c:c4:7d:</span><br><span class="line">         95:91:ce:43</span><br></pre></td></tr></table></figure><hr><p>接着就结合源码看一看</p><p>因为网上有关这部分的已经很多了，这里贴一个链接，我就不自己贴代码了</p><blockquote><p><a href="http://www.2cto.com/kf/201601/456020.html" target="_blank" rel="noopener">http://www.2cto.com/kf/201601/456020.html</a></p></blockquote><p>大致说一下其中的主要流程</p><ol><li>apk包安装，解压得到<code>META-INF</code>下的文件</li><li>计算apk内所有文件的hash+base64的值，与<code>MANIFEST.MF</code>的内容进行比较，查看是否一致</li><li>使用<code>CERT.RSA</code>证书文件(可以是<code>.DSA .RSA .EC</code>)校验签名文件<code>CERT.SF</code>文件，两个文件名称必须相同</li><li>验证通过后，再用<code>CERT.SF</code>文件与<code>MANIFEST.MF</code>文件对比，确认没被篡改。</li></ol><p>这部分就这样被我咸鱼地搞了一天，说几点要点。</p><ul><li><p>刚开始我是结合android 7.1.1的源码看的，结果源码太多，里面各种自定义的类，看着没什么耐心，而且因为是7.0以上的源码，当中还结合了v2签名的代码，看着很复杂（主要是今天太懒没耐心）。后来就看<code>SignApk</code>这个工具的代码去了，路径是<code>build/tools/signapk/src/com/android/signapk/SignApk.java</code> 由于是一个签名工具，关键代码比较集中，比较容易理解。</p></li><li><p>刚开始的时候比较困惑，说的是用<code>CERT.RSA</code>校验签名文件<code>CERT.SF</code>，但是我在对比过<code>MANIFEST.MF</code>和<code>CERT.SF</code>后发现，这两个文件除了开头部分，后面是完全一样的，那么所谓的签名文件是什么意思？</p><p>看过SignApk的代码后，我明白了。（因为代码网上都能找到讲解，我就直接说思路了）</p><p>通过工具签名，其流程是这样的</p><ol><li>得到签名的信息，公钥、私钥等（可能包含多个签名）</li><li>通过jar(zip/apk)的入口点（即包内的各个文件）计算出hash+base64的值，hash用的sha1还是sha256取决于安卓sdk的最低版本，结果存到<code>MANIFEST.MF</code>里</li><li>取出一对公钥私钥</li><li>对<code>MANIFEST.MF</code>计算hash+base64，把<code>MANIFEST.MF</code>剩余部分复制过去，得到<code>CERT.SF</code>，这就是为何后面是完全一样的了。</li><li>调用<code>writeSignatureBlock()</code>方法，用私钥对<code>CERT.SF</code>当中生成的hash+base64进行加密，生成的密文放到证书最后生成<code>CERT.RSA</code>。</li><li>如果还有别的签名重复3-5步。</li></ol><p>我对两个不同的apk进行了签名，对比CERT.RSA文件可以看到就最后存在差异</p><p><img src="/2017/04/07/Android签名原理介绍（1）--schemev1/diff_zpsmiw3qcya.jpg" alt="diff"></p><p>通过openssl输出的证书信息都是一样的。</p><p>由此便可推出Android在验证apk签名信息时做的步骤。</p><p>接下来下一篇介绍新一代的签名方式</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;因为某些不知名的原因，让我感觉很有必要学习一下apk签名的方式，于是。。。便有了这篇&lt;/p&gt;
&lt;p&gt;（真的好久没写了哇，近期烦心事真的太多了）&lt;/p&gt;
&lt;p&gt;我在网上搜了各种大大小小关于apk签名的文章，但始终没有能让我满意的，而且也感觉一直缺乏一篇能从字节上分析对比新旧两种签名方式的文章，so……&lt;/p&gt;
&lt;p&gt;传统的安卓签名方式是通过jar的签名方式实现的，在apk包下，会有一个&lt;code&gt;META-INF&lt;/code&gt;的文件夹，META-INF的文件夹下，会有&lt;code&gt;MANIFEST.MF&lt;/code&gt; &lt;code&gt;CERT.SF&lt;/code&gt; &lt;code&gt;CERT.RSA&lt;/code&gt;三个文件，均是用于apk签名认证的。&lt;/p&gt;
&lt;p&gt;而在Android7.0后，新增了一个APK Signature Scheme v2的签名方式，更为强效。而原来的签名方式则是 JAR-signed APK verification (v1 scheme)&lt;/p&gt;
&lt;p&gt;详细可看官方的文档 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://source.android.com/security/apksigning/v2#v1-verification&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://source.android.com/security/apksigning/v2#v1-verification&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://blog.2bsitcker.cn/categories/Android/"/>
    
    
      <category term="Android" scheme="http://blog.2bsitcker.cn/tags/Android/"/>
    
      <category term="签名认证" scheme="http://blog.2bsitcker.cn/tags/%E7%AD%BE%E5%90%8D%E8%AE%A4%E8%AF%81/"/>
    
      <category term="scheme v1" scheme="http://blog.2bsitcker.cn/tags/scheme-v1/"/>
    
  </entry>
  
  <entry>
    <title>NGfish_mini-lctf_writeup</title>
    <link href="http://blog.2bsitcker.cn/2017/02/21/NGfish_mini-lctf_writeup/"/>
    <id>http://blog.2bsitcker.cn/2017/02/21/NGfish_mini-lctf_writeup/</id>
    <published>2017-02-21T06:44:17.000Z</published>
    <updated>2017-11-22T11:50:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>WriteUp比赛完就写了= =结果我拖到现在才整理发上来<br>mini-lctf是校内入门赛啊……<br>真正的dalao们都出题去了，没有参加，于是给我单挑打了个第五出来<br>然而因为没有新生在队内所以不给我奖品咯[掀桌!]<br>好歹我还ak了re和mobile！(虽然都是入门级的)<br>好咯，不管你，post一下题目的打包<br>链接: <a href="https://pan.baidu.com/s/1pKXa2rp" target="_blank" rel="noopener">https://pan.baidu.com/s/1pKXa2rp</a> 密码: gnbq</p><a id="more"></a><h2 id="Web-50-苏打学姐撞上碳酸钠了"><a href="#Web-50-苏打学姐撞上碳酸钠了" class="headerlink" title="Web 50 (苏打学姐撞上碳酸钠了)"></a>Web 50 (苏打学姐撞上碳酸钠了)</h2><p>能看到源码为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sha1 conllision, Can you <span class="keyword">do</span> it&lt;!-- </span><br><span class="line">$key = <span class="string">"aa3OFF9m"</span>;</span><br><span class="line">$pass = <span class="keyword">isset</span>($_GET[<span class="string">'pass'</span>]) ? $_GET[<span class="string">'pass'</span>] : <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span> ($pass != $key &amp;&amp; sha1($pass)==sha1($key) ) &#123;</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"sha1 conllision&lt;/br&gt;"</span>;</span><br><span class="line">&#125; --&gt;</span><br></pre></td></tr></table></figure><p>获得pass，与key=”aa30FF9m”的sha1值比较</p><p>第一个想到的是sha1碰撞，试了下显然没什么效果，50分不应该很难</p><p>后来谷狗搜了下key的sha1值，发现了这个神奇的github</p><p><a href="https://github.com/spaze/hashes" target="_blank" rel="noopener">https://github.com/spaze/hashes</a></p><p>这个是php的问题了额</p><p>挑了个输入，得到flag</p><p><code>LCTF{conllision_is_so_difficult}</code></p><p>然后web就基本都不会做了= =</p><h2 id="Misc-20-回转十三位"><a href="#Misc-20-回转十三位" class="headerlink" title="Misc 20 (回转十三位)"></a>Misc 20 (回转十三位)</h2><p>后面接着4个等号，base32编码，加上回转13位，想到ROT13，得到flag</p><h2 id="Misc20-Easy"><a href="#Misc20-Easy" class="headerlink" title="Misc20 (Easy)"></a>Misc20 (Easy)</h2><p>密文是<code>LbbeCaarT3r}Fer{_i</code></p><p>典型栅栏密码</p><h2 id="Misc60-Document"><a href="#Misc60-Document" class="headerlink" title="Misc60 (Document)"></a>Misc60 (Document)</h2><p>解压出来后用binwalk跑了下，发现了一堆隐藏的文件</p><p>直接后缀名改成.zip，是个压缩包</p><p>直接就在子文件夹中找到flag了</p><h2 id="Misc100-Noisy"><a href="#Misc100-Noisy" class="headerlink" title="Misc100 (Noisy)"></a>Misc100 (Noisy)</h2><p>下载文件名是wav，音频文件嘛……后缀名改成.wmv，听一下是一段噪音</p><p>下了个Audacity分析，瞎搞一下</p><p>发现转成频谱图的时候</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zpsrxova7qk.jpg" alt="捕获"></p><p>噢草，厉害了！</p><h2 id="Misc150-Sword-Art-Online"><a href="#Misc150-Sword-Art-Online" class="headerlink" title="Misc150 (Sword Art Online)"></a>Misc150 (Sword Art Online)</h2><p>一个txt文件，打开发现全是<code>255, 255, 255</code></p><p>然后中间还夹杂着一些别的数据</p><p>第一反应就是RGB数据咯，统计了下共1080*1080组数据</p><p>写了个脚本复原一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">width = <span class="number">1080</span></span><br><span class="line">height = <span class="number">1080</span></span><br><span class="line"></span><br><span class="line">image = Image.new(<span class="string">'RGB'</span>, (width, height))</span><br><span class="line"></span><br><span class="line">colorfd = open(<span class="string">'wtf.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line">draw = ImageDraw.Draw(image)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(width):</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(height):</span><br><span class="line">s = colorfd.readline()</span><br><span class="line"><span class="keyword">if</span> x%<span class="number">4</span>==<span class="number">1</span>:</span><br><span class="line">y1 = (y+<span class="number">270</span>)%<span class="number">1080</span></span><br><span class="line"><span class="keyword">elif</span> x%<span class="number">4</span>==<span class="number">2</span>:</span><br><span class="line">y1 = (y+<span class="number">540</span>)%<span class="number">1080</span></span><br><span class="line"><span class="keyword">elif</span> x%<span class="number">4</span>==<span class="number">3</span>:</span><br><span class="line">y1 = (y+<span class="number">810</span>)%<span class="number">1080</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">y1 = y</span><br><span class="line">num = s.split(<span class="string">', '</span>)</span><br><span class="line">draw.point((x,y1), fill=(int(num[<span class="number">0</span>]), int(num[<span class="number">1</span>]), int(num[<span class="number">2</span>])))</span><br><span class="line"></span><br><span class="line">image.save(<span class="string">'fix.jpg'</span>,<span class="string">'jpeg'</span>)</span><br></pre></td></tr></table></figure><p>当中一些点的排序有问题，导致图分成了四个部分= = (事实上是我错估了分辨率)</p><p>随意魔改了下脚本，虽然还是有问题，但是已经勉强能看出flag了2333333</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/fix_zpswpeyzcbx.jpg" alt="fix"></p><p><code>LCTF{C0ngratulation_y0u_g0t_1t}</code></p><p>Misc玩完了……时间不够不想继续尝试了T_T</p><h2 id="Pwn20"><a href="#Pwn20" class="headerlink" title="Pwn20"></a>Pwn20</h2><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zpsa3cnlzby.jpg" alt="捕获"></p><p>这个，gdb调试能发现，写v2时直接溢出就能覆盖到v3，v3只要为非0就是true了</p><p>直接输入长点瞎搞一下就出来了……</p><h2 id="Pwn80"><a href="#Pwn80" class="headerlink" title="Pwn80"></a>Pwn80</h2><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zpsoqqw4x9u.jpg" alt="捕获"></p><p>同样，输入能覆盖到v2、v3，0x63 0x65这些还都是正常的字符， 不需要用python构造输入</p><p>gdb调试时确定下相关位置就稳了</p><p>pwn基本没怎么接触过，shellcode还不会写T_T</p><p>狗带吧！</p><h2 id="Mobile20-Log"><a href="#Mobile20-Log" class="headerlink" title="Mobile20 (Log)"></a>Mobile20 (Log)</h2><p>题目都说着Log了……</p><p>然后我直接反编译看了下代码</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zpsdabqrlyk.jpg" alt="1"></p><p>log的数据写到了jni里，这么正常思维就是连上真机/虚拟机调试DDMS看log出来的flag</p><p>然后咸鱼如我直接ida了一下lib包……(才20分怎么可能写得很复杂嘛！)</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/2_zpswhckumuz.jpg" alt="2"></p><p>然后就出来了呗</p><h2 id="Mobile50-Base"><a href="#Mobile50-Base" class="headerlink" title="Mobile50 (Base)"></a>Mobile50 (Base)</h2><p>说实话这题我不知道考点在哪……代码混淆吗……</p><p>毕竟也就50分</p><p>就是这段代码</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zpseqny3qrf.jpg" alt="1"></p><p>检测是否调试器链接，然后toast输出flag</p><p>懵逼了很久……后来我甚至发现了那算法就是base32阿噗</p><p>流程就是把写死在程序里的key base32变换一下输出，key转换一下顺序再base32 一下输出</p><p>结果就是直接装上真机，按一下按钮flag就出来了……</p><h2 id="Mobile100-Smali"><a href="#Mobile100-Smali" class="headerlink" title="Mobile100 (Smali)"></a>Mobile100 (Smali)</h2><p>下载下来就是一个Smali代码</p><p>而且是经过一定的处理，不能用Smali2Java之类的工具转换成java代码</p><p>那么就直接阅读吧（真棒！！！刚好给我练一下阅读smali代码！）</p><p>smali代码指令可以到这查询</p><p><a href="http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html" target="_blank" rel="noopener">http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html</a></p><p>很关键的几个字符串<code>AES/ECB/PKCS5Padding</code> <code>MD5</code></p><p>最终结果是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00000080  const-string        v6, &quot;falg&quot;</span><br><span class="line">00000084  invoke-static       Log-&gt;d(String, String)I, v6, v4</span><br></pre></td></tr></table></figure><p>Log输出flag（唔，为什么是falg）</p><p>代码不长，大致流程就是</p><p>字符串<code>this_is_your_key</code> ，传进Encrypt.handle()函数</p><p>用这返回结果作为AES加密的秘钥，</p><p>再用这返回结果调用AESEncrypt.Encryption()函数</p><p>最后加密结果把byte转回为16进制String输出</p><p>分析一下handle函数，其实就是把奇数位和偶数位的字符交换一下</p><p>由此复原函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Learn</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">handle</span><span class="params">(String key)</span> <span class="keyword">throws</span> UnsupportedEncodingException</span>&#123;</span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;key.length();i+=<span class="number">2</span>)&#123;</span><br><span class="line">stringBuilder.append(key.charAt(i+<span class="number">1</span>));</span><br><span class="line">stringBuilder.append(key.charAt(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String key = <span class="string">"this_is_your_key"</span>;</span><br><span class="line">String keyChange = handle(key);</span><br><span class="line">System.out.println(keyChange);</span><br><span class="line">CryptoTools cipher = <span class="keyword">new</span> CryptoTools(keyChange.getBytes());</span><br><span class="line"><span class="keyword">byte</span>[] result = cipher.aesEncryptData(keyChange.getBytes());</span><br><span class="line">System.out.println(CryptoTools.byte2HexString(result));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中CryptoTools是自己写好的相应的AES加密的类</p><p>跑一下出结果</p><p><code>184b4e1bc353510f7841bb126d94259449055ef296e3b665dac507032e4c01e1</code></p><p>值得一提的是，在初始化秘钥的函数有点混淆的地方</p><p>就是当传入秘钥参数为空时会把空字符串求MD5作为秘钥，这是库中的一点处理，正常是空字符串求不了的吧……</p><p>刚开始还在这卡了点时间，怎么能如此的不熟练</p><p>然后就是眼瞎把最后加密用的字符串或秘钥各种看错，把key换成keyChange、keyChange换成key啥的阿噗，ctf真是个考验眼睛的比赛</p><p>估计是考虑到科普向，mobile的题就这三题（这才是我主场啊喂）</p><p>不过，我也蜜汁ak了re红红火火恍恍惚惚</p><h2 id="Re60"><a href="#Re60" class="headerlink" title="Re60"></a>Re60</h2><p>跑一下程序运行时让输入flag，正确就会输出对应的flag</p><p>直接拖到ida用f5神器看一下</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zps10cjd4ei.jpg" alt="1"></p><p>calLenEqual32，函数名说得挺清楚的</p><p>然后进到里面也是一个很简单的判断，输入长度为32即返回5</p><p>其中sub_3c4d函数就是很简单的一个strcmp函数，相等即返回5，输出flag</p><p>所以关键就是在sub_3c4c函数中</p><p>分析可知第一个参数是输入的字符串，第二个参数是内存中一段数据，第三个是结果</p><p>进到该函数看</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/2_zpsqvhs25em.jpg" alt="2"></p><p>在OD中调试能看到strupr是把字符串都转换为大写的函数</p><p>iHenStrlenLow是数据字符串的长度，Gap那个很复杂，但input和bc2e（自己改的名）长度应该是相同的，所以都不用管。</p><p>关键就是中间一段循环，调用的两个函数</p><p>两个函数也很简单，判断输入大小跟64和9的关系，把输入的字符-55、-48或+55、+48</p><p>我一开始写解密函数时还想着改写下这两个函数，仔细一看55+9=64，这两个函数时互补的</p><p>在OD调试中看到硬编码的字符串，长度32，直接写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> str[] = <span class="string">"bc2e0d7f253d7fff9f9d56053d051f0b"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> in)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> in&lt;=<span class="number">64</span>? in<span class="number">-48</span> : in<span class="number">-55</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">fun2</span><span class="params">(<span class="keyword">char</span> in)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> in&lt;=<span class="number">9</span>? in+<span class="number">48</span> : in+<span class="number">55</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toUpper</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">str[i] = <span class="built_in">toupper</span>(str[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char rel[] = "17500E5A4DCC77B3475ADD736DAB2FB4";</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> result2[<span class="number">32</span>];</span><br><span class="line"><span class="comment">//char result[32];</span></span><br><span class="line"><span class="comment">//char input[] = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";</span></span><br><span class="line">toUpper();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line"><span class="keyword">char</span> tmp;</span><br><span class="line">rel[i] = fun(rel[i]);</span><br><span class="line">tmp = rel[i] ^ fun(str[i]);</span><br><span class="line">result2[i] = fun2(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for(int i=0;i&lt;32;i++)&#123;</span></span><br><span class="line"><span class="comment">// char tmp = fun(input[i]);</span></span><br><span class="line"><span class="comment">// result[i] = tmp ^ fun(str[i]);</span></span><br><span class="line"><span class="comment">// result[i] = fun2(result[i]);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;result2[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//input: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span></span><br><span class="line"><span class="comment">//result:17500E5A4DCC77B3475ADD736DAB2FB4</span></span><br></pre></td></tr></table></figure><p>跑出来flag是<code>AB7E032568F1084CD8C78B7650AE30BF</code></p><h2 id="Re100-Easy-GUI"><a href="#Re100-Easy-GUI" class="headerlink" title="Re100 (Easy GUI)"></a>Re100 (Easy GUI)</h2><p>windows下的gui逆向，输入正确的password</p><p>一般来说有两种定位的思路，一是查找相应的字符串，二是在GetDlgItem这类获取控制句柄的winapi中下断点</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zps6fvp52ls.jpg" alt="1"></p><p>这里字符串一下子看不到有用的信息，于是在GetDlgItem下断点，OD跑出来</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/2_zpsw8zjzje5.jpg" alt="2"></p><p>然后就可以定位到关键函数了，这里发挥自己的想象瞎搞一波</p><p>可以直接到ida相关地方f5</p><p>也可以直接OD动态调试看寄存器</p><p>像这样，稍微阅读汇编发现password长度为13</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/3_zpsfzvmyesh.jpg" alt="3"></p><p>cmp地方下个断点，反复跑13次程序，就能骗出flag了，这样解密程序都不用写233333</p><p>flag: <code>w1napi_1s_old</code></p><h2 id="Re150-Easy-Linux"><a href="#Re150-Easy-Linux" class="headerlink" title="Re150 (Easy Linux)"></a>Re150 (Easy Linux)</h2><p>拖到linux中跑来看看</p><p>结果发现data.dat文件不一起放过去的话是跑不动的</p><p>所以可以猜想一部分代码在data.dat中</p><p>然后拖进ida就发现了checkpassword函数</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/2_zpsdvysqafc.jpg" alt="2"></p><p>非常简单的逻辑，跳转到secret的地方，获得13位数据</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/3_zpsxbnt8hs5.jpg" alt="3"></p><p>写个程序跑一下就出来了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> str[] = &#123;<span class="number">0xFF</span>,<span class="number">0xA0</span>,<span class="number">0xAF</span>,<span class="number">0xFC</span>,<span class="number">0xA1</span>,<span class="number">0xA9</span>,<span class="number">0xFE</span>,<span class="number">0x80</span>,<span class="number">0xA5</span>,<span class="number">0xA2</span>,<span class="number">0xB9</span>,<span class="number">0xB4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">13</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,str[i]^<span class="number">0xcc</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//W3lc0me2Linux</span></span><br></pre></td></tr></table></figure><p>flag <code>W3lc0me2Linux</code></p><h2 id="Re200-壶中的大银河-Easy"><a href="#Re200-壶中的大银河-Easy" class="headerlink" title="Re200 (壶中的大银河~Easy~)"></a>Re200 (壶中的大银河~Easy~)</h2><p>然后后面这几题就真的学到很多东西了</p><p>这题提示着linux signal机制</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zpsotlsyy0l.jpg" alt="1"></p><p>ida看到main函数很简单，主要有alarm、pause函数</p><p>注意在gdb调试中，默认alarm信号是不传进程序的，会导致程序阻塞在pause的地方</p><p>学习了一轮signal机制，知道了这么一回事</p><p>signal函数 void (*<em>signal</em>(int signo, void (*handler)(int)))(int);</p><p>在接受到signo的信号后，会跳转到第二个参数（一个函数指针）去处理</p><p>这里主程序是发出了alarm的信号</p><p>ida中搜了一下signal，就能发现这个函数</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/2_zpsymyo3nut.jpg" alt="2"></p><p>跳转到handler里面</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/3_zps9emx6l1o.jpg" alt="3"></p><p>然后查看各个地址，0x8049B40中获得奇怪的字符串一个</p><p>写个程序就跑出来了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> cmp[] = <span class="string">"8BVXznh]z^VXdAfC&#125;PgE"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> rel[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i &amp; <span class="number">1</span>)&#123;</span><br><span class="line">rel[i] = cmp[i] ^ rel[<span class="number">0</span>];</span><br><span class="line"> &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">rel[i] = cmp[i] ^ <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,rel[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag: <code>1s_is_also_important</code></p><h2 id="Re250-蓬莱的玉枝"><a href="#Re250-蓬莱的玉枝" class="headerlink" title="Re250 (蓬莱的玉枝)"></a>Re250 (蓬莱的玉枝)</h2><p>也是一个winGUI</p><p>跟之前同样道理，定位到关键函数，用ida查看</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zpsft4yihgp.jpg" alt="1"></p><p>这个函数非常简单！而且Seed是写死的，rand()每次运行程序都一样</p><p>那么思路就是获得0x0041c010的数据，写个程序跑出来</p><p>嗯……然后出来一堆奇怪的东西，所以这样不对吧</p><p>然后用OD调试，发现长度27，到这里会有判断……</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/2_zpsw8ig4y8g.jpg" alt="2"></p><p>又是累一点下个断点一次次跑然后出结果2333333</p><p>后来再想其实那个程序为什么会不对呢，有可能在某个函数对那块空间处理了一下</p><p>在OD中看那块地址空间果然跟原来的不一样了</p><p>后来果然找到了那个函数</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/3_zpsnjjgio1s.jpg" alt="3"></p><p>咦……IsDebuggerPresent()函数</p><p>如果检测到在调试模式下变换出来的字符串是错误的</p><p>结果我就发现……用OD调试时IsDebuggerPresent()函数返回的是非！厉害了OD</p><p>同时用ida调试了一下，出来的是非0值，检测到在调试，再修改下程序，就跑出来了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//char ch[] = &#123;0x17,0x14,0xE7,0x83,0xA4,0x63,0xAC,0x91,0xCB,0xC5,0x42,0x4A,0x8B,0x5B,0x9D,0x93,5,0x98,0x20,0xB1,0x29,0xC1,0x8C,0x53,0x92,0x8D,0x36&#125;; //source</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch[] = &#123;<span class="number">0x12</span>,<span class="number">0x11</span>,<span class="number">0xE2</span>,<span class="number">0x86</span>,<span class="number">0xA1</span>,<span class="number">0x66</span>,<span class="number">0xA9</span>,<span class="number">0x94</span>,<span class="number">0xCE</span>,<span class="number">0xC0</span>,<span class="number">0x47</span>,<span class="number">0x4F</span>,<span class="number">0x8E</span>,<span class="number">0x5E</span>,<span class="number">0x98</span>,<span class="number">0x96</span>,<span class="number">0x9D</span>,<span class="number">0x00</span>,<span class="number">0x25</span>,<span class="number">0xB4</span>,<span class="number">0x2C</span>,<span class="number">0xC4</span>,<span class="number">0x89</span>,<span class="number">0x56</span>,<span class="number">0x97</span>,<span class="number">0x88</span>,<span class="number">0x33</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char ch[] = &#123;0x1E,0x1D,0xEE,0x8A,0xAD,0x6A,0xA5,0x98,0xC2,0xCC,0x4B,0x43,0x82,0x52,0x94,0x9A,0x91,0x0C,0x29,0xB8,0x20,0xC8,0x85,0x5A,0x9B,0x84,0x3F&#125;; //wrong</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">srand(<span class="number">17</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">27</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,(ch[i] ^ (rand() % <span class="number">0xFF</span>u)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LCTF&#123;learn_more_think_more&#125;</span></span><br></pre></td></tr></table></figure><p><code>LCTF{learn_more_think_more}</code></p><h2 id="Re350-永遠の春夢"><a href="#Re350-永遠の春夢" class="headerlink" title="Re350 (永遠の春夢)"></a>Re350 (永遠の春夢)</h2><p>嗯……做的时候提示还没出来</p><p>分析出来后成就感满满的啊噢！</p><p>这个比较麻烦我就直接用ida调试了，先看主操作函数</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zpsuyqxpzmu.jpg" alt="1"></p><p>关键就是在sub_401621函数中了</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/2_zpshtql795o.jpg" alt="2"></p><p>刚开始就懵逼的发现前面有个异或的操作，后面有个a1(a4)这特么是个啥！</p><p>然后再前面传入的第一个参数一直分不清到底是数据还是程序</p><p>a2的长度刚好就是a1地址中数据的长度</p><p>这时看看汇编代码</p><p>看到一个call eax</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/3_zpswwklg0cu.jpg" alt="3"></p><p>所以那就是个函数咯</p><p>那前面异或？这是就想到动态自修改了</p><p>调试中看到这段汇编代码，这个就用不了f5了，直接阅读吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">.text:00401584 push    ebp</span><br><span class="line">.text:00401584 sub_401584 endp ; sp-analysis failed</span><br><span class="line">.text:00401584</span><br><span class="line">.text:00401585 mov     ebp, esp</span><br><span class="line">.text:00401587 mov     eax, [ebp+8]</span><br><span class="line">.text:0040158A mov     eax, ds:dword_40EA40[eax*4]</span><br><span class="line">.text:00401591 shl     eax, 4</span><br><span class="line">.text:00401594 movzx   edx, al</span><br><span class="line">.text:00401597 mov     eax, [ebp+8]</span><br><span class="line">.text:0040159A mov     eax, ds:dword_40EA40[eax*4]</span><br><span class="line">.text:004015A1 shr     eax, 4</span><br><span class="line">.text:004015A4 and     eax, 0Fh</span><br><span class="line">.text:004015A7 or      eax, edx</span><br><span class="line">.text:004015A9 movzx   edx, al</span><br><span class="line">.text:004015AC mov     eax, [ebp+8]</span><br><span class="line">.text:004015AF mov     ds:dword_40EA40[eax*4], edx</span><br><span class="line">.text:004015B6 mov     eax, [ebp+8]</span><br><span class="line">.text:004015B9 mov     eax, dword_40A020[eax*4]</span><br><span class="line">.text:004015C0 lea     ecx, [eax+30h]</span><br><span class="line">.text:004015C3 mov     edx, 80808081h</span><br><span class="line">.text:004015C8 mov     eax, ecx</span><br><span class="line">.text:004015CA mul     edx</span><br><span class="line">.text:004015CC mov     eax, edx</span><br><span class="line">.text:004015CE shr     eax, 7</span><br><span class="line">.text:004015D1 mov     edx, eax</span><br><span class="line">.text:004015D3 shl     edx, 8</span><br><span class="line">.text:004015D6 sub     edx, eax</span><br><span class="line">.text:004015D8 mov     eax, ecx</span><br><span class="line">.text:004015DA sub     eax, edx</span><br><span class="line">.text:004015DC mov     edx, [ebp+8]</span><br><span class="line">.text:004015DF mov     dword_40A020[edx*4], eax</span><br><span class="line">.text:004015E6 mov     eax, 0</span><br><span class="line">.text:004015EB pop     ebp</span><br><span class="line">.text:004015EC retn</span><br></pre></td></tr></table></figure><p>大致就是每次取ds:dword_40EA40的值中的8位字符数据低四位与高四位交换一下</p><p>再把dword_40A020中的数据进行一点处理，这里似乎是取模？</p><p>然后结合外部f5出来的代码可以猜想对输入字符串都进行这个操作了</p><p>然后是第二个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.text:004015ED push    ebp                             ; DATA XREF: sub_4014C8+8Do</span><br><span class="line">.text:004015EE mov     ebp, esp</span><br><span class="line">.text:004015F0 sub     esp, 10h</span><br><span class="line">.text:004015F3 mov     eax, [ebp+8]</span><br><span class="line">.text:004015F6 mov     eax, ds:dword_40EA40[eax*4]</span><br><span class="line">.text:004015FD mov     [ebp-4], eax</span><br><span class="line">.text:00401600 xor     dword ptr [ebp-4], 55h</span><br><span class="line">.text:00401604 mov     eax, [ebp+8]</span><br><span class="line">.text:00401607 mov     eax, dword_40A020[eax*4]</span><br><span class="line">.text:0040160E cmp     eax, [ebp-4]</span><br><span class="line">.text:00401611 jz      short loc_40161A</span><br><span class="line">.text:00401613 mov     eax, 0</span><br><span class="line">.text:00401618 jmp     short locret_40161F</span><br></pre></td></tr></table></figure><p>很简单的异或一下，然后比较</p><p>所以就可以写程序跑了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> chr[] = &#123;<span class="number">0x61</span>,<span class="number">0x31</span>,<span class="number">0xdf</span>,<span class="number">1</span>,<span class="number">0xb2</span>,<span class="number">0x30</span>,<span class="number">0x51</span>,<span class="number">0x31</span>,<span class="number">0x70</span>,<span class="number">0x93</span>,<span class="number">0x32</span>,<span class="number">0x70</span>,<span class="number">0xd2</span>,<span class="number">0xa2</span>,<span class="number">0x33</span>,<span class="number">0x93</span>,<span class="number">0xe1</span>,<span class="number">0xd2</span>,<span class="number">0xe2</span>,<span class="number">0x17</span>,<span class="number">0x52</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> chr2[<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">21</span>;i++)&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> d1 = chr[i] + <span class="number">0x30</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> e1 = d1*<span class="number">0x80808081</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> e2 = e1&gt;&gt;<span class="number">32</span>;</span><br><span class="line">e2 = e2&gt;&gt;<span class="number">7</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> e3 = e2&lt;&lt;<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">chr2[i] = d1-(e3-e2);</span><br><span class="line">chr2[i] = chr2[i]^<span class="number">0x55</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tmp = chr2[i];</span><br><span class="line"><span class="keyword">int</span> tmp2 = (tmp&lt;&lt;<span class="number">4</span>) &amp; <span class="number">0xff</span>;<span class="comment">//获取低四位</span></span><br><span class="line"><span class="keyword">int</span> tmp3 = (tmp&gt;&gt;<span class="number">4</span>) &amp; <span class="number">0xf</span>; <span class="comment">//获取高四位</span></span><br><span class="line">chr2[i] = tmp2^tmp3;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">21</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,chr2[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为前面没分析出来mul 0x80808081的作用，所以就直接强行模拟了</p><p>后来看这结合上下代码似乎是一个取模的操作</p><p>跑出来结果</p><p><code>LCTF{SMC_is_excited!}</code></p><p>Excited!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WriteUp比赛完就写了= =结果我拖到现在才整理发上来&lt;br&gt;mini-lctf是校内入门赛啊……&lt;br&gt;真正的dalao们都出题去了，没有参加，于是给我单挑打了个第五出来&lt;br&gt;然而因为没有新生在队内所以不给我奖品咯[掀桌!]&lt;br&gt;好歹我还ak了re和mobile！(虽然都是入门级的)&lt;br&gt;好咯，不管你，post一下题目的打包&lt;br&gt;链接: &lt;a href=&quot;https://pan.baidu.com/s/1pKXa2rp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1pKXa2rp&lt;/a&gt; 密码: gnbq&lt;/p&gt;
    
    </summary>
    
      <category term="WriteUp" scheme="http://blog.2bsitcker.cn/categories/WriteUp/"/>
    
    
      <category term="mini-lctf" scheme="http://blog.2bsitcker.cn/tags/mini-lctf/"/>
    
  </entry>
  
  <entry>
    <title>pwnhub无用的电脑_丧心病狂_writeup</title>
    <link href="http://blog.2bsitcker.cn/2017/02/20/pwnhub%E6%97%A0%E7%94%A8%E7%9A%84%E7%94%B5%E8%84%91-%E4%B8%A7%E5%BF%83%E7%97%85%E7%8B%82-writeup/"/>
    <id>http://blog.2bsitcker.cn/2017/02/20/pwnhub无用的电脑-丧心病狂-writeup/</id>
    <published>2017-02-20T11:44:17.000Z</published>
    <updated>2017-11-22T11:50:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛地址是 pwnhub.cn</p><p>也可以下载我上传的writeup来看</p><p>弱渣用的解法超奇怪233333333</p><p>然而居然还被选上了官方推荐</p><p>接下来看看正文吧</p><hr><p>得到pwnhub.jar包，先跑起看看</p><p><code>java -jar pwnhub.jar</code></p><p><img src="/2017/02/20/pwnhub无用的电脑-丧心病狂-writeup/1_zpsoqcgrhb4.jpg" alt="1"></p><a id="more"></a><p>jar包好说，拖进jd-gui看看</p><p>结果出来一堆疑似MD5处理的类名，除了最后五个小写的类能正常反编译外，其余1500+个都不能正常打开</p><p><img src="/2017/02/20/pwnhub无用的电脑-丧心病狂-writeup/2_zpsuj7qfqed.jpg" alt="2"></p><p>反编译看出，先验证code，code的长度为4，接着就是验证code的类</p><p>对应<code>a4a89174426b40307102e165374ab8ab.class</code>这个类，里面的验证代码略复杂</p><p>因为code只有4位，copy一下代码暴力跑下就出来了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pwnhub.ConvertClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] word = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789"</span>.toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> a : word)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> b : word)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> c : word)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> d : word)&#123;</span><br><span class="line">String tmp = String.valueOf(a)+String.valueOf(b)+String.valueOf(c)+String.valueOf(d);</span><br><span class="line"><span class="keyword">if</span>(ConvertClass.b(tmp))&#123;</span><br><span class="line">System.out.println(tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//result: mdzz</span></span><br></pre></td></tr></table></figure><p>跑出来code = mdzz</p><p><img src="/2017/02/20/pwnhub无用的电脑-丧心病狂-writeup/3_zps5y4x3irm.jpg" alt="3"></p><p>接下来就是输入flag验证了</p><p>跟踪到这个类中，发现通过java的反射机制加载checkFlag这个类</p><p><img src="/2017/02/20/pwnhub无用的电脑-丧心病狂-writeup/4_zpsxigy8ngg.jpg" alt="4"></p><p>跟踪进去<code>mc</code>这个类，就能看到其中重载了<code>ClassLoader</code>中<code>findClass</code>这个函数</p><p>通过MD5转换类名，找到对应类文件，并通过AES解密，秘钥写死，解密后获取对应的类</p><p><img src="/2017/02/20/pwnhub无用的电脑-丧心病狂-writeup/5_zpsx0ahwwsx.jpg" alt="5"></p><hr><p><img src="/2017/02/20/pwnhub无用的电脑-丧心病狂-writeup/6_zpsmh1ezgq6.jpg" alt="6"></p><p>把类copy出来，并且在最后添加一段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//output the decoded file</span></span><br><span class="line"><span class="comment">//********************************my operation**************************</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">FileOutputStream out = <span class="keyword">new</span> FileOutputStream(name);</span><br><span class="line">out.write(en, <span class="number">0</span>, en.length);</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//********************************finish********************************</span></span><br></pre></td></tr></table></figure><p>获取解密后的类</p><p>获得的checkFlag类</p><p><img src="/2017/02/20/pwnhub无用的电脑-丧心病狂-writeup/7_zpskalmrgjm.jpg" alt="7"></p><p>把b和flag的字节码传进函数中获取返回值验证</p><p>前面有个<code>load.l()</code>的函数，<code>cadqa</code>也不知道是什么类</p><p>但猜想可通过同样原理从一堆加密的class中把原来的类解密出来</p><p>获得cadqa类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GetClass mClass = <span class="keyword">new</span> GetClass();</span><br><span class="line">Class&lt;?&gt; clazz = mClass.findClass(<span class="string">"pwnhub.cadqa"</span>);</span><br></pre></td></tr></table></figure><p><img src="/2017/02/20/pwnhub无用的电脑-丧心病狂-writeup/8_zpslvqunj48.jpg" alt="8"></p><p>y变换出下一个类名，同样通过反射机制获取下一个类</p><p>注意到对b[2]进行了一次异或操作，并继续传进下一个函数</p><p>同理copy出来获取下一个类<code>pwnhub.wmyvg</code></p><p>会发现下一个类中也是差不多同样的东西</p><p>一直传递进去</p><p>好，所以换种思路，可以在开始重载的findClass函数中加进输出类名的信息，替换掉原jar包中的类，则可以输出逐步加载的类名</p><p>这里注意之前提到过的<code>load.l()</code>函数，通过findClass找到该类发现方法中把所有的类都加载了一遍</p><p>所以还需要做出一点修改</p><p><img src="/2017/02/20/pwnhub无用的电脑-丧心病狂-writeup/9_zpslsnlymka.jpg" alt="9"></p><p><strong>思路是：</strong> 修改checkFlag类，注释掉<code>load.l()</code>语句，注意到传进的<code>int[] b</code>在每次迭代的类中都对其中一位进行异或，每个中间的类只对该数组进行了修改，别的都无关，我们直接在最后输出最终的b数组的值，不必关注当中的过程。</p><p>修改checkFlag</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pwnhub;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">checkFlag</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// load.l();</span></span><br><span class="line">BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">System.out.println(<span class="string">"ok, now give me flag"</span>);</span><br><span class="line">System.out.print(<span class="string">"flag:"</span>);</span><br><span class="line">String flag = strin.readLine();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] b = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] result = cadqa.i(flag.getBytes(), b);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"Array b: "</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : b)&#123;</span><br><span class="line">System.out.print(i + <span class="string">", "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] tFlag = &#123; <span class="number">16</span>, <span class="number">37</span>, -<span class="number">54</span>, -<span class="number">1</span>, -<span class="number">36</span>, -<span class="number">34</span>, -<span class="number">83</span>, -<span class="number">64</span>, <span class="number">39</span>, -<span class="number">112</span>, <span class="number">5</span>, -<span class="number">85</span>, <span class="number">61</span>, <span class="number">108</span>, -<span class="number">4</span>, <span class="number">13</span>, <span class="number">85</span>, -<span class="number">22</span>, -<span class="number">116</span>, -<span class="number">77</span>, <span class="number">31</span>, <span class="number">21</span>, -<span class="number">64</span>, <span class="number">13</span>, -<span class="number">86</span>, -<span class="number">48</span>, -<span class="number">86</span>, -<span class="number">115</span>, -<span class="number">28</span>, -<span class="number">82</span>, <span class="number">48</span>, -<span class="number">15</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (Arrays.equals(result, tFlag)) &#123;</span><br><span class="line">System.out.println(<span class="string">"pwnhub&#123;flag:"</span> + flag + <span class="string">"&#125;"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"try again"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为该类是通过AES解密出来的，替换原jar包中的该类必须先把类加密</p><p>对于java中AES的方法非常简单，因为秘钥已写死，只要把重写的findClass中的代码拷贝出来</p><p>因为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ENCRYPT_MODE = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DECRYPT_MODE = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>所以在<code>cipher.init(2, skey, iv);</code>改为<code>cipher.init(1, skey, iv);</code>就加密出来了</p><p>输出加密后的类就可以替换原jar包中的类了</p><p>跑一下修改后的jar包</p><p>得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">no passcode, no game</span><br><span class="line">code:mdzz</span><br><span class="line">classname: checkFlag</span><br><span class="line">ok, now give me flag</span><br><span class="line">flag:aaaaaa</span><br><span class="line">classname: cadqa</span><br><span class="line">classname: wmyvg</span><br><span class="line">classname: fthyl</span><br><span class="line">classname: knklz</span><br><span class="line">classname: swygk</span><br><span class="line">classname: xbzvx</span><br><span class="line">classname: bstqh</span><br><span class="line">classname: lmvxj</span><br><span class="line">classname: iaclf</span><br><span class="line">classname: civgj</span><br><span class="line">classname: jzlnc</span><br><span class="line">classname: wpzay</span><br><span class="line">classname: yhusg</span><br><span class="line">classname: qrleu</span><br><span class="line">classname: ryugj</span><br><span class="line">classname: krvkv</span><br><span class="line">classname: rysks</span><br><span class="line">classname: mcnky</span><br><span class="line">classname: pqxex</span><br><span class="line">classname: hfdxm</span><br><span class="line">classname: bhlro</span><br><span class="line">classname: ghxxg</span><br><span class="line">classname: kxgjk</span><br><span class="line">classname: ugeia</span><br><span class="line">classname: gxizy</span><br><span class="line">classname: whpuy</span><br><span class="line">classname: itjyb</span><br><span class="line">classname: dypmm</span><br><span class="line">classname: vphxl</span><br><span class="line">classname: xmopd</span><br><span class="line">classname: bkarw</span><br><span class="line">classname: xwver</span><br><span class="line">classname: qujkq</span><br><span class="line">classname: jwzgx</span><br><span class="line">classname: lpodr</span><br><span class="line">classname: dfhcv</span><br><span class="line">classname: uxxlh</span><br><span class="line">classname: qkznr</span><br><span class="line">classname: jovrk</span><br><span class="line">classname: plmbn</span><br><span class="line">classname: dnmoe</span><br><span class="line">classname: lxmpw</span><br><span class="line">classname: mvhaz</span><br><span class="line">classname: ekuyu</span><br><span class="line">classname: zqggw</span><br><span class="line">classname: oxodn</span><br><span class="line">classname: tjoao</span><br><span class="line">classname: ytpej</span><br><span class="line">classname: yjubo</span><br><span class="line">classname: igjiv</span><br><span class="line">classname: aaisy</span><br><span class="line">classname: uvrut</span><br><span class="line">classname: krdya</span><br><span class="line">classname: rmrou</span><br><span class="line">classname: tknxh</span><br><span class="line">classname: gzmbz</span><br><span class="line">classname: dkqcg</span><br><span class="line">classname: zrhvo</span><br><span class="line">classname: biosp</span><br><span class="line">classname: ddbfz</span><br><span class="line">classname: tdozs</span><br><span class="line">classname: klfqs</span><br><span class="line">classname: wtwpi</span><br><span class="line">classname: icpbr</span><br><span class="line">classname: angkn</span><br><span class="line">classname: vjsqq</span><br><span class="line">classname: lazus</span><br><span class="line">classname: hjtcg</span><br><span class="line">classname: jwuvs</span><br><span class="line">classname: eximk</span><br><span class="line">classname: qotct</span><br><span class="line">classname: prlhh</span><br><span class="line">classname: ictnz</span><br><span class="line">classname: vdwrx</span><br><span class="line">classname: akkks</span><br><span class="line">classname: mtyvu</span><br><span class="line">classname: ummng</span><br><span class="line">classname: zltaa</span><br><span class="line">classname: ptqro</span><br><span class="line">classname: bdoqu</span><br><span class="line">classname: iaedu</span><br><span class="line">classname: ekjiz</span><br><span class="line">classname: wzvnt</span><br><span class="line">classname: uxxzo</span><br><span class="line">classname: oshbc</span><br><span class="line">classname: jfwqa</span><br><span class="line">classname: ubvnq</span><br><span class="line">classname: itlpk</span><br><span class="line">classname: wwigc</span><br><span class="line">classname: hnvij</span><br><span class="line">classname: ctavm</span><br><span class="line">classname: gsqdi</span><br><span class="line">classname: wqeuz</span><br><span class="line">classname: rjfog</span><br><span class="line">classname: fkviz</span><br><span class="line">classname: bjbwm</span><br><span class="line">classname: gefao</span><br><span class="line">classname: hllei</span><br><span class="line">classname: wmolw</span><br><span class="line">classname: herqz</span><br><span class="line">classname: dlfnv</span><br><span class="line">classname: frsu</span><br><span class="line">try again</span><br></pre></td></tr></table></figure><p>看待迭代了这么多个类……</p><p>并且跑出了最终b数组的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> b[] = &#123;<span class="number">187632156</span>, <span class="number">874189824</span>, <span class="number">254150144</span>, <span class="number">924386310</span>, <span class="number">121057538</span>, <span class="number">840500228</span>, <span class="number">389160971</span>, <span class="number">907870729</span>, <span class="number">389426184</span>, <span class="number">973875457</span>, <span class="number">372376604</span>, <span class="number">707731490</span>, <span class="number">1043334948</span>, <span class="number">439222784</span>, <span class="number">876216579</span>, <span class="number">455999525</span>&#125;;</span><br></pre></td></tr></table></figure><p>查看最后加载的两个类，类<code>dlfnv</code>是跟上面的一样的迭代类</p><p>最后的<code>frsu</code>是最终的解密类</p><p>同理获得解出来的类，得到一段复杂的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">byte</span>[] b(<span class="keyword">byte</span>[] flag, <span class="keyword">int</span>[] bInt) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">int</span>[] constantArr1 = &#123; <span class="number">943331329</span>, <span class="number">170788368</span>, <span class="number">1008414755</span>, <span class="number">187049985</span>, <span class="number">1010368540</span>, <span class="number">220604441</span>, <span class="number">940377620</span>, <span class="number">255209728</span>,</span><br><span class="line"><span class="number">689771012</span>, <span class="number">221709344</span>, <span class="number">957157408</span>, <span class="number">892536332</span>, <span class="number">722417666</span>, <span class="number">1026621720</span>, <span class="number">655302664</span>, <span class="number">890966315</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr2 = &#123; <span class="number">1847617210</span>, <span class="number">1994607775</span>, <span class="number">1906299266</span>, <span class="number">1443467998</span>, <span class="number">1753140052</span>, <span class="number">782026644</span>, <span class="number">743697037</span>, <span class="number">1500018807</span>,</span><br><span class="line"><span class="number">1015162722</span>, <span class="number">141403752</span>, <span class="number">1057274701</span>, <span class="number">1430471406</span>, <span class="number">921937966</span>, <span class="number">1419221067</span>, <span class="number">962664086</span>, <span class="number">2133607337</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">bInt[i] ^= constantArr2[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>[] mergeBInt = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">mergeBInt[i] = constantArr1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">mergeBInt[(i + <span class="number">16</span>)] = bInt[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">byte</span>[] flagcp = flag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] constantArr3 = &#123; <span class="number">16843776</span>, <span class="number">0</span>, <span class="number">65536</span>, <span class="number">16843780</span>, <span class="number">16842756</span>, <span class="number">66564</span>, <span class="number">4</span>, <span class="number">65536</span>, <span class="number">1024</span>, <span class="number">16843776</span>, <span class="number">16843780</span>, <span class="number">1024</span>,</span><br><span class="line"><span class="number">16778244</span>, <span class="number">16842756</span>, <span class="number">16777216</span>, <span class="number">4</span>, <span class="number">1028</span>, <span class="number">16778240</span>, <span class="number">16778240</span>, <span class="number">66560</span>, <span class="number">66560</span>, <span class="number">16842752</span>, <span class="number">16842752</span>, <span class="number">16778244</span>,</span><br><span class="line"><span class="number">65540</span>, <span class="number">16777220</span>, <span class="number">16777220</span>, <span class="number">65540</span>, <span class="number">0</span>, <span class="number">1028</span>, <span class="number">66564</span>, <span class="number">16777216</span>, <span class="number">65536</span>, <span class="number">16843780</span>, <span class="number">4</span>, <span class="number">16842752</span>, <span class="number">16843776</span>,</span><br><span class="line"><span class="number">16777216</span>, <span class="number">16777216</span>, <span class="number">1024</span>, <span class="number">16842756</span>, <span class="number">65536</span>, <span class="number">66560</span>, <span class="number">16777220</span>, <span class="number">1024</span>, <span class="number">4</span>, <span class="number">16778244</span>, <span class="number">66564</span>, <span class="number">16843780</span>, <span class="number">65540</span>,</span><br><span class="line"><span class="number">16842752</span>, <span class="number">16778244</span>, <span class="number">16777220</span>, <span class="number">1028</span>, <span class="number">66564</span>, <span class="number">16843776</span>, <span class="number">1028</span>, <span class="number">16778240</span>, <span class="number">16778240</span>, <span class="number">0</span>, <span class="number">65540</span>, <span class="number">66560</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">16842756</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr4 = &#123; -<span class="number">2146402272</span>, -<span class="number">2147450880</span>, <span class="number">32768</span>, <span class="number">1081376</span>, <span class="number">1048576</span>, <span class="number">32</span>, -<span class="number">2146435040</span>, -<span class="number">2147450848</span>, -<span class="number">2147483616</span>,</span><br><span class="line">-<span class="number">2146402272</span>, -<span class="number">2146402304</span>, Integer.MIN_VALUE, -<span class="number">2147450880</span>, <span class="number">1048576</span>, <span class="number">32</span>, -<span class="number">2146435040</span>, <span class="number">1081344</span>, <span class="number">1048608</span>,</span><br><span class="line">-<span class="number">2147450848</span>, <span class="number">0</span>, Integer.MIN_VALUE, <span class="number">32768</span>, <span class="number">1081376</span>, -<span class="number">2146435072</span>, <span class="number">1048608</span>, -<span class="number">2147483616</span>, <span class="number">0</span>, <span class="number">1081344</span>, <span class="number">32800</span>,</span><br><span class="line">-<span class="number">2146402304</span>, -<span class="number">2146435072</span>, <span class="number">32800</span>, <span class="number">0</span>, <span class="number">1081376</span>, -<span class="number">2146435040</span>, <span class="number">1048576</span>, -<span class="number">2147450848</span>, -<span class="number">2146435072</span>,</span><br><span class="line">-<span class="number">2146402304</span>, <span class="number">32768</span>, -<span class="number">2146435072</span>, -<span class="number">2147450880</span>, <span class="number">32</span>, -<span class="number">2146402272</span>, <span class="number">1081376</span>, <span class="number">32</span>, <span class="number">32768</span>, Integer.MIN_VALUE,</span><br><span class="line"><span class="number">32800</span>, -<span class="number">2146402304</span>, <span class="number">1048576</span>, -<span class="number">2147483616</span>, <span class="number">1048608</span>, -<span class="number">2147450848</span>, -<span class="number">2147483616</span>, <span class="number">1048608</span>, <span class="number">1081344</span>, <span class="number">0</span>,</span><br><span class="line">-<span class="number">2147450880</span>, <span class="number">32800</span>, Integer.MIN_VALUE, -<span class="number">2146435040</span>, -<span class="number">2146402272</span>, <span class="number">1081344</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr5 = &#123; <span class="number">520</span>, <span class="number">134349312</span>, <span class="number">0</span>, <span class="number">134348808</span>, <span class="number">134218240</span>, <span class="number">0</span>, <span class="number">131592</span>, <span class="number">134218240</span>, <span class="number">131080</span>, <span class="number">134217736</span>, <span class="number">134217736</span>,</span><br><span class="line"><span class="number">131072</span>, <span class="number">134349320</span>, <span class="number">131080</span>, <span class="number">134348800</span>, <span class="number">520</span>, <span class="number">134217728</span>, <span class="number">8</span>, <span class="number">134349312</span>, <span class="number">512</span>, <span class="number">131584</span>, <span class="number">134348800</span>, <span class="number">134348808</span>,</span><br><span class="line"><span class="number">131592</span>, <span class="number">134218248</span>, <span class="number">131584</span>, <span class="number">131072</span>, <span class="number">134218248</span>, <span class="number">8</span>, <span class="number">134349320</span>, <span class="number">512</span>, <span class="number">134217728</span>, <span class="number">134349312</span>, <span class="number">134217728</span>,</span><br><span class="line"><span class="number">131080</span>, <span class="number">520</span>, <span class="number">131072</span>, <span class="number">134349312</span>, <span class="number">134218240</span>, <span class="number">0</span>, <span class="number">512</span>, <span class="number">131080</span>, <span class="number">134349320</span>, <span class="number">134218240</span>, <span class="number">134217736</span>, <span class="number">512</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">134348808</span>, <span class="number">134218248</span>, <span class="number">131072</span>, <span class="number">134217728</span>, <span class="number">134349320</span>, <span class="number">8</span>, <span class="number">131592</span>, <span class="number">131584</span>, <span class="number">134217736</span>, <span class="number">134348800</span>, <span class="number">134218248</span>,</span><br><span class="line"><span class="number">520</span>, <span class="number">134348800</span>, <span class="number">131592</span>, <span class="number">8</span>, <span class="number">134348808</span>, <span class="number">131584</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr6 = &#123; <span class="number">8396801</span>, <span class="number">8321</span>, <span class="number">8321</span>, <span class="number">128</span>, <span class="number">8396928</span>, <span class="number">8388737</span>, <span class="number">8388609</span>, <span class="number">8193</span>, <span class="number">0</span>, <span class="number">8396800</span>, <span class="number">8396800</span>, <span class="number">8396929</span>, <span class="number">129</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">8388736</span>, <span class="number">8388609</span>, <span class="number">1</span>, <span class="number">8192</span>, <span class="number">8388608</span>, <span class="number">8396801</span>, <span class="number">128</span>, <span class="number">8388608</span>, <span class="number">8193</span>, <span class="number">8320</span>, <span class="number">8388737</span>, <span class="number">1</span>, <span class="number">8320</span>, <span class="number">8388736</span>, <span class="number">8192</span>,</span><br><span class="line"><span class="number">8396928</span>, <span class="number">8396929</span>, <span class="number">129</span>, <span class="number">8388736</span>, <span class="number">8388609</span>, <span class="number">8396800</span>, <span class="number">8396929</span>, <span class="number">129</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8396800</span>, <span class="number">8320</span>, <span class="number">8388736</span>, <span class="number">8388737</span>,</span><br><span class="line"><span class="number">1</span>, <span class="number">8396801</span>, <span class="number">8321</span>, <span class="number">8321</span>, <span class="number">128</span>, <span class="number">8396929</span>, <span class="number">129</span>, <span class="number">1</span>, <span class="number">8192</span>, <span class="number">8388609</span>, <span class="number">8193</span>, <span class="number">8396928</span>, <span class="number">8388737</span>, <span class="number">8193</span>, <span class="number">8320</span>,</span><br><span class="line"><span class="number">8388608</span>, <span class="number">8396801</span>, <span class="number">128</span>, <span class="number">8388608</span>, <span class="number">8192</span>, <span class="number">8396928</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr7 = &#123; <span class="number">256</span>, <span class="number">34078976</span>, <span class="number">34078720</span>, <span class="number">1107296512</span>, <span class="number">524288</span>, <span class="number">256</span>, <span class="number">1073741824</span>, <span class="number">34078720</span>, <span class="number">1074266368</span>, <span class="number">524288</span>,</span><br><span class="line"><span class="number">33554688</span>, <span class="number">1074266368</span>, <span class="number">1107296512</span>, <span class="number">1107820544</span>, <span class="number">524544</span>, <span class="number">1073741824</span>, <span class="number">33554432</span>, <span class="number">1074266112</span>, <span class="number">1074266112</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">1073742080</span>, <span class="number">1107820800</span>, <span class="number">1107820800</span>, <span class="number">33554688</span>, <span class="number">1107820544</span>, <span class="number">1073742080</span>, <span class="number">0</span>, <span class="number">1107296256</span>, <span class="number">34078976</span>, <span class="number">33554432</span>,</span><br><span class="line"><span class="number">1107296256</span>, <span class="number">524544</span>, <span class="number">524288</span>, <span class="number">1107296512</span>, <span class="number">256</span>, <span class="number">33554432</span>, <span class="number">1073741824</span>, <span class="number">34078720</span>, <span class="number">1107296512</span>, <span class="number">1074266368</span>,</span><br><span class="line"><span class="number">33554688</span>, <span class="number">1073741824</span>, <span class="number">1107820544</span>, <span class="number">34078976</span>, <span class="number">1074266368</span>, <span class="number">256</span>, <span class="number">33554432</span>, <span class="number">1107820544</span>, <span class="number">1107820800</span>, <span class="number">524544</span>,</span><br><span class="line"><span class="number">1107296256</span>, <span class="number">1107820800</span>, <span class="number">34078720</span>, <span class="number">0</span>, <span class="number">1074266112</span>, <span class="number">1107296256</span>, <span class="number">524544</span>, <span class="number">33554688</span>, <span class="number">1073742080</span>, <span class="number">524288</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">1074266112</span>, <span class="number">34078976</span>, <span class="number">1073742080</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr8 = &#123; <span class="number">536870928</span>, <span class="number">541065216</span>, <span class="number">16384</span>, <span class="number">541081616</span>, <span class="number">541065216</span>, <span class="number">16</span>, <span class="number">541081616</span>, <span class="number">4194304</span>, <span class="number">536887296</span>, <span class="number">4210704</span>,</span><br><span class="line"><span class="number">4194304</span>, <span class="number">536870928</span>, <span class="number">4194320</span>, <span class="number">536887296</span>, <span class="number">536870912</span>, <span class="number">16400</span>, <span class="number">0</span>, <span class="number">4194320</span>, <span class="number">536887312</span>, <span class="number">16384</span>, <span class="number">4210688</span>,</span><br><span class="line"><span class="number">536887312</span>, <span class="number">16</span>, <span class="number">541065232</span>, <span class="number">541065232</span>, <span class="number">0</span>, <span class="number">4210704</span>, <span class="number">541081600</span>, <span class="number">16400</span>, <span class="number">4210688</span>, <span class="number">541081600</span>, <span class="number">536870912</span>,</span><br><span class="line"><span class="number">536887296</span>, <span class="number">16</span>, <span class="number">541065232</span>, <span class="number">4210688</span>, <span class="number">541081616</span>, <span class="number">4194304</span>, <span class="number">16400</span>, <span class="number">536870928</span>, <span class="number">4194304</span>, <span class="number">536887296</span>, <span class="number">536870912</span>,</span><br><span class="line"><span class="number">16400</span>, <span class="number">536870928</span>, <span class="number">541081616</span>, <span class="number">4210688</span>, <span class="number">541065216</span>, <span class="number">4210704</span>, <span class="number">541081600</span>, <span class="number">0</span>, <span class="number">541065232</span>, <span class="number">16</span>, <span class="number">16384</span>, <span class="number">541065216</span>,</span><br><span class="line"><span class="number">4210704</span>, <span class="number">16384</span>, <span class="number">4194320</span>, <span class="number">536887312</span>, <span class="number">0</span>, <span class="number">541081600</span>, <span class="number">536870912</span>, <span class="number">4194320</span>, <span class="number">536887312</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr9 = &#123; <span class="number">2097152</span>, <span class="number">69206018</span>, <span class="number">67110914</span>, <span class="number">0</span>, <span class="number">2048</span>, <span class="number">67110914</span>, <span class="number">2099202</span>, <span class="number">69208064</span>, <span class="number">69208066</span>, <span class="number">2097152</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">67108866</span>, <span class="number">2</span>, <span class="number">67108864</span>, <span class="number">69206018</span>, <span class="number">2050</span>, <span class="number">67110912</span>, <span class="number">2099202</span>, <span class="number">2097154</span>, <span class="number">67110912</span>, <span class="number">67108866</span>, <span class="number">69206016</span>,</span><br><span class="line"><span class="number">69208064</span>, <span class="number">2097154</span>, <span class="number">69206016</span>, <span class="number">2048</span>, <span class="number">2050</span>, <span class="number">69208066</span>, <span class="number">2099200</span>, <span class="number">2</span>, <span class="number">67108864</span>, <span class="number">2099200</span>, <span class="number">67108864</span>, <span class="number">2099200</span>,</span><br><span class="line"><span class="number">2097152</span>, <span class="number">67110914</span>, <span class="number">67110914</span>, <span class="number">69206018</span>, <span class="number">69206018</span>, <span class="number">2</span>, <span class="number">2097154</span>, <span class="number">67108864</span>, <span class="number">67110912</span>, <span class="number">2097152</span>, <span class="number">69208064</span>,</span><br><span class="line"><span class="number">2050</span>, <span class="number">2099202</span>, <span class="number">69208064</span>, <span class="number">2050</span>, <span class="number">67108866</span>, <span class="number">69208066</span>, <span class="number">69206016</span>, <span class="number">2099200</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">69208066</span>, <span class="number">0</span>, <span class="number">2099202</span>,</span><br><span class="line"><span class="number">69206016</span>, <span class="number">2048</span>, <span class="number">67108866</span>, <span class="number">67110912</span>, <span class="number">2048</span>, <span class="number">2097154</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr10 = &#123; <span class="number">268439616</span>, <span class="number">4096</span>, <span class="number">262144</span>, <span class="number">268701760</span>, <span class="number">268435456</span>, <span class="number">268439616</span>, <span class="number">64</span>, <span class="number">268435456</span>, <span class="number">262208</span>, <span class="number">268697600</span>,</span><br><span class="line"><span class="number">268701760</span>, <span class="number">266240</span>, <span class="number">268701696</span>, <span class="number">266304</span>, <span class="number">4096</span>, <span class="number">64</span>, <span class="number">268697600</span>, <span class="number">268435520</span>, <span class="number">268439552</span>, <span class="number">4160</span>, <span class="number">266240</span>, <span class="number">262208</span>,</span><br><span class="line"><span class="number">268697664</span>, <span class="number">268701696</span>, <span class="number">4160</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">268697664</span>, <span class="number">268435520</span>, <span class="number">268439552</span>, <span class="number">266304</span>, <span class="number">262144</span>, <span class="number">266304</span>, <span class="number">262144</span>,</span><br><span class="line"><span class="number">268701696</span>, <span class="number">4096</span>, <span class="number">64</span>, <span class="number">268697664</span>, <span class="number">4096</span>, <span class="number">266304</span>, <span class="number">268439552</span>, <span class="number">64</span>, <span class="number">268435520</span>, <span class="number">268697600</span>, <span class="number">268697664</span>, <span class="number">268435456</span>,</span><br><span class="line"><span class="number">262144</span>, <span class="number">268439616</span>, <span class="number">0</span>, <span class="number">268701760</span>, <span class="number">262208</span>, <span class="number">268435520</span>, <span class="number">268697600</span>, <span class="number">268439552</span>, <span class="number">268439616</span>, <span class="number">0</span>, <span class="number">268701760</span>,</span><br><span class="line"><span class="number">266240</span>, <span class="number">266240</span>, <span class="number">4160</span>, <span class="number">4160</span>, <span class="number">262208</span>, <span class="number">268435456</span>, <span class="number">268701696</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> flagLen = flagcp.length;</span><br><span class="line"><span class="keyword">int</span> var72 = flagLen % <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (var72 != <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"try again"</span>);</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">var72 = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] var21 = <span class="keyword">new</span> <span class="keyword">int</span>[var72];</span><br><span class="line"><span class="keyword">byte</span>[] var22 = <span class="keyword">new</span> <span class="keyword">byte</span>[flagLen];</span><br><span class="line"><span class="keyword">int</span> var23 = flagLen / <span class="number">8</span>; <span class="comment">//2</span></span><br><span class="line"><span class="keyword">int</span> var24 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (var24 &lt; var23) &#123;</span><br><span class="line"><span class="keyword">int</span> var25 = var24 * <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> var26 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//二进制&#123;flag[0]flag[1]flag[2]flag[3]&#125;构成var21[0]</span></span><br><span class="line"><span class="comment">//二进制&#123;flag[4]flag[5]flag[6]flag[7]&#125;构成var21[1]</span></span><br><span class="line"><span class="keyword">while</span> (var26 &lt; <span class="number">2</span>) &#123;</span><br><span class="line">var21[var26] = ((flagcp[(var25 + var26 * <span class="number">4</span>)] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span></span><br><span class="line">| (flagcp[(var25 + var26 * <span class="number">4</span> + <span class="number">1</span>)] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span> | (flagcp[(var25 + var26 * <span class="number">4</span> + <span class="number">2</span>)] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span></span><br><span class="line">| flagcp[(var25 + var26 * <span class="number">4</span> + <span class="number">3</span>)] &amp; <span class="number">0xFF</span>);</span><br><span class="line">var26++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> var31 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> var29 = var21[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> var28 = var21[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> var27 = (var29 &gt;&gt;&gt; <span class="number">4</span> ^ var28) &amp; <span class="number">0xF0F0F0F</span>;</span><br><span class="line">var28 ^= var27;</span><br><span class="line">var29 ^= var27 &lt;&lt; <span class="number">4</span>;</span><br><span class="line">var27 = (var29 &gt;&gt;&gt; <span class="number">16</span> ^ var28) &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">var28 ^= var27;</span><br><span class="line">var29 ^= var27 &lt;&lt; <span class="number">16</span>;</span><br><span class="line">var27 = (var28 &gt;&gt;&gt; <span class="number">2</span> ^ var29) &amp; <span class="number">0x33333333</span>;</span><br><span class="line">var29 ^= var27;</span><br><span class="line">var28 ^= var27 &lt;&lt; <span class="number">2</span>;</span><br><span class="line">var27 = (var28 &gt;&gt;&gt; <span class="number">8</span> ^ var29) &amp; <span class="number">0xFF00FF</span>;</span><br><span class="line">var29 ^= var27;</span><br><span class="line">var28 ^= var27 &lt;&lt; <span class="number">8</span>;</span><br><span class="line">var28 = var28 &lt;&lt; <span class="number">1</span> | var28 &gt;&gt;&gt; <span class="number">31</span> &amp; <span class="number">0x1</span>;</span><br><span class="line">var27 = (var29 ^ var28) &amp; <span class="number">0xAAAAAAAA</span>;</span><br><span class="line">var29 ^= var27;</span><br><span class="line">var28 ^= var27;</span><br><span class="line">var29 = var29 &lt;&lt; <span class="number">1</span> | var29 &gt;&gt;&gt; <span class="number">31</span> &amp; <span class="number">0x1</span>;</span><br><span class="line"><span class="keyword">int</span> var30 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (var30 &lt; <span class="number">8</span>) &#123;</span><br><span class="line">var27 = var28 &lt;&lt; <span class="number">28</span> | var28 &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">var27 ^= mergeBInt[(var31++)];</span><br><span class="line">var26 = constantArr9[(var27 &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr7[(var27 &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr5[(var27 &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr3[(var27 &gt;&gt;&gt; <span class="number">24</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var27 = var28 ^ mergeBInt[(var31++)];</span><br><span class="line">var26 |= constantArr10[(var27 &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr8[(var27 &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr6[(var27 &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr4[(var27 &gt;&gt;&gt; <span class="number">24</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var29 ^= var26;</span><br><span class="line">var27 = var29 &lt;&lt; <span class="number">28</span> | var29 &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">var27 ^= mergeBInt[(var31++)];</span><br><span class="line">var26 = constantArr9[(var27 &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr7[(var27 &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr5[(var27 &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr3[(var27 &gt;&gt;&gt; <span class="number">24</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var27 = var29 ^ mergeBInt[(var31++)];</span><br><span class="line">var26 |= constantArr10[(var27 &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr8[(var27 &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr6[(var27 &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr4[(var27 &gt;&gt;&gt; <span class="number">24</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var28 ^= var26;</span><br><span class="line">var30++;</span><br><span class="line">&#125;</span><br><span class="line">var28 = var28 &lt;&lt; <span class="number">31</span> | var28 &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">var27 = (var29 ^ var28) &amp; <span class="number">0xAAAAAAAA</span>;</span><br><span class="line">var29 ^= var27;</span><br><span class="line">var28 ^= var27;</span><br><span class="line">var29 = var29 &lt;&lt; <span class="number">31</span> | var29 &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">var27 = (var29 &gt;&gt;&gt; <span class="number">8</span> ^ var28) &amp; <span class="number">0xFF00FF</span>;</span><br><span class="line">var28 ^= var27;</span><br><span class="line">var29 ^= var27 &lt;&lt; <span class="number">8</span>;</span><br><span class="line">var27 = (var29 &gt;&gt;&gt; <span class="number">2</span> ^ var28) &amp; <span class="number">0x33333333</span>;</span><br><span class="line">var28 ^= var27;</span><br><span class="line">var29 ^= var27 &lt;&lt; <span class="number">2</span>;</span><br><span class="line">var27 = (var28 &gt;&gt;&gt; <span class="number">16</span> ^ var29) &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">var29 ^= var27;</span><br><span class="line">var28 ^= var27 &lt;&lt; <span class="number">16</span>;</span><br><span class="line">var27 = (var28 &gt;&gt;&gt; <span class="number">4</span> ^ var29) &amp; <span class="number">0xF0F0F0F</span>;</span><br><span class="line">var29 ^= var27;</span><br><span class="line">var28 ^= var27 &lt;&lt; <span class="number">4</span>;</span><br><span class="line">var21[<span class="number">0</span>] = var28;</span><br><span class="line">var21[<span class="number">1</span>] = var29;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> var32 = var24 * <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> var33 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//var22[0]var22[1]var22[2]var22[3]由var21[0]拆解得，对应变换后的flag[0]flag[1]flag[2]flag[3]</span></span><br><span class="line"><span class="keyword">while</span> (var33 &lt; <span class="number">2</span>) &#123;</span><br><span class="line">var22[(var32 + var33 * <span class="number">4</span>)] = ((<span class="keyword">byte</span>) (var21[var33] &gt;&gt;&gt; <span class="number">24</span>));</span><br><span class="line">var22[(var32 + var33 * <span class="number">4</span> + <span class="number">1</span>)] = ((<span class="keyword">byte</span>) (var21[var33] &gt;&gt;&gt; <span class="number">16</span>));</span><br><span class="line">var22[(var32 + var33 * <span class="number">4</span> + <span class="number">2</span>)] = ((<span class="keyword">byte</span>) (var21[var33] &gt;&gt;&gt; <span class="number">8</span>));</span><br><span class="line">var22[(var32 + var33 * <span class="number">4</span> + <span class="number">3</span>)] = ((<span class="keyword">byte</span>) var21[var33]);</span><br><span class="line">var33++;</span><br><span class="line">&#125;</span><br><span class="line">var24++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">byte</span> var66 = var22[(var22.length - <span class="number">1</span>)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> var22;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己反推太复杂了，猜测是某种加密的算法</p><p>搜索关键的字符，发现这是<code>DESEngine的代码</code></p><p>通过搜索得到的代码得知</p><p>通过<code>generateWorkKey</code>获得秘钥，加密秘钥与解密秘钥的关系非常大</p><p>秘钥为len = 32的int数组，其中</p><p><code>decKey[i] = encKey[30-i], decKey[i+1] = encKey[30-i+1], i=0,2,4,6...14</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] constantArr1 = &#123; <span class="number">943331329</span>, <span class="number">170788368</span>, <span class="number">1008414755</span>, <span class="number">187049985</span>, <span class="number">1010368540</span>, <span class="number">220604441</span>, <span class="number">940377620</span>, <span class="number">255209728</span>, <span class="number">689771012</span>, <span class="number">221709344</span>, <span class="number">957157408</span>, <span class="number">892536332</span>, <span class="number">722417666</span>, <span class="number">1026621720</span>, <span class="number">655302664</span>, <span class="number">890966315</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr2 = &#123; <span class="number">1847617210</span>, <span class="number">1994607775</span>, <span class="number">1906299266</span>, <span class="number">1443467998</span>, <span class="number">1753140052</span>, <span class="number">782026644</span>, <span class="number">743697037</span>, <span class="number">1500018807</span>, <span class="number">1015162722</span>, <span class="number">141403752</span>, <span class="number">1057274701</span>, <span class="number">1430471406</span>, <span class="number">921937966</span>, <span class="number">1419221067</span>, <span class="number">962664086</span>, <span class="number">2133607337</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">bInt[i] ^= constantArr2[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>[] mergeBInt = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">mergeBInt[i] = constantArr1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">mergeBInt[(i + <span class="number">16</span>)] = bInt[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------add-------</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = mergeBInt[<span class="number">30</span>-i];</span><br><span class="line">mergeBInt[<span class="number">30</span>-i] = mergeBInt[i];</span><br><span class="line">mergeBInt[i] = tmp;</span><br><span class="line"></span><br><span class="line">tmp = mergeBInt[<span class="number">30</span>-i+<span class="number">1</span>];</span><br><span class="line">mergeBInt[<span class="number">30</span>-i+<span class="number">1</span>] = mergeBInt[i+<span class="number">1</span>];</span><br><span class="line">mergeBInt[i+<span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----add finish---</span></span><br></pre></td></tr></table></figure><p>前面加入一段代码就能变为解密的函数</p><p>这里还有点得注意的，因为在传进函数后有这么一段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">bInt[i] ^= constantArr2[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以输出的b数组是异或后的结果。</p><p>解密时先异或回来再传进函数解密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b[] = &#123;<span class="number">187632156</span>, <span class="number">874189824</span>, <span class="number">254150144</span>, <span class="number">924386310</span>, <span class="number">121057538</span>, <span class="number">840500228</span>, <span class="number">389160971</span>, <span class="number">907870729</span>, <span class="number">389426184</span>, <span class="number">973875457</span>, <span class="number">372376604</span>, <span class="number">707731490</span>, <span class="number">1043334948</span>, <span class="number">439222784</span>, <span class="number">876216579</span>, <span class="number">455999525</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] constantArr2 = &#123; <span class="number">1847617210</span>, <span class="number">1994607775</span>, <span class="number">1906299266</span>, <span class="number">1443467998</span>, <span class="number">1753140052</span>, <span class="number">782026644</span>, <span class="number">743697037</span>, <span class="number">1500018807</span>, <span class="number">1015162722</span>, <span class="number">141403752</span>, <span class="number">1057274701</span>, <span class="number">1430471406</span>, <span class="number">921937966</span>, <span class="number">1419221067</span>, <span class="number">962664086</span>, <span class="number">2133607337</span> &#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.length;i++)&#123;</span><br><span class="line">b[i] ^= constantArr2[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String flag = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">byte</span>[] tFlag = &#123;<span class="number">16</span>, <span class="number">37</span>, -<span class="number">54</span>, -<span class="number">1</span>, -<span class="number">36</span>, -<span class="number">34</span>, -<span class="number">83</span>, -<span class="number">64</span>, <span class="number">39</span>, -<span class="number">112</span>, <span class="number">5</span>, -<span class="number">85</span>, <span class="number">61</span>, <span class="number">108</span>, -<span class="number">4</span>, <span class="number">13</span>, <span class="number">85</span>, -<span class="number">22</span>, -<span class="number">116</span>, -<span class="number">77</span>, <span class="number">31</span>, <span class="number">21</span>, -<span class="number">64</span>, <span class="number">13</span>, -<span class="number">86</span>, -<span class="number">48</span>, -<span class="number">86</span>, -<span class="number">115</span>, -<span class="number">28</span>, -<span class="number">82</span>, <span class="number">48</span>, -<span class="number">15</span> &#125;;</span><br><span class="line"><span class="keyword">byte</span>[] result = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">result = frsu.decode(tFlag, b);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;result.length;i++)&#123;</span><br><span class="line">System.out.print(result[i] + <span class="string">", "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">flag = <span class="keyword">new</span> String(result);</span><br><span class="line">System.out.println(flag);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即可跑出<code>3c5ab398eb3bcb8e829126f5ae60442b</code></p><p>并验证成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">no passcode, no game</span><br><span class="line">code:mdzz</span><br><span class="line">ok, now give me flag</span><br><span class="line">flag:3c5ab398eb3bcb8e829126f5ae60442b</span><br><span class="line">pwnhub&#123;flag:3c5ab398eb3bcb8e829126f5ae60442b&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比赛地址是 pwnhub.cn&lt;/p&gt;
&lt;p&gt;也可以下载我上传的writeup来看&lt;/p&gt;
&lt;p&gt;弱渣用的解法超奇怪233333333&lt;/p&gt;
&lt;p&gt;然而居然还被选上了官方推荐&lt;/p&gt;
&lt;p&gt;接下来看看正文吧&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;得到pwnhub.jar包，先跑起看看&lt;/p&gt;
&lt;p&gt;&lt;code&gt;java -jar pwnhub.jar&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/02/20/pwnhub无用的电脑-丧心病狂-writeup/1_zpsoqcgrhb4.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="WriteUp" scheme="http://blog.2bsitcker.cn/categories/WriteUp/"/>
    
    
      <category term="逆向" scheme="http://blog.2bsitcker.cn/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="java" scheme="http://blog.2bsitcker.cn/tags/java/"/>
    
      <category term="pwnhub" scheme="http://blog.2bsitcker.cn/tags/pwnhub/"/>
    
  </entry>
  
  <entry>
    <title>各种编码区别及内存映射</title>
    <link href="http://blog.2bsitcker.cn/2017/02/17/%E5%90%84%E7%A7%8D%E7%BC%96%E7%A0%81%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84/"/>
    <id>http://blog.2bsitcker.cn/2017/02/17/各种编码区别及内存映射/</id>
    <published>2017-02-17T10:10:08.000Z</published>
    <updated>2017-11-22T11:52:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>整件事起因是一个程序（这条死咸鱼还欠着两篇文章没有写）</p><p>室友问道为啥一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"中"</span>;</span><br><span class="line">str.getBytes().length;</span><br></pre></td></tr></table></figure><p>结果是3，而不是我们当时常见的一个中文对应2字节</p><p>本质上的原因是因为他编辑器用了utf-8编码</p><p>后来又看到这么一段话</p><blockquote><p>“计算机内存中，统一使用Unicode编码，需要保存或者传输时，转换成UTF8编码。”</p></blockquote><p>然后我就懵逼了</p><p>对于编码方面的知识我的理解是混乱的，因此写篇blog理清一下思路</p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h3 id="1-编码规范的发展"><a href="#1-编码规范的发展" class="headerlink" title="1. 编码规范的发展"></a>1. 编码规范的发展</h3><p>常见编码有<code>ASCII</code>，<code>GBK</code>，<code>Unicode</code>，<code>UTF-8</code>，<code>GB2312</code>等等等</p><p>所以有什么区别呢？</p><p>推荐一篇浅显易懂的文章</p><p><a href="http://zhihu.com/question/23374078/answer/69732605" target="_blank" rel="noopener">Unicode 和 UTF-8 有何区别？ - 回答作者: 于洋 </a></p><h6 id="本身答主也是转发的，并不清楚原文最初发表在哪"><a href="#本身答主也是转发的，并不清楚原文最初发表在哪" class="headerlink" title="本身答主也是转发的，并不清楚原文最初发表在哪"></a>本身答主也是转发的，并不清楚原文最初发表在哪</h6><p>所以，总结一下</p><ul><li><p><strong>ASCII</strong> (American Standard Code for Information Interchange)</p><p>学过计算机的人都知道 ASCII 码，总共有 128 个，用一个字节的低 7 位表示，0~31 是控制字符如换行回车删除等；32~126 是打印字符，可以通过键盘输入并且能够显示出来。</p></li><li><p><strong>Unicode</strong> (Universal Coded)</p><p>每个字符占两字节，解决不同国家间字符编码不相容的问题。但这样的话对于多英文字符的其大小就会变大。</p></li></ul><ul><li><p><strong>ISO-8859-1</strong></p><p>128 个字符显然是不够用的，于是 ISO 组织在 ASCII 码基础上又制定了一些列标准用来扩展 ASCII 编码，它们是 ISO-8859-1~ISO-8859-15，其中 ISO-8859-1 涵盖了大多数西欧语言字符，所有应用的最广泛。ISO-8859-1 仍然是单字节编码，它总共能表示 256 个字符。</p></li><li><p><strong>GB2312</strong></p><p>它的全称是《信息交换用汉字编码字符集 基本集》，它是双字节编码，总的编码范围是 A1-F7，其中从 A1-A9 是符号区，总共包含 682 个符号，从 B0-F7 是汉字区，包含 6763 个汉字。</p></li><li><p><strong>GBK</strong> (Guojia Biaozhun Kuozhan)</p><p>全称叫《汉字内码扩展规范》，是国家技术监督局为 windows95 所制定的新的汉字内码规范，它的出现是为了扩展 GB2312，加入更多的汉字，它的编码范围是 8140~FEFE（去掉 XX7F）总共有 23940 个码位，它能表示 21003 个汉字，它的编码是和 GB2312 兼容的，也就是说用 GB2312 编码的汉字可以用 GBK 来解码，并且不会有乱码。</p></li><li><p><strong>GB18030</strong></p><p>全称是《信息交换用汉字编码字符集》，是我国的强制标准，它可能是单字节、双字节或者四字节编码，它的编码与 GB2312 编码兼容，这个虽然是国家标准，但是实际应用系统中使用的并不广泛。</p></li><li><p><strong>UTF-16</strong></p><p>说到 UTF 必须要提到 Unicode（Universal Code 统一码），ISO 试图想创建一个全新的超语言字典，世界上所有的语言都可以通过这本字典来相互翻译。可想而知这个字典是多么的复杂，关于 Unicode 的详细规范可以参考相应文档。Unicode 是 Java 和 XML 的基础，下面详细介绍 Unicode 在计算机中的存储形式。</p><p>UTF-16 具体定义了 Unicode 字符在计算机中存取方法。UTF-16 用两个字节来表示 Unicode 转化格式，这个是定长的表示方法，不论什么字符都可以用两个字节表示，两个字节是 16 个 bit，所以叫 UTF-16。UTF-16 表示字符非常方便，每两个字节表示一个字符，这个在字符串操作时就大大简化了操作，这也是 Java 以 UTF-16 作为内存的字符存储格式的一个很重要的原因。</p></li><li><p><strong>UTF-8</strong></p><p>UTF-16 统一采用两个字节表示一个字符，虽然在表示上非常简单方便，但是也有其缺点，有很大一部分字符用一个字节就可以表示的现在要两个字节表示，存储空间放大了一倍，在现在的网络带宽还非常有限的今天，这样会增大网络传输的流量，而且也没必要。而 UTF-8 采用了一种变长技术，每个编码区域有不同的字码长度。不同类型的字符可以是由 1~6 个字节组成。</p><p>UTF-8 有以下编码规则：</p></li></ul><ol><li>如果一个字节，最高位（第 8 位）为 0，表示这是一个 ASCII 字符（00 - 7F）。可见，所有 ASCII 编码已经是 UTF-8 了。</li><li>如果一个字节，以 11 开头，连续的 1 的个数暗示这个字符的字节数，例如：110xxxxx 代表它是双字节 UTF-8 字符的首字节。</li><li>如果一个字节，以 10 开始，表示它不是首字节，需要向前查找才能得到当前字符的首字节。</li></ol><p>在搜索资料过程看到一个解释得非常清楚的文章，介绍在Java中的中文编码问题，也把编码本身说得很清晰了。</p><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/</a></p><h3 id="二、问题"><a href="#二、问题" class="headerlink" title="二、问题"></a>二、问题</h3><p>但其实，我当时最不理解的是看到的一句话</p><blockquote><p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码</p></blockquote><p>感觉需要理解的是，Unicode是一种字符集，而UTF-8是一种字符编码</p><p>可以看一下这篇博文<a href="http://cenalulu.github.io/linux/character-encoding/" target="_blank" rel="noopener">http://cenalulu.github.io/linux/character-encoding/</a></p><p>UTF-8跟Unicode之间通过一定关系转化，而UTF-8并没有涵盖整个Unicode字库</p><p>感觉目前很多说法都有问题，说某个文件用了Unicode编码</p><p>例如在记事本中，然而如果我用Unicode保存，在别的编辑器(vscode, sublime)上显示出来的是UTF-16 LE</p><p>Unicode是一种字符集，并不是一种字符编码，这样理解才对</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整件事起因是一个程序（这条死咸鱼还欠着两篇文章没有写）&lt;/p&gt;
&lt;p&gt;室友问道为啥一个&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String str = &lt;span class=&quot;string&quot;&gt;&quot;中&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str.getBytes().length;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果是3，而不是我们当时常见的一个中文对应2字节&lt;/p&gt;
&lt;p&gt;本质上的原因是因为他编辑器用了utf-8编码&lt;/p&gt;
&lt;p&gt;后来又看到这么一段话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“计算机内存中，统一使用Unicode编码，需要保存或者传输时，转换成UTF8编码。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后我就懵逼了&lt;/p&gt;
&lt;p&gt;对于编码方面的知识我的理解是混乱的，因此写篇blog理清一下思路&lt;/p&gt;
    
    </summary>
    
      <category term="Study_Note" scheme="http://blog.2bsitcker.cn/categories/Study-Note/"/>
    
    
      <category term="编码" scheme="http://blog.2bsitcker.cn/tags/%E7%BC%96%E7%A0%81/"/>
    
      <category term="utf-8" scheme="http://blog.2bsitcker.cn/tags/utf-8/"/>
    
      <category term="unicode" scheme="http://blog.2bsitcker.cn/tags/unicode/"/>
    
  </entry>
  
  <entry>
    <title>2016minilctf-Forensics500-Angel Beats!</title>
    <link href="http://blog.2bsitcker.cn/2017/01/28/2016minilctf-Forensics500-Angel-Beats/"/>
    <id>http://blog.2bsitcker.cn/2017/01/28/2016minilctf-Forensics500-Angel-Beats/</id>
    <published>2017-01-28T14:04:06.000Z</published>
    <updated>2017-11-22T11:51:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>mini-lctf是我们校内的一个小型ctf比赛，在2016年12月初持续一周……</p><p>对，大家都注意到了现在马上到2月了233333，新年快乐~</p><p>嗯，因为当时这题并没有做出来</p><p>马格鸡虽然我太菜然而还是ak了入门级的mobile和re，还排名第五（因为dalao们都是出题人23333）</p><p>然而因为我单挑没有带学弟玩居然不给我奖品，好气啊！</p><p>赛后wp里re和mobile我还是写的比较详细的，然而这时回老家过年没网，迟点改改结合出题人wp再发</p><a id="more"></a><h1 id="0x01-题目分析"><a href="#0x01-题目分析" class="headerlink" title="0x01 题目分析"></a>0x01 题目分析</h1><p>赛后补做这题，Forensics500，500分学到的真不是一般的多啊= =</p><p>信息只有一张图片，就先瞎搞一波</p><p>二进制看不到东西，调各种对比度之类的也看不到</p><p>用Stegsolve瞎搞一下，会发现在最低位隐藏了个链接</p><p><img src="/2017/01/28/2016minilctf-Forensics500-Angel-Beats/1_zps0e3vfsp7.jpg" alt="1"></p><p>然后下了一个700+MB的压缩包……</p><p>压缩包里有一个<code>.dockerenv</code>的文件，所以其实这是一个docker镜像（我也是看wp才懂的，捂脸痛哭）</p><p>嗯，然后我看了一波docker才能做下去。。。</p><p>有关docker的介绍请自行搜索233333，或等待一下我下一篇通俗的介绍233333</p><h1 id="0x02-瞎折腾docker找flag"><a href="#0x02-瞎折腾docker找flag" class="headerlink" title="0x02 瞎折腾docker找flag"></a>0x02 瞎折腾docker找flag</h1><p>嗯，我在我Ubuntu中配好了docker的环境，然后用</p><p><code>docker import Angel_Beats.tar minilctf:f500</code></p><p>导入镜像</p><p><img src="/2017/01/28/2016minilctf-Forensics500-Angel-Beats/2_zpsnscqcod1.jpg" alt="2"></p><p>通过</p><p><code>docker run -t -i minilctf:f500 /bin/bash</code></p><p>通过bash操作系统</p><p>在home目录中看到flag文件</p><p>内容<code>J1tVVOxbNhkyQTuScJMqhg==</code></p><p>然而base64解码出来是乱码= =</p><p>继续探索</p><p>在系统中看到有这么几个可执行程序</p><p><img src="/2017/01/28/2016minilctf-Forensics500-Angel-Beats/3_zpsm7xyzjfb.jpg" alt="3"></p><p>mysql数据库带密码进不去，运行httpd后发现挂了个博客</p><p>在配置文件<code>/etc/httpd/conf/httpd.conf</code>中看到网站的目录为<code>/srv/http/</code></p><p>从配置文件中可以看到数据库root的密码</p><p><img src="/2017/01/28/2016minilctf-Forensics500-Angel-Beats/4_zps92vpayg2.jpg" alt="4"></p><p><code>username: root</code></p><p><code>password:asdfjkljkladf</code></p><p>在数据库看到这个key</p><p><img src="/2017/01/28/2016minilctf-Forensics500-Angel-Beats/5_zpskdckxwax.jpg" alt="5"></p><p>这个应该就是密钥了，猜测AES加密（其实常见的AES、DES啥的都试试就能解出了）</p><p>最普通的ECB方式</p><p>结合开头的flag，解出</p><p><code>,Y0ur-Be2ts!}</code></p><p>……</p><p>次奥，这才只有一半的flag</p><p>继续看数据库</p><p><img src="/2017/01/28/2016minilctf-Forensics500-Angel-Beats/6_zpsabncuuwt.jpg" alt="6"></p><p>看到只有admin一个用户</p><p>这个hash没怎么了解过，搜了一波还不太懂</p><p>然后wp说可以是弱口令攻击</p><p><code>username: admin</code></p><p><code>password: admin888</code></p><p>于是登陆进去后搜寻一波能看到一篇私密的文章<code>flag</code>!!!</p><p><img src="/2017/01/28/2016minilctf-Forensics500-Angel-Beats/7_zpssakfb9ow.jpg" alt="7"></p><p>组合起来得到flag</p><p><code>LCTF{My_Soul,Y0ur-Be2ts!}</code></p><h6 id="写起来似乎很简单……但做着真尼玛复杂啊！！！"><a href="#写起来似乎很简单……但做着真尼玛复杂啊！！！" class="headerlink" title="写起来似乎很简单……但做着真尼玛复杂啊！！！"></a>写起来似乎很简单……但做着真尼玛复杂啊！！！</h6>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;mini-lctf是我们校内的一个小型ctf比赛，在2016年12月初持续一周……&lt;/p&gt;
&lt;p&gt;对，大家都注意到了现在马上到2月了233333，新年快乐~&lt;/p&gt;
&lt;p&gt;嗯，因为当时这题并没有做出来&lt;/p&gt;
&lt;p&gt;马格鸡虽然我太菜然而还是ak了入门级的mobile和re，还排名第五（因为dalao们都是出题人23333）&lt;/p&gt;
&lt;p&gt;然而因为我单挑没有带学弟玩居然不给我奖品，好气啊！&lt;/p&gt;
&lt;p&gt;赛后wp里re和mobile我还是写的比较详细的，然而这时回老家过年没网，迟点改改结合出题人wp再发&lt;/p&gt;
    
    </summary>
    
      <category term="WriteUp" scheme="http://blog.2bsitcker.cn/categories/WriteUp/"/>
    
    
      <category term="Forensics" scheme="http://blog.2bsitcker.cn/tags/Forensics/"/>
    
      <category term="minilctf" scheme="http://blog.2bsitcker.cn/tags/minilctf/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu的apache2配置PHP不能运行问题</title>
    <link href="http://blog.2bsitcker.cn/2017/01/21/Ubuntu%E7%9A%84apache2%E9%85%8D%E7%BD%AEPHP%E4%B8%8D%E8%83%BD%E8%BF%90%E8%A1%8C%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.2bsitcker.cn/2017/01/21/Ubuntu的apache2配置PHP不能运行问题/</id>
    <published>2017-01-21T05:41:16.000Z</published>
    <updated>2017-01-21T07:46:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写过了，在总算考完试并且获得一堆烂成绩后，是时候要回归到学习自己的兴趣点</p><p>并且填补一下基础</p><p>首先记录一下这个问题吧</p><h3 id="Ubuntu中配置好apache2后php代码没执行"><a href="#Ubuntu中配置好apache2后php代码没执行" class="headerlink" title="Ubuntu中配置好apache2后php代码没执行"></a>Ubuntu中配置好apache2后php代码没执行</h3><p>首先我是准备在虚拟机本地搭个sqli-labs来学习sql injection</p><p>因为在之前也搭过，所以应该没什么大问题</p><p>结果，就出现了一开始点setup databases时没有反应，即没有任何输出，但其他html元素均能正常显示</p><p>我这里配置是</p><p><code>ubuntu gnome 15.10</code></p><p><code>php5</code></p><p><code>apache2</code></p><p><code>mysql</code></p><p>简单来说，就是PHP代码根本就没有运行</p><p>此时查看网页源码也能看到php代码，其实还有另外一种情况是网页源码中根本就没有显示php代码</p><p>分类讨论下</p><p>ps：因为我没有学过多少web的内容，所以以下一些概念性的解释不一定正确，最好自己去搜一下，倘若有错误，还请指出。</p><ol><li><p><strong>网页源码根本看不到PHP代码</strong></p><p>这里我猜测是因为lamp没有装完整</p><p>首先，php要装上php-cgi，CGI<code>Common Gateway Interface</code>，通过这个借口，php程序可以对服务器和客户端交换信息做一些事情</p><p>另外，还有php-cli，这个是用于在命令行运行php脚本的</p><p>还有php-gd库，用于处理图像。在网站上GD库通常用来生成缩略图，或者用来对图片加水印，或者用来生成汉字验证码，或者对网站数据生成报表等。</p><p>另外，要链接数据库，还要装上相应的php的数据库支持，例如php-mysql</p><p>倘若还不能解决，可以参考一下这篇解答</p><p> <a href="http://stackoverflow.com/questions/3555681/why-are-my-php-files-showing-as-plain-text" target="_blank" rel="noopener">http://stackoverflow.com/questions/3555681/why-are-my-php-files-showing-as-plain-text</a></p><blockquote><p>You’ll need to add this to your server configuration:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .php</span><br></pre></td></tr></table></figure><blockquote><p>that is assuming you have installed php properly, which may not be the case since it doesn’t work where it normally would immediately after installing.</p><p>It is entirely possible that you’ll also have to add the php so/dll to your apache config using a <code>LoadModule</code> directive (usually in <code>httpd.conf</code>)</p></blockquote></li><li><p><strong>网页源码中能看到PHP代码</strong></p><p>这个就可以参考这篇解答了</p><p><a href="http://askubuntu.com/questions/451708/php-script-not-executing-on-apache-server" target="_blank" rel="noopener">http://askubuntu.com/questions/451708/php-script-not-executing-on-apache-server</a></p><blockquote><p>Typing:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2 php5 libapache2-mod-php5</span><br></pre></td></tr></table></figure><blockquote><p>will install everything you need and will start the apache server with support for PHP.</p><p>To verify that the php module is loaded, type:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a2query -m php5</span><br></pre></td></tr></table></figure><blockquote><p>if not enabled, then load with:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod php5</span><br></pre></td></tr></table></figure><blockquote><p>and restart apache:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><blockquote><p><strong>Update for php7.0, tested on Ubuntu 16.04 and 16.10</strong></p><p>Thanks to the comments, I update the answer for php7.</p><p>Install:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2 php7.0 libapache2-mod-php7.0</span><br></pre></td></tr></table></figure><blockquote><p>Verify:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a2query -m php7.0</span><br></pre></td></tr></table></figure><blockquote><p>Load:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod php7.0</span><br></pre></td></tr></table></figure><blockquote><p>Restart apache:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><p>这个原因似乎是因为apache安装后默认还缺一个php的支持库</p><p>因为我就是这个原因，按照上面安装了libapache2-mod-php5后，嗨呀，一切正常了</p></li></ol><p>在配置过程中，apache2的默认根目录是<code>/var/www/html</code>，并不是以前的<code>/var/www</code>，当然，这个可以到配置文件中进行设置。</p><p>为了测试php代码是否正常执行，可以通过最简单的一个php脚本测试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">phpinfo(); </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>因为我并没有学过php，对于web服务器的配置也一知半解，所以在这个过程耗费了我好多的时间</p><p>不过，感谢网上各种大牛的帮助，也是解决了这个问题。</p><hr><h6 id="假期别颓啊喂，好好学习！！！"><a href="#假期别颓啊喂，好好学习！！！" class="headerlink" title="假期别颓啊喂，好好学习！！！"></a>假期别颓啊喂，好好学习！！！</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没写过了，在总算考完试并且获得一堆烂成绩后，是时候要回归到学习自己的兴趣点&lt;/p&gt;
&lt;p&gt;并且填补一下基础&lt;/p&gt;
&lt;p&gt;首先记录一下这个问题吧&lt;/p&gt;
&lt;h3 id=&quot;Ubuntu中配置好apache2后php代码没执行&quot;&gt;&lt;a href=&quot;#Ubuntu中配置好ap
      
    
    </summary>
    
      <category term="Study_Note" scheme="http://blog.2bsitcker.cn/categories/Study-Note/"/>
    
    
      <category term="php" scheme="http://blog.2bsitcker.cn/tags/php/"/>
    
      <category term="apache2" scheme="http://blog.2bsitcker.cn/tags/apache2/"/>
    
  </entry>
  
  <entry>
    <title>数据库坑之记录</title>
    <link href="http://blog.2bsitcker.cn/2016/12/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9D%91%E4%B9%8B%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.2bsitcker.cn/2016/12/14/数据库坑之记录/</id>
    <published>2016-12-14T15:04:31.000Z</published>
    <updated>2017-11-22T11:52:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在忙各种神奇的大作业</p><ul><li>网络程序设计的聊天室</li><li>java的文件快速搜索工具</li><li>数据库学籍管理系统</li><li>数字图像的图像处理</li><li>排队论的建模分析</li></ul><p>神TM忙= =</p><p>期末真是九门功课同步学</p><p>这时涉及到数据库时遇到了一些坑，来总结下</p><p>数据库：Mysql</p><a id="more"></a><h2 id="网程大作业远程连接数据库时，连接不上"><a href="#网程大作业远程连接数据库时，连接不上" class="headerlink" title="网程大作业远程连接数据库时，连接不上"></a>网程大作业远程连接数据库时，连接不上</h2><p>这个首先要修改my.cnf文件，改bind-address  = 0.0.0.0</p><p>原来bind-address = localhost是不允许外部访问的</p><p>然后就是登陆的用户要允许远程登陆</p><p>再有一个坑就是！！！</p><p>腾讯云服务器默认安全组只开启22端口= =</p><p>到官网设置下安全组，不然你打死都不能远程连上数据库的</p><h2 id="数据库大作业批量导入数据"><a href="#数据库大作业批量导入数据" class="headerlink" title="数据库大作业批量导入数据"></a>数据库大作业批量导入数据</h2><p>这里用的是在win10中用load data local infile导入txt的数据</p><p>然后，他一直给我提示<code>Errcode: 2 - No such file or directory</code></p><p>各种谷歌、stackoverflow后都不出结果</p><p>首先是路径字符串中<code>\</code>要用<code>\\</code>，转义符嘛，都懂的</p><p>然后，还是打死都Errcode: 2</p><p>后来终于发现，因为我的路径中包含中文= =……</p><p>正确显示了，但蜜汁搜不到对应文件</p><p>然后就是路径中不含中文了，导入时给我报</p><p><code>Error Code: 1300. Invalid utf8 character string: &#39;ë&#39;</code></p><p>???尼克扬哦</p><p>这时我还不知道已经解决路径问题了</p><p>后来莫名想到这如果是路径没出问题，那就是内容出问题了</p><p>终于发现……数据是老师给的，包含中文</p><p>win下记事本这编码是GB2312……但读取是utf-8……</p><p>sublime打开……果然中文一堆乱码 : )</p><p>修改编码后……果然成功了woc</p><hr><h6 id="感谢mysql不杀之恩"><a href="#感谢mysql不杀之恩" class="headerlink" title="感谢mysql不杀之恩"></a>感谢mysql不杀之恩</h6>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在忙各种神奇的大作业&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络程序设计的聊天室&lt;/li&gt;
&lt;li&gt;java的文件快速搜索工具&lt;/li&gt;
&lt;li&gt;数据库学籍管理系统&lt;/li&gt;
&lt;li&gt;数字图像的图像处理&lt;/li&gt;
&lt;li&gt;排队论的建模分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;神TM忙= =&lt;/p&gt;
&lt;p&gt;期末真是九门功课同步学&lt;/p&gt;
&lt;p&gt;这时涉及到数据库时遇到了一些坑，来总结下&lt;/p&gt;
&lt;p&gt;数据库：Mysql&lt;/p&gt;
    
    </summary>
    
      <category term="Study_Note" scheme="http://blog.2bsitcker.cn/categories/Study-Note/"/>
    
    
      <category term="Mysql" scheme="http://blog.2bsitcker.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>汇编学习&amp;&amp;nasm使用&amp;&amp;调试</title>
    <link href="http://blog.2bsitcker.cn/2016/11/06/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0-nasm%E4%BD%BF%E7%94%A8-%E8%B0%83%E8%AF%95/"/>
    <id>http://blog.2bsitcker.cn/2016/11/06/汇编学习-nasm使用-调试/</id>
    <published>2016-11-06T14:35:24.000Z</published>
    <updated>2017-11-22T11:48:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了更好的做逆向，刚学了点汇编的知识，尽管在我们微机课上也会有教，但总有时会分心。而且，这些不自己实际操作下也是搞不懂的。</p><p>尽管在这之前我已近玩过一些逆向了，但更多的是单步调试，通过ida、OD等强大的功能飘过，一些细节并不清楚。所以必须要系统地学习汇编的知识。</p><p>这里我选择的书是王爽的《汇编语言(第三版)》，虽然这书讲的是8086的16位的汇编（啊喂，太过时了吧！），不过基本原理都是差不多的，既然那么多人推荐我也就不浪费时间在选择书上了。</p><h2 id="环境选择"><a href="#环境选择" class="headerlink" title="环境选择"></a>环境选择</h2><p>在王爽的书中，他教学使用的是masm，即是微软开发的汇编开发环境，然后通过dos下的debug来调试。</p><p>然而，debug这个调试器早在win7时已经没加入到windows系统中了</p><a id="more"></a><p>对于这个程序，描述是</p><blockquote><p>​    DOS Debug is an improved MS-DOS DEBUG command. There are two binaries available: the small and simple DEBUG.COM, which can debug DOS 16-bit real-mode applications only and DEBUGX.COM, which additionally can debug protected-mode DPMI applications, both 16-bit and 32-bit</p></blockquote><p>嗯……只能调试实模式下16位的程序和保护模式下16位、32位的程序……所以，要你何用！</p><p>然后就是masm了，masm只能在windows下用呀……而且看着感觉会略老旧（事实上微软是继续支持发展这个产品的），反正就是看着不想用。</p><p>这时我看到了nasm，这个一款基于80x86和x86-64平台的汇编语言编译程序，其设计初衷是为了实现编译器程序跨平台和模块化的特性。所以各平台都兼容的很好呀！关键是，他支持多种系统版本系统的文件生成，语法上还比masm简单……</p><p>以下是其支持输出的文件格式<img src="/2016/11/06/汇编学习-nasm使用-调试/outputFile_zpsudht7pkw.jpg" alt="outputFile"></p><p>关键我还不用往我windows下装软件，我直接在Ubuntu上apt-get install nasm就好了！</p><h2 id="使用nasm"><a href="#使用nasm" class="headerlink" title="使用nasm"></a>使用nasm</h2><p>首先我找了这么一段汇编代码，效果是输出Hello world!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">section .text                                                                                                                                   </span><br><span class="line">global main</span><br><span class="line">main:</span><br><span class="line">    mov eax,4;</span><br><span class="line">    mov ebx,1;</span><br><span class="line">    mov ecx,message;</span><br><span class="line">    mov edx,14;</span><br><span class="line">    int 80h;</span><br><span class="line">    mov eax,1;</span><br><span class="line">    int 80h;</span><br><span class="line">message:</span><br><span class="line">db &quot;Hello world!&quot;,0ah,0dh</span><br></pre></td></tr></table></figure><p>跟masm语法有点不一样，在masm定义段还有<code>XXX segment...XXX ends</code> <code>assume cs:XXX...end</code></p><p>而在这只需要一个<code>section .text</code>，意思我还不太懂。这里定义的global main即在汇编中定义的main函数。</p><p>nasm我测试了这几条命令，感觉常用也就这个组合了。</p><p><code>nasm -f elf32 test.asm -o test.o     %生成32位elf的.o文件</code></p><p><code>nasm -f win32 test.asm -o test32.o     %生成32位windows的.o文件</code></p><p><code>nasm -f win64 test.asm -o test64.o     %生成64位windows的.o文件</code></p><p>通过file查看输出格式 <img src="/2016/11/06/汇编学习-nasm使用-调试/fileType_zpsmo5ioh4y.jpg" alt="fileType"></p><p>这里很奇怪的是test64.o是data，看来是没有识别出来。</p><p>然后就可以通过<code>gcc -m32 test.o -o test</code>生成可执行文件test了(这里-m32是gcc在64位系统编译32位文件需要加的参数)</p><p> <img src="/2016/11/06/汇编学习-nasm使用-调试/op_zps7liklweq.jpg" alt="op"></p><p>事实上这里gcc是起到一个链接器的作用，查阅得，所谓的gcc叫做gcc工具链，这个工具链包括很多工具，其中用于链接的叫做ld.用 gcc链接时会根据选项不同调用不同的工具，如果到了链接阶段就会调用ld这个工具。所以事实上这里要用ld这个工具呀。</p><h2 id="调试演示"><a href="#调试演示" class="headerlink" title="调试演示"></a>调试演示</h2><p>然后就是调试了，抛弃了debug这个陈旧的东西，我们还有很多强大的调试器选择</p><p>例如win下的OllyDbg、IDA PRO，还有gdb</p><p>这里gdb推荐github上的一个配置文件<code>peda</code>，这个配置文件很强大，不需要另外装别的插件，似乎是玩pwn的好工具啊。</p><h4 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h4><p><img src="/2016/11/06/汇编学习-nasm使用-调试/Ubuntu15.10-2016-11-06-23-34-49_zpslku1vnhc.png" alt="Ubuntu15.10-2016-11-06-23-34-49"></p><p>然后我把那两个win下的.o文件拖到windows下同样原理用gcc编译了一下，并用OD和IDA调试</p><h4 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h4><p>这里只用IDA演示调试64位的<img src="/2016/11/06/汇编学习-nasm使用-调试/ida_zpsa0iyohkd.jpg" alt="ida"></p><h4 id="OllyDbg"><a href="#OllyDbg" class="headerlink" title="OllyDbg"></a>OllyDbg</h4><p>OD调试的是32位的</p><p><img src="/2016/11/06/汇编学习-nasm使用-调试/OD_zpsct2lubdk.jpg" alt="OD"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看起来很简单，但实际上还是遇到好多问题的，这里总结一下</p><ol><li>通过.asm编译出来的.o文件必须要通过链接器生成可执行文件，这里链接器实际上用的是ld，gcc只是提供了一个工具的入口。</li><li>在64位的系统下链接生成32位的程序需要加-m32 <em>(gcc)</em>参数或 -mi386pe <em>(ld on win)</em>的参数。</li><li>在windows下用gcc链接可能会出现各种奇怪的错误，例如找不到msvcrt.dll文件（然而我确定过我电脑有……）（至少我在我的64位win下用gcc链接32位.o是没成功）</li><li>因为我上面汇编代码没有改过，在windows下中断指令不是<code>int 80h</code>，所以事实上上面编译生成的可执行文件在windows下运行时是崩溃的。</li><li>因为我才刚看怎么写汇编，上面汇编代码是我从网上找的，对于nasm的一些语法并不清楚，所以上面的代码可能极其极其不规范！做参考的话请谨慎~</li></ol><hr><p><small><em>蜜汁觉得思路清晰了很多呢</em></small></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;为了更好的做逆向，刚学了点汇编的知识，尽管在我们微机课上也会有教，但总有时会分心。而且，这些不自己实际操作下也是搞不懂的。&lt;/p&gt;
&lt;p&gt;尽管在这之前我已近玩过一些逆向了，但更多的是单步调试，通过ida、OD等强大的功能飘过，一些细节并不清楚。所以必须要系统地学习汇编的知识。&lt;/p&gt;
&lt;p&gt;这里我选择的书是王爽的《汇编语言(第三版)》，虽然这书讲的是8086的16位的汇编（啊喂，太过时了吧！），不过基本原理都是差不多的，既然那么多人推荐我也就不浪费时间在选择书上了。&lt;/p&gt;
&lt;h2 id=&quot;环境选择&quot;&gt;&lt;a href=&quot;#环境选择&quot; class=&quot;headerlink&quot; title=&quot;环境选择&quot;&gt;&lt;/a&gt;环境选择&lt;/h2&gt;&lt;p&gt;在王爽的书中，他教学使用的是masm，即是微软开发的汇编开发环境，然后通过dos下的debug来调试。&lt;/p&gt;
&lt;p&gt;然而，debug这个调试器早在win7时已经没加入到windows系统中了&lt;/p&gt;
    
    </summary>
    
      <category term="Study_Note" scheme="http://blog.2bsitcker.cn/categories/Study-Note/"/>
    
    
      <category term="汇编" scheme="http://blog.2bsitcker.cn/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="nasm" scheme="http://blog.2bsitcker.cn/tags/nasm/"/>
    
  </entry>
  
</feed>
