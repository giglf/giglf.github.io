<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flare-On 2020 Writeup</title>
      <link href="2020/11/05/Flare-On-2020-Writeup/"/>
      <url>2020/11/05/Flare-On-2020-Writeup/</url>
      
        <content type="html"><![CDATA[<p>这writeup是断断续续写下来的，最近事情比较多，所以也拖得比较久 (然后就没想到又拖了快4个月——2021.3.14)</p><p>在今年的flareon上，再次ak，这次排名是107，<del>希望能拿到那根钥匙吧T_T</del>  (收到了 yeah！)，去年的牌居然给我寄丢了，气死我了</p><p>再次是简单回顾总结整个比赛 (其实就是流水账writeup)</p><p>因为官方的wp已经很详细了，所以这篇会很流水账，主要记录一些跟官方不一样的东西，或者有学到的新的奇淫技巧</p><p>感觉今年的难度比去年的要高一些</p><p>官方WP：<a href="https://www.fireeye.com/blog/threat-research/2020/10/flare-on-7-challenge-solutions.html">https://www.fireeye.com/blog/threat-research/2020/10/flare-on-7-challenge-solutions.html</a></p><span id="more"></span><h2 id="1-fidler"><a href="#1-fidler" class="headerlink" title="1_-_fidler"></a>1_-_fidler</h2><p>第一题是个用python写的喂猫猫游戏</p><p>因为都是用python写的，源码一目了然，并且这题就算不会逆向，也可以直接玩通关，不用很久</p><p>想让知道详情的可以直接查看官方wp</p><p><a href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/flareon7-challenge1-solution.pdf">https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/flareon7-challenge1-solution.pdf</a></p><p>我当时直接拼了个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_flag</span>(<span class="params">frob</span>):</span></span><br><span class="line">    last_value = frob</span><br><span class="line">    encoded_flag = [<span class="number">1135</span>, <span class="number">1038</span>, <span class="number">1126</span>, <span class="number">1028</span>, <span class="number">1117</span>, <span class="number">1071</span>, <span class="number">1094</span>, <span class="number">1077</span>, <span class="number">1121</span>, <span class="number">1087</span>, <span class="number">1110</span>, <span class="number">1092</span>, <span class="number">1072</span>, <span class="number">1095</span>, <span class="number">1090</span>, <span class="number">1027</span>,</span><br><span class="line">                    <span class="number">1127</span>, <span class="number">1040</span>, <span class="number">1137</span>, <span class="number">1030</span>, <span class="number">1127</span>, <span class="number">1099</span>, <span class="number">1062</span>, <span class="number">1101</span>, <span class="number">1123</span>, <span class="number">1027</span>, <span class="number">1136</span>, <span class="number">1054</span>]</span><br><span class="line">    decoded_flag = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encoded_flag)):</span><br><span class="line">        c = encoded_flag[i]</span><br><span class="line">        val = (c - ((i%<span class="number">2</span>)*<span class="number">1</span> + (i%<span class="number">3</span>)*<span class="number">2</span>)) ^ last_value</span><br><span class="line">        decoded_flag.append(val)</span><br><span class="line">        last_value = c</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> decoded_flag])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">current_coins = <span class="number">1000</span>*<span class="number">1000000000</span></span><br><span class="line">target_amount = (<span class="number">2</span>**<span class="number">36</span>) + (<span class="number">2</span>**<span class="number">35</span>)</span><br><span class="line"><span class="keyword">if</span> current_coins &gt; (target_amount - <span class="number">2</span>**<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">while</span> current_coins &gt;= (target_amount + <span class="number">2</span>**<span class="number">20</span>):</span><br><span class="line">        current_coins -= <span class="number">2</span>**<span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(decode_flag(<span class="built_in">int</span>(current_coins / <span class="number">10</span>**<span class="number">8</span>)))</span><br><span class="line"><span class="comment"># idle_with_kitty@flare-on.com</span></span><br></pre></td></tr></table></figure><p>有趣的是，因为我太菜了，这个脚本拼了一段时间，当我刚刚拼凑好脚本，游戏那边也刚好通关跑出flag来了= =</p><h2 id="2–garbage-exe"><a href="#2–garbage-exe" class="headerlink" title="2–garbage.exe"></a>2–garbage.exe</h2><p>这题卡了很多人，也卡了我有点时间</p><p>首先，PE文件是损坏的，但是我们不知道是哪里损坏</p><p>直接扔进ida，会发现经过upx加壳的，直接通过upx会提示<code>invalid overlay size</code></p><p>这个报错的话，因为之前大概看过一下upx的源码，好像差不多意思就是其中一个加壳的chunk大小跟header中的size不一样了</p><p>找各种工具看了很久才发现，文件最后的xml没了一块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&#39;1.0&#39; encoding&#x3D;&#39;UTF-8&#39; standalone&#x3D;&#39;yes&#39;?&gt; </span><br><span class="line">&lt;assembly xmlns&#x3D;&#39;urn:schemas-microsoft-com:asm.v1&#39; manifestVersion&#x3D;&#39;1.0&#39;&gt; </span><br><span class="line">  &lt;trustInfo xmlns&#x3D;&quot;urn:schemas-microsoft-com:asm.v3&quot;&gt; </span><br><span class="line">    &lt;securit </span><br></pre></td></tr></table></figure><p>好吧，猜这个损坏是文件最后被截掉了一块，因为通过各种工具查看各种头都是好的，除了下面这些invalid</p><p><img src="/2020/11/05/Flare-On-2020-Writeup/2-invalid.png" alt="2-invalid"></p><p>于是根据PE文件头中的文件大小在后面padding了一堆0，然后就可以用upx解压了</p><p>虽然解压出来有些地址有问题，但是并不影响看懂程序的逻辑，很快就弄出来了</p><p><a href="mailto:C0rruptGarbag3@flare-on.com">C0rruptGarbag3@flare-on.com</a></p><p>这里就不贴代码了</p><hr><p>但是，注意到一个东西，在message中包含了一句：</p><blockquote><p>You should be able to get it working again, reverse engineer it, and acquire the flag.</p></blockquote><p>似乎是可以把它恢复成可运行的binary，官方文档也介绍了其中的方法</p><p>在upx脱壳后，通过CFF explorer其实可以看到，在Import table中import的函数都是能看到的，但是缺失了import的dll名称</p><p>因此根据import的函数就可以推断出dll分别是kernel32.dll和shell32.dll</p><p>修复后，再把configuration File删掉（因为是少了一段的，这个configrue会导致程序错误）</p><p>就能够正常跑起来了 （CFF explorer真好用）</p><p><img src="/2020/11/05/Flare-On-2020-Writeup/2-run.png" alt="2-run"></p><h2 id="3-Wednesday"><a href="#3-Wednesday" class="headerlink" title="3-Wednesday"></a>3-Wednesday</h2><p>是一个类似flappy bird的憨憨小游戏，上下通过障碍物<br>txt里面介绍了怎么玩</p><p>好吧，那直接猜一下当达到XX分数的时候给flag</p><p>直接祭出cheat engine！</p><p>找到了分数，然后改大……诶，没什么反应</p><p>试了一轮，还是老老实实去逆吧。</p><p>发现这个是通过nim写的<br><a href="https://github.com/Vladar4/nimgame2/blob/master/nimgame2/nimgame.nim">https://github.com/Vladar4/nimgame2/blob/master/nimgame2/nimgame.nim</a></p><p>看了下感觉语法有点像脚本语言，但其实际还是编译出来的exe，因而没办法直接恢复出源码，只能照着上面示例代码慢慢看</p><p>时间有点太久了，不太记得具体逆的过程中遇到了什么问题，这里大致描述一下我的思路。</p><p>首先逆到逻辑发现总共分数达到296的时候就能够getflag，但是试过直接cheat engine修改成296没反应</p><p>或者最后出来winner的界面，但是没有flag</p><p>再细逆，发现flag是从障碍物的排序解码过来的，但是我没理清游戏操作原理，所以最后还是选择了patch</p><p>patch位置如图，对应了两个操作的patch，1、操作的cmp；2、reseteverything</p><p><img src="/2020/11/05/Flare-On-2020-Writeup/3-patch.png" alt="3-patch"></p><p>patch完后，我就等他自动跑了，这个时候撞到柱子不会死，而且也不会因为撞柱而重置</p><p>最后getflag</p><p><img src="/2020/11/05/Flare-On-2020-Writeup/3-win.png" alt="3-win"></p><p>官方wp提到了3种方法，</p><ol><li><p>找到flag buffer，然后静态解；</p></li><li><p>patch program</p></li><li>写bot</li></ol><p>当然也有头铁的老哥直接玩通关了……</p><p>找了下，bot的代码</p><p><a href="https://github.com/TWVyY3VyaW8K/shitty-wednesday-solution">https://github.com/TWVyY3VyaW8K/shitty-wednesday-solution</a></p><p>这是通过图像识别做的，这样就完全不用逆了，其中有个关键的库叫pyautogui，看着好像还挺好用</p><h2 id="4-report-xls"><a href="#4-report-xls" class="headerlink" title="4-report.xls"></a>4-report.xls</h2><p>这题给了个excel文件</p><p>一开始以为是普通的excel宏，结果发现还是too naive</p><p>按照正常的VBA分析，把宏代码去混淆，看完逻辑解密出来一个stomp.mp3</p><p>然后就什么都没发现了</p><p>而事实上，这个stomp.mp3可以算是一个hint</p><p>有个叫做 VBA stomping 的东西，参考</p><p><a href="https://zanderchang.github.io/2019/04/30/VBA-Stomping%E7%AE%80%E4%BB%8B/">https://zanderchang.github.io/2019/04/30/VBA-Stomping%E7%AE%80%E4%BB%8B/</a></p><p><a href="https://vbastomp.com/">https://vbastomp.com/</a></p><p>简单来说，在excel宏上，打开office实际执行的不是宏代码，而是文档文件中的p-code</p><p>p-code是宏代码的编译版本</p><p>如果文档中的p-code与当前系统上的VBA版本兼容，那实际执行的是储存的p-code，宏编辑器中显示的是反编译的p-code</p><p>而如果在不同版本的excel上打开，p-code不可重用，VBA源码将重新编译成p-code</p><blockquote><p><strong>使用 VBA Stomping 技术的恶意文档只能使用用于创建文档时相同的 VBA 版本执行。</strong></p></blockquote><p>因此，这个excel中实际的flag代码要从p-code中恢复，而光通过宏编辑器是看不到的</p><p>我使用了<a href="https://github.com/bontchev/pcodedmp">https://github.com/bontchev/pcodedmp</a> 反编译p-code</p><p>然后就很容易得到flag了</p><p><img src="/2020/11/05/Flare-On-2020-Writeup/4-flag.png" alt="4-flag"></p><h2 id="5-TKApp"><a href="#5-TKApp" class="headerlink" title="5-TKApp"></a>5-TKApp</h2><p>题目文件是个 <code>TKApp.tpk</code></p><p>tpk…我首先反应怎么像apk这样，而且file了一下发现实际也是zip</p><p>查了下这个似乎是三星智能手表的应用</p><p>搭模拟器太麻烦了。。直接静态搞吧</p><p>解压出来能看到很多文件</p><p>其中最关键的是当中的一个<code>TKApp.dll</code></p><p>这个dll是.net的，直接用dnspy分析</p><p>实际上整个过程没什么太大的难点，纯粹就是分析代码，然后从app的配置文件、xml等地方去找一些资源值，然后拼凑出来key</p><p>按AES处理一下就出来flag了，详细可以看官方wp</p><p><img src="/2020/11/05/Flare-On-2020-Writeup/5-flag.jpg" alt="5-flag"></p><h2 id="6-codeit"><a href="#6-codeit" class="headerlink" title="6-codeit"></a>6-codeit</h2><p>这题开始有点麻烦了</p><p>整个应用是输入文字，然后会显示出来文字对应的二维码</p><p>反编译后发现，他是通过AutoIt写的应用</p><blockquote><p>AutoIt is a freeware BASIC-like scripting language designed for general scripting and automating the  Windows GUI.</p></blockquote><p>这还是个脚本语言，搜了一轮后，用工具把脚本提出来了</p><p>具体用的是什么工具，，时间有点久远忘了，我文件夹里面还留着这两个工具</p><p><a href="https://github.com/SanseoLab/ejExtractor">https://github.com/SanseoLab/ejExtractor</a></p><p><a href="https://github.com/nazywam/AutoIt-Ripper">https://github.com/nazywam/AutoIt-Ripper</a></p><p>官方wp中也提到了两种</p><p><a href="https://github.com/fireeye/flare-vm/issues/172">https://github.com/fireeye/flare-vm/issues/172</a></p><p><a href="https://gitlab.com/x0r19x91/autoit-extractor">https://gitlab.com/x0r19x91/autoit-extractor</a></p><p>这个不太重要，能顺利吧Autoit脚本提取出来就行了</p><p>因为这个Autoit脚本经过了很严重的混淆，我写了个脚本patch一下，输出的语法肯定不对的，但是能静态逆着舒服很多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#... some global constant</span></span><br><span class="line"><span class="comment"># s=&#x27;......&#x27;</span></span><br><span class="line"></span><br><span class="line">arr = s.split(<span class="string">&quot;4FD5$&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(s).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in arr:</span></span><br><span class="line"><span class="comment">#     print(decode(i))</span></span><br><span class="line"></span><br><span class="line">data = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;AREHDIDXRGK \( \$OS \[ .*? \] \)&#x27;</span>) <span class="comment"># AREHDIDXRGK \( \$OS \[ .*? \] \)</span></span><br><span class="line"> </span><br><span class="line">func_call = pattern.findall(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> func_call:</span><br><span class="line">    var = s.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">4</span>][<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        repl = decode(arr[<span class="built_in">globals</span>()[var]-<span class="number">1</span>])</span><br><span class="line">        data = data.replace(s, <span class="string">f&quot;\&quot;<span class="subst">&#123;repl&#125;</span>\&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(var)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">globals</span>()[var])</span><br><span class="line">        <span class="comment"># sys.exit(1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> g <span class="keyword">in</span> var_dict:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(var_dict[g]) == <span class="built_in">int</span>:</span><br><span class="line">        data = data.replace(<span class="string">f&quot;$<span class="subst">&#123;g&#125;</span>&quot;</span>, <span class="built_in">str</span>(var_dict[g]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;out.patch2.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>逆着发现，每次生成二维码的时候，都会在当前目录有文件创建，然后马上又被删除</p><p>因为对windows不熟悉，我用了种很笨的办法。。用frida hook WIN API</p><p>让他不删除掉那个文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DeleteFileA = Module.findExportByName(<span class="string">&quot;kernel32.dll&quot;</span>, <span class="string">&#x27;DeleteFileA&#x27;</span>);</span><br><span class="line"></span><br><span class="line">Interceptor.replace(DeleteFileA, <span class="keyword">new</span> NativeCallback(<span class="function"><span class="keyword">function</span> (<span class="params">pathPtr</span>) </span>&#123;</span><br><span class="line">&#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>]));</span><br></pre></td></tr></table></figure><p>而实际上，通过官方的wp得知，其实直接设置当前文件夹权限就行了</p><p><img src="/2020/11/05/Flare-On-2020-Writeup/6-delete.png" alt="6-delete.png"></p><p>然后发现被删掉的图片其实就是开头welcome的那张图，bmp格式，但是后面代码也会引用到了这张图</p><p>代码会经过一系列操作，通过<code>GetComputerNameA</code>的结果计算密钥，进行解密生成带flag的二维码</p><p>这一步卡了很久，怎么能确定ComputerName？</p><p>万万没想到这一步是靠猜的</p><p>当中有一步是引用了上面提到的图片，然后对图片前面一部分字节进行处理</p><p>看了下，这似乎是LSB</p><p>因为那堆数据是 0xFF和0xFE混搭</p><p>于是，图片隐写提取出来<code>aut01tfan1999</code></p><p>试了下把计算机名改成这个，然后再生成二维码，发现出来的就是flag了</p><p><a href="mailto:L00ks_L1k3_Y0u_D1dnt_Run_Aut0_Tim3_0n_Th1s_0ne!@flare-on.com">L00ks_L1k3_Y0u_D1dnt_Run_Aut0_Tim3_0n_Th1s_0ne!@flare-on.com</a></p><h2 id="7-re-crowd"><a href="#7-re-crowd" class="headerlink" title="7-re_crowd"></a>7-re_crowd</h2><p>题目给的是一个流量包</p><p>首先，通过http的请求可以还原出他访问的网站，这个网站是题目自己编写的网站，描述了一些背景</p><p>因为网站的漏洞，服务器上的 C:\accounts.txt 被偷了</p><p>那么就接着分析流量吧</p><p>从流量包种能看到大量的像这样的http请求</p><p><img src="/2020/11/05/Flare-On-2020-Writeup/7-payload.png" alt="7-payload"></p><p>看着很奇怪，特别是PROPFIND这种请求方式，以及<code>&quot;(Not &lt;locktoken:write1&gt;)&quot;</code>这种字段</p><p>那么上网上搜，就能发现有个IIS的漏洞利用方式跟这段数据包非常像</p><p>漏洞详情参考<a href="https://paper.seebug.org/259/">https://paper.seebug.org/259/</a></p><p>CVE-2017-7269</p><p>这个漏洞能达成RCE</p><p>由于存在很多个类似的流量包，我按顺序把这些流量包下了下来，放在一起比较，就能发现</p><p>这些流量包最后的ascii字符都是一样的，而前面一段，则是按顺序，每一次都比上一次少2字节</p><p>分析完那个漏洞，感觉这个过程应该是在爆破路径，前面的乱码就对应的padding，后面开始是shellcode</p><p>但是这段shellcode，直接丢进IDA看，感觉非常乱，看不出来</p><p>尝试把前面<code>VVYAIAIAIAIAIAIAIAIAIAIAIAIAIAIA</code>搜一下，发现这是alpha shellcode</p><p>简单来说，就是用可见字符组成的shellcode</p><p>而前面则是自解码的shellcode片段</p><p>参考<a href="https://gitlab.com/kalilinux/packages/metasploit-framework/blob/07ca796c8f087fa0c77730b95edac2461ea6a7ab/spec/lib/rex/encoder/alpha2/unicode_mixed_spec.rb">https://gitlab.com/kalilinux/packages/metasploit-framework/blob/07ca796c8f087fa0c77730b95edac2461ea6a7ab/spec/lib/rex/encoder/alpha2/unicode_mixed_spec.rb</a></p><p>在网上能找到这些shellcode的编码器，但是找不到解码器，所以照这编码器，我写了个逆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellcode_decoder</span>(<span class="params">s</span>):</span></span><br><span class="line">    ret = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s), <span class="number">2</span>):</span><br><span class="line">        X, Y = s[i], s[i+<span class="number">1</span>]</span><br><span class="line">        C, E = ((X &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>), ((Y &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>)</span><br><span class="line">        D, F = (X &amp; <span class="number">0xf</span>), (Y &amp; <span class="number">0xf</span>)</span><br><span class="line">        A = (D + E) &amp; <span class="number">0xf</span></span><br><span class="line">        B = F</span><br><span class="line">        ret += <span class="built_in">bytes</span>([((A&lt;&lt;<span class="number">4</span>) + B)])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><p>但其实实际上，官方的做法是通过shellcodeRunner去进行调试，然后再dump出来（我太菜了）</p><p>当时没有直接调试成功，应该是设置的问题，以后试试用shellcodeRunner这个工具</p><p>shellcode解密出来，可以发现这是个下载器，从流量中找到下一段shellcode，</p><p>由于当中还包含了通过对api hash，然后比对调用特定的win api</p><p>根据hash找到了这么一个网站，直接找就完事了</p><p><a href="https://hiddencodes.wordpress.com/2014/08/22/windows-api-hash-list-1/">https://hiddencodes.wordpress.com/2014/08/22/windows-api-hash-list-1/</a></p><p>然后很快，就找到flag了</p><p><a href="mailto:h4ve_you_tri3d_turning_1t_0ff_and_0n_ag4in@flare-on.com">h4ve_you_tri3d_turning_1t_0ff_and_0n_ag4in@flare-on.com</a></p><hr><p>关于最后的hash，这其实是恶意代码中常用的伎俩</p><p>官方wp中提到有很多工具可以拿来搜</p><ul><li>We can use the IDA Pro shellcode_hashes_search_plugin.py Python script available at  <a href="https://github.com/fireeye/flare-ida">https://github.com/fireeye/flare-ida</a> </li><li>We can use an emulation tool such as scdbg (<a href="https://github.com/dzzie/SCDBG">https://github.com/dzzie/SCDBG</a>) </li><li>We can resolve the APIs dynamically in a debugger</li></ul><h2 id="8-Aardvark"><a href="#8-Aardvark" class="headerlink" title="8-Aardvark"></a>8-Aardvark</h2><p>这题非常无语</p><p>直接打开发现报错了，逆进去发现，这似乎是要跟WSL交互</p><p>从pe的资源节释放出来一个elf，这个elf将运行在WSL里面，然后作为井字棋的AI</p><p>玩家需要赢了才能getflag</p><p>首先，这个AI写的很好，在井字棋这种情况下能保证输不了，玩家最多跟它打平</p><p>看了看getflag的逻辑，是从系统中取了一堆信息内容运算后得出的</p><p>居然是跟系统相关的？那么还是动态跑起来</p><hr><p>这里，我就直接尝试在WSL中安装了gdb，然后attach到AI进程</p><p>跑到check的分支，直接修改了寄存器的值。。</p><p>然后发现就输出flag了，这里多得看了眼twitter，有人说，如果你得到一个有点乱的flag，不要怀疑，尝试提交一下</p><p>没想到就真的就是这个flag</p><p><a href="mailto:`c1ArF/P2CjiDXQIZ@flare-on.com">`c1ArF/P2CjiDXQIZ@flare-on.com</a>`</p><p><img src="/2020/11/05/Flare-On-2020-Writeup/8-solve.png" alt="8-solve"></p><hr><p>这题出的确实一般，下面根据官方wp的内容补充一些相关的技术知识</p><ol><li><p>WSL与Windows的交互</p><p>这里交互方式是通过Unix socket，<code>socket(AF_UNIX, SOCK_STREAM, 0);</code>，绑定的名称为<code>496b9b4b.ed5</code></p><p>在Win7的时候，似乎是不支持AF_UNIX的，而在Window 10 17063版本后，Windows支持AF_UNIX了</p><p><a href="https://devblogs.microsoft.com/commandline/af_unix-comes-to-windows/">https://devblogs.microsoft.com/commandline/af_unix-comes-to-windows/</a></p><p>这让window支持通过Unix Socket跨进程通信</p></li><li><p>WSL链接 <code>CoCreateInstance</code></p><p>通过指定 COM Class ID  and Interface ID，与WSL链接，根据windows版本的不同，其接口函数也不太一样</p><p>题目中适配了Windows 10 1803, 1809, 1903, 1909, 2004, or 20H2</p></li><li><p>flag生成中使用到的环境信息</p><p>因为flag是通过环境信息xor得来的，那怎么保证的flag唯一性？</p><p>首先，题目中有对WSL版本检查，elf跑的环境只能是WSL1</p><p>而当中用到的4种环境信息：</p><ol><li><code>/proc/modules</code> WSL1中没有这个目录，跳过</li><li><code>/proc/mounts</code> 中根目录类型，WSL中是<code>wslfs</code>或<code>lxfs</code>，最后都是fs，用fs异或</li><li><code>/proc/version_signature</code>信息，WSL前面固定是Microsoft</li><li>VDSO shared library 的program header的virtual address，四个固定的0xffffffffff70</li><li><code>/proc</code>下文件i-number，因为WSL下的i-number高16位肯定都是0</li></ol><p>所以，题目就是通过这种办法跑出flag（Q：这是否可以用来当作识别WSL环境的特征呢？）</p></li></ol><h2 id="9-crackinstaller"><a href="#9-crackinstaller" class="headerlink" title="9-crackinstaller"></a>9-crackinstaller</h2><p>对于像我这样不熟悉windows的来说，这题很复杂</p><p>题目总共给的就一个文件 <code>crackstaller.exe</code></p><p>这个文件的行为像一个dropper</p><p>他里面内嵌(embedded)了3个二进制文件</p><p>首先crackstaller其实是整个crackme的安装器</p><p>在mian之前，会释放出<code>C:\Windows\System32\cfs.dll</code></p><p>以及加载<code>DriverBootstrap</code>，其具体表现还是一个PE文件，实际是一个<code>.sys</code></p><p>在官方wp中他把这两个binary叫做 <code>capcom.sys</code>和<code>driver.sys</code></p><p>官方wp说到，binary里面用到了chacha20解密，然后再进行lznt1解压缩</p><p>在实际逆向过程，调试直接跳过了这步</p><p>其在释放出capcom.sys后，会通过<code>DeviceIoControl</code>调用<code>0xAA013044</code>的处理</p><p>实际上capcom.sys的作用是<code>disable SMEP（Supervisor Mode Execution Prevention）</code></p><p>并且同时，会在capcom上加载driver.sys</p><p>整个过程，实际上是关闭了SMEP保护，然后加载driver.sys到用户层，通过文件头找到DriverBootstrap调用</p><p>其实相当于运行了一个shellcode</p><p>而运行shellcode之前，crackstaller通过一系列操作吧driver.sys加载到内存上，为了保证其能正常运行，并且把导入函数通过参数的方式传入DriverBootstrap</p><p>而中间还有个非常鸡贼的操作</p><p><img src="/2020/11/05/Flare-On-2020-Writeup/9-patch.png" alt="9-patch"></p><p>把整个driver.sys搜索一遍，把0xDC16F3C3B57323 patch成 “BBACABA”</p><p>在逆driver.sys的时候能发现，这个其实是解密出password的密钥，所以也难怪我一开始直接逆怎么都解不出真实值</p><p>driver.sys通过<code>CmRegisterCallbackEx((PEX_CALLBACK_FUNCTION)Function, &amp;Altitude, a1, a1, &amp;Cookie, 0i64);</code>注册了个回调函数</p><p>这个函数，搜了一大堆文档，最后发现是</p><blockquote><p>which is called every time a thread performs an operation on the registry.</p></blockquote><p>里面用<code>ZwCreateKey(&amp;KeyHandle, KEY_ALL_ACCESS, &amp;ObjectAttributes, 0, &amp;Class, 0, Argument2-&gt;Disposition);</code></p><p>Class里面包含了解密出来的password <code>H@n $h0t FiRst!</code></p><p>这一步ZwCreateKey其实我完全没理解是在干什么</p><p>官方wp说，他把password储存 in a  registry class string （class type string？）</p><p>当使用<code>RegCreateKeyEx</code>创建key时，lpClass可以被忽略，被设置成NULL</p><blockquote><p>lpClass</p><p>​    A pointer to a buffer that receives the user-defined class of the key. This parameter can be <strong>NULL</strong>.</p></blockquote><p>官方wp写到因为这个参数从来不会被使用，所以数据可以储存在里面，并且通过regedit、reg.exe等工具都不会返回class strings</p><p>正确的提取方式是下面的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPassword</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HKEY hkey = <span class="literal">NULL</span>;</span><br><span class="line">    CHAR password[MAX_PATH] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    DWORD buf_size = MAX_PATH;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ERROR_SUCCESS != (result = RegOpenKeyA(</span><br><span class="line">        HKEY_CLASSES_ROOT,</span><br><span class="line">        <span class="string">&quot;CLSID\\&#123;CEEACC6E-CCB2-4C4F-BCF6-D2176037A9A7&#125;\\Config,</span></span><br><span class="line"><span class="string">        &amp;hkey))) return;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if (ERROR_SUCCESS != (result = RegQueryInfoKeyA(</span></span><br><span class="line"><span class="string">        hkey,</span></span><br><span class="line"><span class="string">        password,</span></span><br><span class="line"><span class="string">        &amp;buf_size,</span></span><br><span class="line"><span class="string">        NULL,</span></span><br><span class="line"><span class="string">        NULL, NULL, NULL, NULL,</span></span><br><span class="line"><span class="string">        NULL, NULL, NULL, NULL))) return;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if (0 == buf_size) return;</span></span><br><span class="line"><span class="string">    printf(“password: %s\n”, password);</span></span><br><span class="line"><span class="string">    return;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>而剩下的部分，就是注册得到的COM server <code>credHelper.dll</code></p><p>通过COM与该server交互，就能读到flag</p><p>当然，我当时并不懂COM，完全靠猜，把credHelper.dll翻了个底朝天找出来的= =</p><p>并且时通过静态解出来，这题如果能调到DriverBootstrap，能省很多事</p><p>而整个crackstaller的本质作用是安装了一个COM server，本身并不具备正常crackme拥有的输入</p><p>因此如果要正常交互还是需要用户写一个COM client去跟他交互，再从注册表读出flag</p><hr><p>这题如果没搞懂的话强烈建议去看官方wp，包括里面描述到的COM细节</p><p>另外，在解密一些字符串的时候，我用到了flare团队中的一些ida插件，用来自动解密字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> flare_emu</span><br><span class="line"></span><br><span class="line"><span class="comment"># def decrypt(argv):</span></span><br><span class="line"><span class="comment">#     myEH = flare_emu.EmuHelper()</span></span><br><span class="line"><span class="comment">#     myEH.emulateRange(myEH.analysisHelper.getNameAddr(&quot;dec3_7FF6FDF81C34&quot;), registers = &#123;&quot;arg1&quot;:argv[0], &quot;arg2&quot;:argv[1], &quot;arg3&quot;:argv[2]&#125;)</span></span><br><span class="line"><span class="comment">#     return myEH.getEmuString(0x7FF6FDFB94E0).decode(&#x27;utf-8&#x27;)</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">data, l</span>):</span></span><br><span class="line">    key = [<span class="number">0x3C</span>, <span class="number">0x67</span>, <span class="number">0x7E</span>, <span class="number">0x7B</span>, <span class="number">0x3C</span>, <span class="number">0x69</span>, <span class="number">0x74</span>, <span class="number">0x00</span>]</span><br><span class="line">    ret = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">        ret += <span class="built_in">bytes</span>([data[i] ^ key[i % <span class="number">7</span>]])</span><br><span class="line">    <span class="keyword">return</span> ret.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iterateCallback</span>(<span class="params">eh, address, argv, userData</span>):</span></span><br><span class="line">    s = decrypt(eh.getEmuBytes(argv[<span class="number">0</span>], argv[<span class="number">1</span>]), argv[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># s = decrypt(argv)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s: %s&quot;</span> % (eh.hexString(address), s))</span><br><span class="line">    eh.analysisHelper.setComment(address, s, <span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:   </span><br><span class="line">    eh = flare_emu.EmuHelper()</span><br><span class="line">    <span class="comment"># eh.iterate(eh.analysisHelper.getNameAddr(&quot;dec2struct_140004D60&quot;), iterateCallback)</span></span><br><span class="line">    eh.iterate(eh.analysisHelper.getNameAddr(<span class="string">&quot;dec4_7FF6F9C11CA8&quot;</span>), iterateCallback)</span><br></pre></td></tr></table></figure><h2 id="10-break"><a href="#10-break" class="headerlink" title="10-break"></a>10-break</h2><p>终于迎来了一道ELF的题目，原本以为这会比较常规一些，没想到，作者这操作也太魔鬼了</p><p>首先，粗略的看一下main函数，会发现只是一个非常简单的strcmp</p><p>借用官方wp的图，输入这个字符串会提示错误</p><p><img src="/2020/11/05/Flare-On-2020-Writeup/10-trick.png" alt="10-trick"></p><p>那当然不可能这么简单啦</p><p>那么看一下.init，会发现两个函数</p><p>一个叫<code>parent_sub</code> 另一个叫<code>first_fork</code></p><p>而在里面还会出现另一个second_chlid，通过fork创建了两个子进程，总共算起来是3个进程</p><p>在运行起来后通过ps就能看出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root       154  0.0  0.0   3644   540 pts/2    t+   10:27   0:00 ./break</span><br><span class="line">root       155  0.0  0.0   3780    64 pts/2    S+   10:27   0:00 ./break</span><br><span class="line">root       156  0.0  0.0   3780    80 pts/2    S+   10:27   0:00 ./break</span><br></pre></td></tr></table></figure><hr><p>首先，我们区分三个进程为parent、first_child、second_child</p><p>在这三个进程中</p><p>first_child —–(ptrace attach)——-&gt; parent</p><p>second_child –(ptrace attach)——&gt; first_child</p><p>接下来说一下每个ptrace都在做什么</p><p><strong>first_child</strong>: 通过<code>ptrace_me(PTRACE_SYSEMU, parent_pid, 0, 0)</code>捕获parent进程的syscall</p><p>并根据不同的syscall进行不同的运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">v25 = <span class="number">0x1337CAFE</span> * (v15.orig_eax ^ <span class="number">0xDEADBEEF</span>);</span><br><span class="line">...</span><br><span class="line">                <span class="keyword">switch</span> ( v25 )</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="keyword">case</span> <span class="number">0x4A51739A</span>:              <span class="comment">// eax = 0x5c truncate</span></span><br><span class="line">                    readdata_fromaddr_804BBF8(parent_pid, v15.ebx, (<span class="keyword">int</span> *)&amp;outbuf, <span class="number">40000</span>);</span><br><span class="line">                    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">39999</span> &amp;&amp; *((_BYTE *)&amp;outbuf + i); ++i )</span><br><span class="line">                    &#123;</span><br><span class="line">                      v14[i] = *((_BYTE *)&amp;outbuf + i);</span><br><span class="line">                      <span class="keyword">if</span> ( v32 == <span class="number">-1</span> &amp;&amp; v14[i] != byte_81A5100[i] )</span><br><span class="line">                        v32 = i;                <span class="comment">// memcmp</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    v32 = v30(<span class="number">0xA4F57126</span>, userinput_81A56C0, v32);</span><br><span class="line">                    v15.eax = v32;</span><br><span class="line">                    ptrace_me(PTRACE_SETREGS, parent_pid, <span class="number">0</span>, (<span class="keyword">int</span>)&amp;v15);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                  <span class="keyword">case</span> <span class="number">0x7E85DB2A</span>:              <span class="comment">// eax = 0x4 write</span></span><br><span class="line">                    size = v15.edx;</span><br><span class="line">                    buf = <span class="built_in">malloc</span>(v15.edx);      <span class="comment">// emu puts()</span></span><br><span class="line">                    readdata_fromaddr_804BBF8(parent_pid, v15.ecx, (<span class="keyword">int</span> *)buf, size);</span><br><span class="line">                    write(STDOUT_FILENO, buf, size);</span><br><span class="line">                    v15.eax = size;</span><br><span class="line">                    ptrace_me(PTRACE_SETREGS, parent_pid, <span class="number">0</span>, (<span class="keyword">int</span>)&amp;v15);</span><br><span class="line">                    <span class="built_in">free</span>(buf);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                  <span class="keyword">case</span> <span class="number">0x3DFC1166</span>:              <span class="comment">// 0x22 nice</span></span><br><span class="line">                    buf = xor_withbuf_idx_8056281(v15.ebx);<span class="comment">// why? It call dec_idx in true.</span></span><br><span class="line">                    v5 = <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)buf);</span><br><span class="line">                    writedata_toaddr_804BB2D(parent_pid, (<span class="keyword">int</span>)tmpstring_81A52A0, (<span class="keyword">int</span> *)buf, v5 + <span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">free</span>(buf);                  <span class="comment">// return some string to tmpstring</span></span><br><span class="line">                    v15.eax = <span class="number">0</span>;</span><br><span class="line">                    ptrace_me(<span class="number">13</span>, parent_pid, <span class="number">0</span>, (<span class="keyword">int</span>)&amp;v15);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p><strong>second_child</strong>: 通过<code>PTRACE_PEEKDATA</code>、<code>PTRACE_GETREGS</code>等捕获<code>SIGSEGV</code>，并根据栈上的数据进行运算</p><p>并根据arg1的值选择不同的计算，返回值放到eax上，这有点类似一个VM fetch instruction然后解析执行的过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( data == SIGSEGV )                  <span class="comment">// 0xB7F</span></span><br><span class="line">        &#123;</span><br><span class="line">          ptrace_me(PTRACE_GETREGS, child1_pid, <span class="number">0</span>, (<span class="keyword">int</span>)&amp;reg_15);</span><br><span class="line">          v9 = ptrace_me(PTRACE_PEEKDATA, child1_pid, reg_15.esp, <span class="number">0</span>);</span><br><span class="line">          arg1 = ptrace_me(PTRACE_PEEKDATA, child1_pid, reg_15.esp + <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">          arg2 = ptrace_me(PTRACE_PEEKDATA, child1_pid, reg_15.esp + <span class="number">8</span>, <span class="number">0</span>);<span class="comment">// point at [Memory 0] function call in child1</span></span><br><span class="line">          arg3 = ptrace_me(PTRACE_PEEKDATA, child1_pid, reg_15.esp + <span class="number">12</span>, <span class="number">0</span>);</span><br><span class="line">  ...</span><br><span class="line">    </span><br><span class="line">  ...  </span><br><span class="line">            <span class="keyword">switch</span> ( arg1 )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">case</span> <span class="number">0xA4F57126</span>:</span><br><span class="line">                reg_15.eax = arg3;</span><br><span class="line">                <span class="keyword">if</span> ( arg3 != <span class="number">-1</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  readdata_fromaddr_804BBF8(child1_pid, arg2, (<span class="keyword">int</span> *)userinput_81A56C0, <span class="number">62</span>);</span><br><span class="line">                  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(&amp;userinput_81A56C0[<span class="number">48</span>], <span class="string">&quot;@no-flare.com&quot;</span>, <span class="number">0xD</span>u) )</span><br><span class="line">                    reg_15.eax = <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="number">0xB82D3C24</span>:</span><br><span class="line">                reg_15.eax = arg2 + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="number">0x91BDA628</span>:</span><br><span class="line">                reg_15.eax = (<span class="number">16</span> * (arg2 - <span class="number">1</span>)) | ((_BYTE)arg3 - <span class="number">1</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>因为second_child捕获的是first_child中的SIGSEGV，所以正常情况下second_child都是处于Sleep状态</p><p>而first_child捕获的是parent中的系统调用，在没有系统调用的情况下也是处于Sleep状态</p><p>这个从开始通过ps查看的进程信息就能看出</p><p><code>S    interruptible sleep (waiting for an event to complete)</code></p><p>在first_child开始时，会通过<code>ptrace_me(PTRACE_POKEDATA, parent_pid, (int)sub_8048CDB, 0xB0F)</code></p><p>把sub_8048CDB开头字节patch掉，而这个函数正是main函数进去调用的strcmp的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BOOL4 __cdecl <span class="title">sub_8048CDB</span><span class="params">(<span class="keyword">char</span> *s1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strcmp</span>(s1, <span class="string">&quot;sunsh1n3_4nd_r41nb0ws@flare-on.com&quot;</span>) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当开头被patch掉后，main函数执行到这里的时候，会产生<code>Illegal Instruction</code>错误，而这个错误正好被first_child捕获</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (stat_loc[<span class="number">0</span>] &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span> == SIGILL )<span class="comment">// Illegal Instruction</span></span><br><span class="line">&#123;</span><br><span class="line">  v7 = <span class="built_in">strlen</span>(userinput_81A56C0);</span><br><span class="line">  writedata_toaddr_804BB2D(parent_pid, (<span class="keyword">int</span>)userinput_81A56C0, (<span class="keyword">int</span> *)userinput_81A56C0, v7);</span><br><span class="line">  ptrace_me(PTRACE_GETREGS, parent_pid, <span class="number">0</span>, (<span class="keyword">int</span>)&amp;v15);</span><br><span class="line">  v21 = v15.esp;</span><br><span class="line">  <span class="keyword">if</span> ( ptrace_me(PTRACE_POKEDATA, parent_pid, v15.esp + <span class="number">4</span>, (<span class="keyword">int</span>)userinput_81A56C0) == <span class="number">-1</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  v15.eip = (<span class="keyword">int</span>)rm_rf;</span><br><span class="line">  ptrace_me(PTRACE_SETREGS, parent_pid, <span class="number">0</span>, (<span class="keyword">int</span>)&amp;v15);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而通过这个处理，把parent的执行流控制到函数<code>rm_rf</code>上</p><p>这个函数非常鸡贼</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BOOL4 __cdecl <span class="title">rm_rf</span><span class="params">(<span class="keyword">char</span> *userinput)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BOOL4 result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">176</span>]; <span class="comment">// [esp+4h] [ebp-D4h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> *argv[<span class="number">5</span>]; <span class="comment">// [esp+B4h] [ebp-24h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+C8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">size_t</span> v5; <span class="comment">// [esp+CCh] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="built_in">strlen</span>(userinput);</span><br><span class="line">  argv[<span class="number">0</span>] = <span class="string">&quot;rm&quot;</span>;</span><br><span class="line">  argv[<span class="number">1</span>] = <span class="string">&quot;-rf&quot;</span>;</span><br><span class="line">  argv[<span class="number">2</span>] = <span class="string">&quot;--no-preserve-root&quot;</span>;</span><br><span class="line">  argv[<span class="number">3</span>] = <span class="string">&quot;/&quot;</span>;</span><br><span class="line">  argv[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">  execve(userinput, argv, <span class="number">0</span>);</span><br><span class="line">  --v5;</span><br><span class="line">  v4 = -nice(<span class="number">165</span>);</span><br><span class="line">  aes_key_expension_804B495((<span class="keyword">int</span>)v2, v4);</span><br><span class="line">  aes_decrypt_804BABC((<span class="keyword">int</span>)v2, (<span class="keyword">int</span>)&amp;unk_81A50EC);</span><br><span class="line">  aes_decrypt_804BABC((<span class="keyword">int</span>)v2, (<span class="keyword">int</span>)&amp;unk_81A50F0);</span><br><span class="line">  aes_decrypt_804BABC((<span class="keyword">int</span>)v2, (<span class="keyword">int</span>)&amp;unk_81A50F4);</span><br><span class="line">  aes_decrypt_804BABC((<span class="keyword">int</span>)v2, (<span class="keyword">int</span>)&amp;unk_81A50F8);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(userinput, &amp;unk_81A50EC, <span class="number">0x10</span>u) )<span class="comment">// w3lc0mE_t0_Th3_l</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;unk_81A50EC, <span class="number">0</span>, <span class="number">0x10</span>u);</span><br><span class="line">    result = sub_8048F05(userinput + <span class="number">16</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;unk_81A50EC, <span class="number">0</span>, <span class="number">0x10</span>u);</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍一看，他还会先执行<code>rm -rf --no-preserve-root /</code>，算是个恶趣味了</p><p>但是实际上，execve这个系统调用会被first_child捕获，进行的实际是别的操作</p><p>如果哪个人把first_child这个进程kill掉了，那么，恭喜～获得 <code>rm -rf /</code>大礼包</p><p>在看到下面的memcmp，其实就能想到我直接调试到这然后直接读内存不就好了</p><p>但是，这整个程序是通过ptrace驱动的</p><p>而linux上的调试器也是通过ptrace实现的，一个经典的反调试是，当一个进程已经被ptrace，就不能再被另一个进程ptrace</p><p>所以有反调试会通过ptrace自己来反调试，但是这种反调试很好过，只要把ptrace自己的代码patch掉就好了</p><p>但是这题不行，因为整个执行流都需要靠ptace去驱动，这没办法去掉。</p><p>开始我是在想通过虚拟机之类的方法捕获执行流的，但是发现qemu对其中一些系统调用并没有模拟好，包括ptrace的一些功能</p><p>导致整个题目没法正常跑通。后来也想过使用frida等工具进行插桩，但是实际上frida也是通过ptrace再插桩的</p><p>也想过用pintool等一些工具去尝试，当时忘了什么原因，也报了一些错误。</p><p>最后其实是通过libc hook来输出一些中间值的。</p><p>简单来说就是通过<code>LD_PRELOAD=$(pwd)/libchook.so ./10_-_break/break</code></p><p>对libc进行hook</p><h3 id="stage1"><a href="#stage1" class="headerlink" title="stage1"></a>stage1</h3><p>通过这个方式直接输出了第一部分的flag</p><p><code>w3lc0mE_t0_Th3_l</code></p><p>官方wp提到了另外一种方法，就是通过linux的mem接口</p><p><img src="/2020/11/05/Flare-On-2020-Writeup/10-firststage.png" alt="10-firststage"></p><h3 id="stage2"><a href="#stage2" class="headerlink" title="stage2"></a>stage2</h3><p>然后stage2，stage2是对代码段一大块区域进行解密的操作。然后这一大块的前32字节就是stage2的flag</p><p>这个函数里面会发现这样的调用</p><p><code>0804C40C: ((void (__cdecl *)(void *, int *))MEMORY[0])(&amp;loc_804C3C4, &amp;v5);</code></p><p>这个调用乍一看毫无道理，函数地址为0，但是这样的代码会引起segmentfault</p><p>SIGSEGV会被ptrace捕获，下面是first_child中捕获SIGSEGV的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (stat_loc[<span class="number">0</span>] &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span> == SIGSEGV )</span><br><span class="line">&#123;</span><br><span class="line">  ptrace_me(PTRACE_GETREGS, parent_pid, <span class="number">0</span>, (<span class="keyword">int</span>)&amp;v15);</span><br><span class="line">  v20 = ptrace_me(PTRACE_PEEKDATA, parent_pid, v15.esp, <span class="number">0</span>);</span><br><span class="line">  v19 = ptrace_me(PTRACE_PEEKDATA, parent_pid, v15.esp + <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">  addr = ptrace_me(PTRACE_PEEKDATA, parent_pid, v15.esp + <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">  data = ptrace_me(PTRACE_PEEKDATA, parent_pid, addr, <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">  v15.esp += <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">if</span> ( data &gt; <span class="number">15</span> )</span><br><span class="line">  &#123;                                   <span class="comment">// loop 16</span></span><br><span class="line">    v15.eip = v20;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v15.eip = v19;</span><br><span class="line">    ptrace_me(PTRACE_POKEDATA, parent_pid, addr, data);</span><br><span class="line">    v15.esp += <span class="number">16</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ptrace_me(PTRACE_SETREGS, parent_pid, <span class="number">0</span>, (<span class="keyword">int</span>)&amp;v15);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，这就是一个从当前地址到第一个参数<code>0x804C3C4</code>的循环，循环次数为16</p><p>而这个函数的运算则是使用了许多奇怪的系统调用，而实际上这些系统调用都被替换成first_child中的操作</p><p>而当时我好像也没太识别出这个这是什么算法，就直接抄写并写了个逆，中间还因为一些抄写错误卡了一段时间= =</p><p>最后还是通过libc hook进行验证才写对的</p><p>Flag2: <code>4nD_0f_De4th_4nd_d3strUct1oN_4nd</code></p><p>也贴一下代码吧，官方wp提到，这个一个Custom ARX Feistel Cipher</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enc_flag = [<span class="number">0x64</span>, <span class="number">0xA0</span>, <span class="number">0x60</span>, <span class="number">0x02</span>, <span class="number">0xEA</span>, <span class="number">0x8A</span>, <span class="number">0x87</span>, <span class="number">0x7D</span>, <span class="number">0x6C</span>, <span class="number">0xE9</span>, <span class="number">0x7C</span>, <span class="number">0xE4</span>, <span class="number">0x82</span>, <span class="number">0x3F</span>, <span class="number">0x2D</span>, <span class="number">0x0C</span>, <span class="number">0x8C</span>, <span class="number">0xB7</span>, <span class="number">0xB5</span>, <span class="number">0xEB</span>, <span class="number">0xCF</span>, <span class="number">0x35</span>, <span class="number">0x4F</span>, <span class="number">0x42</span>, <span class="number">0x4F</span>, <span class="number">0xAD</span>, <span class="number">0x2B</span>, <span class="number">0x49</span>, <span class="number">0x20</span>, <span class="number">0x28</span>, <span class="number">0x7C</span>, <span class="number">0xE0</span>]</span><br><span class="line"></span><br><span class="line">constant_s = <span class="string">b&#x27;This string has no purpose and is merely here to waste your time.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># constant_s = b&#x27;Wasting your time6&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PAIR64</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (a &lt;&lt; <span class="number">32</span>) + b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>(<span class="params">a1, s, l</span>):</span></span><br><span class="line">    <span class="keyword">global</span> data</span><br><span class="line">    ret = a1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">        v3 = (s[i] ^ ret) &amp; <span class="number">0xff</span></span><br><span class="line">        low = ((ret &gt;&gt; <span class="number">8</span>) ^ data[<span class="number">2</span>*v3]) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        hi = ((((ret &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span>) &gt;&gt; <span class="number">8</span>) ^ data[<span class="number">2</span>*v3+<span class="number">1</span>]) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        ret = PAIR64(hi, low)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count1</span>(<span class="params">n</span>):</span></span><br><span class="line">    ret = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) != <span class="number">0</span>:</span><br><span class="line">            ret += <span class="number">1</span></span><br><span class="line">        n &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buf_round</span>(<span class="params">a, buf</span>):</span></span><br><span class="line">    flags = a</span><br><span class="line">    </span><br><span class="line">    buf[<span class="number">7</span>] = flags &amp; <span class="number">0xffffffff</span></span><br><span class="line">    buf[<span class="number">19</span>] = (flags &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    buf[<span class="number">41</span>] = (count1(flags) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">    v6 = flags &amp; <span class="number">1</span></span><br><span class="line">    flags &gt;&gt;= <span class="number">1</span>        </span><br><span class="line">    <span class="keyword">if</span> v6 == <span class="number">1</span>:</span><br><span class="line">        v8 = <span class="number">0x9E3779B9C6EF3720</span></span><br><span class="line">        flags ^= v8</span><br><span class="line">    <span class="keyword">return</span> flags, buf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ror</span>(<span class="params">a1, a2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ((a1 &gt;&gt; (a2 &amp; <span class="number">0x1F</span>)) | (a1 &lt;&lt; (-(a2 &amp; <span class="number">0x1F</span>) &amp; <span class="number">0x1F</span>))) &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">catch_chmod</span>(<span class="params">buf, hi</span>):</span></span><br><span class="line">    v2 = (hi + buf[<span class="number">7</span>]) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    v3 = ror(v2, buf[<span class="number">41</span>])</span><br><span class="line">    <span class="keyword">return</span> v3 ^ buf[<span class="number">19</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc_once</span>(<span class="params">out, num, buf</span>):</span></span><br><span class="line">    v7 = num</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        out, buf = buf_round(out, buf)</span><br><span class="line">        hi = (v7 &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="comment"># print(&quot;hi: &quot;, hex(hi))</span></span><br><span class="line">        v3 = catch_chmod(buf, hi)</span><br><span class="line">        low = (v7 ^ v3) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        v7 = PAIR64(low, hi)</span><br><span class="line">    num = PAIR64(v7 &amp; <span class="number">0xffffffff</span>, (v7 &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span>(<span class="params">num_buf</span>):</span></span><br><span class="line">    <span class="keyword">global</span> constant_s</span><br><span class="line">    out = init(<span class="number">0</span>, constant_s, <span class="built_in">len</span>(constant_s)) <span class="comment"># 0x7d08ff3b28b975ec</span></span><br><span class="line">    <span class="comment"># memcpy(&amp;num_buf, flagfrom16, 0x20u);</span></span><br><span class="line">    buf = [<span class="number">0</span>] * <span class="number">496</span> </span><br><span class="line">    ret_arr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num_buf)):</span><br><span class="line">        num = enc_once(out, num_buf[i], buf)</span><br><span class="line">        ret_arr.append(num)</span><br><span class="line">    <span class="keyword">return</span> ret_arr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec_once</span>(<span class="params">out, num, buf</span>):</span></span><br><span class="line">    buf_array = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        out, tmpbuf = buf_round(out, buf)</span><br><span class="line">        buf_array.append(<span class="built_in">list</span>(tmpbuf))</span><br><span class="line">        buf = tmpbuf</span><br><span class="line">    buf_array = buf_array[::-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    v7 = PAIR64(num &amp; <span class="number">0xffffffff</span>, (num &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        buf = buf_array[i]</span><br><span class="line">        low = v7 &amp; <span class="number">0xffffffff</span></span><br><span class="line">        v3 = catch_chmod(buf, low)</span><br><span class="line">        hi = (v7 &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        hi ^= v3</span><br><span class="line">        v7 = PAIR64(low, hi)</span><br><span class="line">    <span class="keyword">return</span> v7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec</span>(<span class="params">num_buf</span>):</span></span><br><span class="line">    <span class="keyword">global</span> constant_s</span><br><span class="line">    out = init(<span class="number">0</span>, constant_s, <span class="built_in">len</span>(constant_s)) <span class="comment"># 0x674a1dea4b695809</span></span><br><span class="line">    buf = [<span class="number">0</span>] * <span class="number">496</span></span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(num_buf)):</span><br><span class="line">        ret_num = dec_once(out, num_buf[i], buf)</span><br><span class="line">        ret.append(ret_num)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    num_buf = struct.unpack(<span class="string">&quot;&lt;QQQQ&quot;</span>, <span class="built_in">bytearray</span>(enc_flag))</span><br><span class="line">    out_buf = dec(num_buf)</span><br><span class="line">    flag = struct.pack(<span class="string">&quot;&lt;QQQQ&quot;</span>, *out_buf)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h3 id="stage3"><a href="#stage3" class="headerlink" title="stage3"></a>stage3</h3><p>同样的代码，把后续代码段的代码也解密出来了</p><p>其实当时这个后续代码段我没看出来是怎么跳转过去的，然后没搞懂就直接顺着代码继续逆了</p><p>现在看官方wp</p><p>说的是下面代码的栈溢出，原本v30是0，会导致SIGSEGV被second_child捕获，从而调用到second_child中的cmp</p><p>但实际上，这个栈溢出会一直到很后边才会停止，这个取决于outbuf[i]是否为0，而数据中第一个出现0的地方前面存在一个疑似地址的值</p><p>而这个值刚好溢出到把v30给覆盖了，而覆盖成0x08053b70，恰好为解密后的代码的入口点Orz</p><p>这题目的操作真的太骚了</p><p><img src="/2020/11/05/Flare-On-2020-Writeup/10-stackoverflow.png" alt="10-stackoverflow"></p><p>而当时这个函数，有些函数逆着发现，存在类似进位的操作，猜测这是一个大整数库，照着这个思路很快就把他算术逻辑逆出来了</p><p><img src="/2020/11/05/Flare-On-2020-Writeup/10-hint.png" alt="10-hint"></p><p>甚至当中胡乱解密解出来了一张图片的提示，让我发现其中一个函数其实是除法23333</p><p>最后逆出来的算术如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const1 = <span class="number">0xd1cc3447d5a9e1e6adae92faaea8770db1fab16b1568ea13c3715f2aeba9d84f</span></span><br><span class="line">const2 = <span class="number">0xc10357c7a53fa2f1ef4a5bf03a2d156039e7a57143000c8d8f45985aea41dd31</span></span><br><span class="line">const3 = <span class="number">0x480022d87d1823880d9e4ef56090b54001d343720dd77cbc5bc5692be948236c</span></span><br><span class="line">const4 = <span class="number">0x480022d87d1823880d9e4ef56090b54001d343720dd77cbc5bc5692be948236c</span></span><br><span class="line">const5 = <span class="number">0xd036c5d4e7eda23afceffbad4e087a48762840ebb18e3d51e4146f48c04697eb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># v9 = rand % const1</span></span><br><span class="line"><span class="comment"># v11 = pow(const2, v9, const1)</span></span><br><span class="line"><span class="comment"># v13 = pow(const4, v9, const1)</span></span><br><span class="line"><span class="comment"># const5 == flag * v11 % const1</span></span><br><span class="line"><span class="comment"># const3 == v13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 然后使用sage去解了</span></span><br><span class="line">v9 = discrete_log(const3,mod(const4,const1)) <span class="comment"># 因为const3和const4是一样的，这个是存在bug的</span></span><br><span class="line"><span class="built_in">print</span>(v9) </span><br><span class="line"><span class="comment"># 1 </span></span><br><span class="line"></span><br><span class="line">v11 = const2 % const1</span><br><span class="line">flag = <span class="built_in">hex</span>(const5 * v11.inverse_mod(const1) % const1)</span><br><span class="line"><span class="built_in">bytearray</span>.fromhex(flag[<span class="number">2</span>:])[::-<span class="number">1</span>]</span><br><span class="line"><span class="comment"># bytearray(b&#x27;_n0_puppi3s@flare-on.com&#x27;)</span></span><br></pre></td></tr></table></figure><p>获得最终的flag</p><p><a href="mailto:`w3lc0mE_t0_Th3_l4nD_0f_De4th_4nd_d3strUct1oN_4nd_n0_puppi3s@flare-on.com">`w3lc0mE_t0_Th3_l4nD_0f_De4th_4nd_d3strUct1oN_4nd_n0_puppi3s@flare-on.com</a> `</p><h2 id="11-rabbithole"><a href="#11-rabbithole" class="headerlink" title="11-rabbithole"></a>11-rabbithole</h2><p>这题也是够狠</p><p>flareon官方直接把一个现成的病毒进行去毒处理，然后做成一道题给我们</p><p>首先把我自己的做题过程记录下来吧，整个过程花了很长时间，重复造了一些轮子。</p><hr><p>首先题目拿到手的是一个.dat的文件</p><p>file一下</p><p><code>NTUSER.DAT: MS Windows registry file, NT/2000 or above</code></p><p>数据库文件，对windows不是很熟悉，于是网上瞎找这文件的打开方式，后来发现其实是可以直接从regedit中打开的</p><p>这其实是<code>user registry hive</code>，这个文件通常储存在<code>%USERPROFILE%</code>中，在win10下就是<code>C:/Users/&lt;username&gt;</code>里面</p><p>参考<a href="https://docs.microsoft.com/en-us/windows/win32/sysinfo/registry-hives">Registry Hives - Win32 apps | Microsoft Docs</a></p><p>这个似乎就是每个用户自己的注册表数据</p><p>然后我便开始瞎翻注册表，但是什么都没发现，里面的内容实在太多了</p><p>然后就转想，开始网上搜索关于registry hive取证的内容</p><p>很巧，最后被我找到了fireeye自己的一篇文章</p><p><a href="https://www.fireeye.com/blog/threat-research/2020/01/saigon-mysterious-ursnif-fork.html">SAIGON, the Mysterious Ursnif Fork | FireEye Inc</a></p><p>这个时候看twitter上的讨论，一堆大佬在劝：善用搜索引擎，能为你省很多时间。</p><p>看着很像呀，我还以为他们说的就是这个文章，于是我开始翻注册表，尝试找到类似开机启动的东西</p><p>但是也还是什么都没发现，最后引起我的注意是<code>Software/Timerpro</code></p><p>这名字看着像个定时器软件呀（事实证明，too naive，并且这真是巧合了）</p><p>注册表这项里面，第一项就是一个powershell脚本</p><p>开逆！</p><p>这个脚本在做一些类似dll注入的操作，而dll则是从base64解码出来</p><p>开始逆dll，发现。。真的复杂，有许多操作都不知道在干什么，而且，他也不是一个标准的dll格式</p><p>整个文件格式很奇怪，但是按照正常的文件头偏移计算，又能索引到关键的地址</p><p>用了上面文章中附录的一个脚本，转换成了PE文件 <strong>Shellcode Converter Script</strong></p><p>代码很长一段，就不贴上来了，查看源码到<a href="https://www.fireeye.com/blog/threat-research/2020/01/saigon-mysterious-ursnif-fork.html">SAIGON, the Mysterious Ursnif Fork | FireEye Inc</a></p><p>整个dll也带一些混淆，像通过文件头的索引找到某个section，对section进行解密操作</p><p>这个解密操作能够解密出来使用到的一些字符串内容。而xor解密的密钥则是跟文件的timestamp相关</p><p>前面一系列解析文件头也包含了从文件头中找到这个timestamp</p><p>然后，上面提到的那片文章给了我很大的帮助，他在文件末尾有嵌入了一些文件</p><p>这个dll中，总共有两个embedded file</p><p>并且，当中有用到的解压算法 aplib，文章中也有提到，这让我省了很多算法识别的时间</p><p>两个embbedded file中，第一个是一个RSA public key，第二个是一堆字符串</p><p>并且，通过<code>XorShiftRng</code>随机数算法，用sid作为种子的一部分，利用embbeded file中的字符串作为字符串表</p><p>生成特定的字符串，用这个作为注册表中的key值，所以其实之前看到的Timerpro是随机数生成的字段，然后被我误解成一个软件了。。。</p><p>当时还搜了好久这个软件，结果啥都没搜到</p><p>而这个sid，则是从注册表中查找<code>S-1-5-21-3823548243-3100178540-2044283163-1006</code></p><p>而RSA public key，则是用作其中一部分数据的解密，作为密钥使用serpent算法进行解密</p><p>关于这个加密算法，我当时没有找到有现成的库，是找到了一个serpent的python代码</p><p>而一开始没看仔细，直接使用ECB模式解密，发现失败，后来突然想到，会不会是CBC模式，然后手动改成了CBC模式</p><p>初始化IV用0，解出</p><p>而在Timerpro底下，包含了<code>Columncurrent</code> 、<code>Languagetheme</code>两个项，里面存着都是加密压缩过的PX文件，一个目录存32位，一个目录存64位，通过上面提到的方式解密出来</p><p>什么是PX文件？其实是有点像一开始dump出来的dll，都不是一个正规的PE文件，但是通过病毒的加载器，能成功跑起来</p><p>这个时候，我需要找到解析这些文件片段的方法</p><p>网上搜了一圈</p><p><a href="https://research.checkpoint.com/2020/gozi-the-malware-with-a-thousand-faces/">https://research.checkpoint.com/2020/gozi-the-malware-with-a-thousand-faces/</a></p><p><a href="https://github.com/0ver-fl0w/ISFB_Tools">https://github.com/0ver-fl0w/ISFB_Tools</a></p><p><a href="https://github.com/hasherezade/funky_malware_formats">https://github.com/hasherezade/funky_malware_formats</a></p><p>好家伙，才发现我网上搜了一堆的算法，拼凑起来的脚本，人家早就整理好了= =，毕竟这是个现成的病毒样本</p><p>浪费了贼多时间= =</p><p>做到这我才知道他们说的善用搜索引擎的意思……</p><p>在解出来后，主要关注几个</p><p>这些文件跟开始的dll很类似，都用着相同的字符串加密方式，以及相同的embedded file嵌入方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">RowmapGuiprotocol：     (run time library)(rtl.dll)</span><br><span class="line">这个就复杂很多了，看了下没看到什么特别的，有文件操作、Event操作</span><br><span class="line">还有ShellExecuteW</span><br><span class="line">传进去的是不知名数据，暂时看不出什么，待继续看</span><br><span class="line">big switchcase here</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WebmodeThemearchive：(45a0fcd0.dll) (netwrk.dll)</span><br><span class="line">包含WinHttp的操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WebsoftwareProcesstemplate：(8576b0d0.dll 最开始的dll)</span><br><span class="line">跟原本的exe很多相似的函数片段，包含了PRnd、还有aplib等等</span><br><span class="line">似乎就是一模一样的&#x3D; &#x3D;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WordlibSystemser：（d6306e08.dll） (explorer.dll)</span><br><span class="line">很多字符操作类似的东西，还有注册表设置等</span><br></pre></td></tr></table></figure><p>其实这个病毒主要是怎么驱动起来的我也说不清楚，整个过程分析得我很混乱，并且由于我刚开始分析的是64位文件夹下的，没有关注32位文件夹下的，以为他们完全一样</p><p>但是32位文件夹下还包含了一个配置文件，这个配置文件写明了最后储存到注册表的flag的加密密钥</p><p>一直到最后卡住，找twitter的大佬询问才解决。</p><p>然后，通过serpent解出储存在注册表中的flag</p><p><a href="mailto:`r4d1x_m4l0rum_357_cup1d1745@flare-on.com">`r4d1x_m4l0rum_357_cup1d1745@flare-on.com</a>`</p><hr><p>由于这个病毒是从真实病毒修改而来的，而很多大佬本身就是做病毒研究的工作，因此，这题对他们来说做起来应该非常快</p><p>而很多人都有提到，善用搜索引擎，因为确实是非常多人已经把里面算法、脚本打包好了</p><p>这里再说一下开始时应该怎么分析。</p><p>开始我是靠猜找到Timerpro这个关键的注册表项</p><p>而实际上，有更加靠谱的办法。。</p><p>微软有个工具叫autorun</p><p><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns">Autoruns for Windows - Windows Sysinternals | Microsoft Docs</a></p><p>这个工具可以分析windows中所有自动启动项，包括注册表、定时任务等等</p><p>借用官方wp的图，通过这个工具，能发现</p><p><img src="/2020/11/05/Flare-On-2020-Writeup/11-autorun.png" alt="11-autorun"></p><p>一个自动运行的脚本，而那串base64解码出来，正是Timerpro注册表项</p><p><code>iex (gp &#39;HKCU:\SOFTWARE\Timerpro&#39;).D</code></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>最后这题，大佬们对这个病毒做了去毒操作，，真的太强了Orz</p><p>并且patch了所有密钥相关的数据，避免病毒与原server交互</p><p>整个过程其实我写得很流水账，因为感觉这题没有什么特别的技巧可言，更多是在逆向过程学到一个又一个的骚操作</p><p>病毒分析真是有意思</p><p>这片流水账wp也从2020年10月拖到2021年4月，emmmm半年了，因为之前忙毕设忙得焦头烂额</p><p>不知道21年还有没有空继续打flareon了:) </p><p>Respect!</p>]]></content>
      
      
      
        <tags>
            
            <tag> flare-on </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flare-On 2019 Writeup</title>
      <link href="2019/10/08/Flare-On-2019-Writeup/"/>
      <url>2019/10/08/Flare-On-2019-Writeup/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>好久没更新，之前立的 toWrite plan几乎全倒了</p><p>不过比较好的是，去年flareon2018做了6/12，立了个flag今年要拿牌</p><p>现在做到了！！！</p><p>所以必须得来更新一下writeup</p><p>其实跟去年的题目比较，感觉今年前面的题目相对比较简单，因此前面做的比较快</p><p>最后卡在了最后一题，断断续续做了快20天，心态都快崩了</p><p>不过还好，最后还是拿到了牌（虽然现在还没寄到手上</p><p>不得不说，flareon总是能学到许多</p><p>下面开始描述我的解法，在记录完我的解法后，我才会提及到一些题目相关（题目设计、官方解法）</p><span id="more"></span><h2 id="1-Memecat-Battlestation"><a href="#1-Memecat-Battlestation" class="headerlink" title="1 - Memecat Battlestation"></a>1 - Memecat Battlestation</h2><p>.net直接逆，很简单，xor 一下就出来了</p><h2 id="2-Overlong"><a href="#2-Overlong" class="headerlink" title="2 - Overlong"></a>2 - Overlong</h2><p>一段data，程序只循环了0x1c次，把循环patch成0xb0次，则那块数据的长度，得到flag</p><h2 id="3-Flarebear"><a href="#3-Flarebear" class="headerlink" title="3 - Flarebear"></a>3 - Flarebear</h2><p>这是一道android题，用kotlin写的apk，直接逆</p><p>对小熊有3种操作play, feed, clean</p><p>能看到满足一定条件后会调用dancewithflag</p><p>总结一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">play</span><br><span class="line">    mass -&#x3D; 2</span><br><span class="line">    happy +&#x3D; 4</span><br><span class="line">    clean -&#x3D; 1</span><br><span class="line">feed</span><br><span class="line">    mass +&#x3D; 10</span><br><span class="line">    happy +&#x3D; 2</span><br><span class="line">    clean -&#x3D; 1</span><br><span class="line">    poo +&#x3D; 0.34</span><br><span class="line">clean</span><br><span class="line">    poo -&#x3D; 1 if poo &gt; 1</span><br><span class="line">    mass +&#x3D; 0</span><br><span class="line">    happy -&#x3D; 1</span><br><span class="line">    clean +&#x3D; 6</span><br><span class="line">    setMood</span><br><span class="line"></span><br><span class="line">setMood</span><br><span class="line">    isHappy</span><br><span class="line">    feed&#x2F;play &#x3D; [2, 2.5]</span><br><span class="line">        isEcstatic</span><br><span class="line">        mass &#x3D; 72</span><br><span class="line">        happy &#x3D; 30</span><br><span class="line">        clean &#x3D; 0</span><br><span class="line">            call danceWithFlag</span><br></pre></td></tr></table></figure><p>得到方程</p><p>-2p + 10f = 72</p><p>4p + 2f - c = 30</p><p>-p - f + 6c = 0</p><p>解出，得到flag</p><p>p = 4</p><p>f = 8</p><p>c = 2</p><h2 id="4-Dnschess"><a href="#4-Dnschess" class="headerlink" title="4 - Dnschess"></a>4 - Dnschess</h2><p>一个下国际象棋的ai，通过dns协议与server交互</p><p>包含有一个pcap数据包</p><p>chessAI会把每一步编码成类似<code>pawn-d2-d4.game-of-thrones.flare-on.com</code>的域名，然后通过dns查询得到ip</p><p>注意到得到的ip会把数据取出来操作</p><p>并得到值放进<a href="mailto:`@flare-on.com">`@flare-on.com</a>`前面的buffer上，我通过scapy从pcap中提出来ip，模拟一下操作就得到flag了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line">result = [<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x66</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x65</span>, <span class="number">0x2D</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>, <span class="number">0x2E</span>, <span class="number">0x63</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">table = [<span class="number">0x79</span>, <span class="number">0x5A</span>, <span class="number">0xB8</span>, <span class="number">0xBC</span>, <span class="number">0xEC</span>, <span class="number">0xD3</span>, <span class="number">0xDF</span>, <span class="number">0xDD</span>, <span class="number">0x99</span>, <span class="number">0xA5</span>, <span class="number">0xB6</span>, <span class="number">0xAC</span>, <span class="number">0x15</span>, <span class="number">0x36</span>, <span class="number">0x85</span>, <span class="number">0x8D</span>, <span class="number">0x09</span>, <span class="number">0x08</span>, <span class="number">0x77</span>, <span class="number">0x52</span>, <span class="number">0x4D</span>, <span class="number">0x71</span>, <span class="number">0x54</span>, <span class="number">0x7D</span>, <span class="number">0xA7</span>, <span class="number">0xA7</span>, <span class="number">0x08</span>, <span class="number">0x16</span>, <span class="number">0xFD</span>, <span class="number">0xD7</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genResult</span>(<span class="params">ip</span>):</span></span><br><span class="line">    <span class="keyword">if</span> ip[<span class="number">0</span>] != <span class="number">127</span> <span class="keyword">or</span> ip[<span class="number">3</span>] &amp; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="built_in">print</span> ip</span><br><span class="line">    a1 = ip[<span class="number">2</span>] &amp; <span class="number">0xf</span></span><br><span class="line">    result[<span class="number">2</span>*a1] = ip[<span class="number">1</span>] ^ table[<span class="number">2</span>*a1]</span><br><span class="line">    result[<span class="number">2</span>*a1+<span class="number">1</span>] = ip[<span class="number">1</span>] ^ table[<span class="number">2</span>*a1+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getIp_list</span>():</span></span><br><span class="line">    ip_list = []</span><br><span class="line">    pkts = rdpcap(<span class="string">&#x27;capture.pcap&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> pkts:</span><br><span class="line">        <span class="keyword">if</span> p.haslayer(DNS):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(p.an, DNSRR):</span><br><span class="line">               ip = p.an.rdata</span><br><span class="line">               ip_list.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, ip.split(<span class="string">&#x27;.&#x27;</span>)))) </span><br><span class="line">    <span class="keyword">return</span> ip_list</span><br><span class="line"></span><br><span class="line">ip_list = getIp_list()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ip_list:</span><br><span class="line">    genResult(ip)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>, result))</span><br><span class="line"></span><br><span class="line"><span class="comment"># LooksLikeYouLockedUpTheLookupZ@flare-on.com</span></span><br></pre></td></tr></table></figure><h2 id="5-demo"><a href="#5-demo" class="headerlink" title="5 - demo"></a>5 - demo</h2><p>demoscense</p><p>一个非常cool的程序，通过代码压缩技术把一段动画压缩到超小的文件（这个甚至还有比赛</p><p>这个关系到windows 的 directX，先安装上<code>cinst install directx</code></p><p><em>简单吐槽一下，这题主要时间都费在翻directX的文档上了</em></p><p>由于该代码加壳了（猜测是个压缩壳</p><p>所以得先脱壳才能分析，window嘛，直接调，</p><p>start定位到004000d3 retn指令</p><p>会直接跳转到0x420000继续进行程序的逻辑</p><p>跳转过去后，逻辑什么的都能看到了</p><p><img src="/2019/10/08/Flare-On-2019-Writeup/5-dx_init.png" alt="5-dx_init"></p><p>在查了半天的DirectX文档后，基本确定，下面两个函数是绘图相关的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(*(*off_430050 + <span class="number">12</span>))(off_430050, <span class="number">0</span>); </span><br><span class="line">(*(*off_430054 + <span class="number">12</span>))(off_430054, <span class="number">0</span>); </span><br></pre></td></tr></table></figure><p>两个渲染，430050是flare-on的mash</p><p>430054是flag的mash</p><p>但是现在屏幕上只显示出来flare-on logo的图案，怎么让他把flag现实出来呢？</p><p>我一开始觉得，这个原因是flare-on的logo覆盖了flag（类似不透明图层），导致flag不能显示出来</p><p>于是我patch掉第一个渲染<code>(*(*off_430050 + 12))(off_430050, 0);</code></p><p>发现图案全没了（开始智障之旅= =）</p><p>事实证明，我对directX的使用非常不熟悉</p><p>在尝试了很久把背景色改透明等等的操作后，我突然想到，为什么我不直接把第一个渲染改成flag的渲染就好了。。。</p><p>直接patch program把430050改成430054</p><p>得到flag</p><p><img src="/2019/10/08/Flare-On-2019-Writeup/5-flag.png" alt="5-flag"></p><hr><p><strong>PS:</strong> 从这题开始，算是终于进入flareon有意思的部分了，前四题有点水水的</p><p>这题官方还给出别的解法</p><ol><li>通过api trace得到directX调用的顺序，然后可以直接dump出图案的model obj，就可以直接用一些软件直接查看了</li><li>代码中渲染了flag的图案，至于为什么不能显示出来，是因为设置了transform，移动了图形的位置，此时flag图案的位置摄像机背后，自然无法显示到界面上</li></ol><h2 id="6-bmphide"><a href="#6-bmphide" class="headerlink" title="6 - bmphide"></a>6 - bmphide</h2><p>这题上来就又是一个.net</p><p><code>bmphide.exe</code>可以把一段数据（可以是文本或任意东西），隐藏到一张bmp图片底下</p><p>逆了一段时间，大概看到几个关键点</p><ol><li>前面调用一个未知函数，里面非常复杂，不知道在干什么，直接看后面</li><li>读数据，进行一轮操作变换后，以LSB的方式编码到bmp图片底下</li></ol><p>LSB的方式如下</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Color pixel = bm.GetPixel(i, j);</span><br><span class="line"><span class="built_in">int</span> red = ((<span class="built_in">int</span>)pixel.R &amp; <span class="number">248</span>) | ((<span class="built_in">int</span>)data[num] &amp; <span class="number">7</span>);</span><br><span class="line"><span class="built_in">int</span> green = ((<span class="built_in">int</span>)pixel.G &amp; <span class="number">248</span>) | (data[num] &gt;&gt; <span class="number">3</span> &amp; <span class="number">7</span>);</span><br><span class="line"><span class="built_in">int</span> blue = ((<span class="built_in">int</span>)pixel.B &amp; <span class="number">252</span>) | (data[num] &gt;&gt; <span class="number">6</span> &amp; <span class="number">3</span>);</span><br><span class="line">Color color = Color.FromArgb(<span class="number">0</span>, red, green, blue);</span><br><span class="line">bm.SetPixel(i, j, color);</span><br></pre></td></tr></table></figure><p>那么，就是怎么逆回来的问题了</p><p>去调了一下代码</p><p>？？？</p><p>抛异常了（借用一下官方的图）</p><p><img src="/2019/10/08/Flare-On-2019-Writeup/6-exception.png" alt="6-exception"></p><p>调了几遍。似乎还是不知道什么原因，只好静态逆了= =</p><p>再仔细看了一下，当中的函数，有很大一部分是不用逆的，他们用于生成中间的index值，直接抄就好了</p><p>program a, b, c, d, e, f, g -&gt; getByte</p><p>program h -&gt; getByteArray</p><p>program i -&gt; change input Bitmap</p><p>program j -&gt; getInt</p><p>于是写了个逆，跑了一下</p><p>。。。</p><p>。。。</p><p>？？？</p><p>跑出来是乱码，继续改改，好像没什么问题，但是跑出来为什么是乱码</p><p>继续细看</p><p>这个时候我注意到一个点，有几个类似数据处理的函数定义了，但是没有被调用</p><p>同时这4个函数<code>a, b, c, d</code>，ac被调用了，bd没被调用，但是他们的函数类型（参数类型、返回类型）是一样的</p><p>因为在写逆的时候发现函数c其实是不可逆的，那么就可以猜测其实在init那个很复杂的函数里面把ac替换成了bd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d (b, r): right rotate b, r bits</span><br><span class="line">b (b, r): left rotate b, r bits</span><br></pre></td></tr></table></figure><p>回去细看init中根据函数hash搜索部分的代码，验证了我的想法，他就是替换了两个函数的内容！</p><p>那么把逆的ac修改成bd后，再跑</p><p>。。。</p><p>。。。</p><p>？？？</p><p>还是乱码？？？什么情况</p><p>init还有些很奇怪的代码，只能继续看看了</p><p>这个时候发现他会调用一些<code>WriteIntPtr</code>、<code>getJit</code>之类的函数，难道他还修改了一些常数？</p><p>这个时候还注意到一个点，有个G函数没被调用！他的函数类型跟F是一样的，而F是生成index的关键函数！</p><p>看来F也被hook成G了，再结合到getJit上下文，大概就能猜出来修改的是什么常数了</p><p>在这里猜的时候，我发现了只要把dnspy一些反反调试机制保护什么的关掉就能调试了，虽然单步好像不太好使，但能让我检验F函数的返回值，的确就是被hook成修改过的G函数了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">programG</span>(<span class="params">idx</span>):</span></span><br><span class="line">    <span class="comment"># b = ((idx + 1) * 3988292384) &amp; 0xff</span></span><br><span class="line">    <span class="comment"># k = ((idx + 2) * 1669101435) &amp; 0xff</span></span><br><span class="line">    b = ((idx + <span class="number">1</span>) * <span class="number">309030853</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    k = ((idx + <span class="number">2</span>) * <span class="number">209897853</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">return</span> b ^ k</span><br></pre></td></tr></table></figure><p>solve.py （代码其实不算长，就不放github了）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCheckSumTable</span>():</span></span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        num = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            num = (<span class="number">1611621881</span> ^ num &gt;&gt; <span class="number">1</span>) <span class="keyword">if</span> (num &amp; <span class="number">1</span>) != <span class="number">0</span> <span class="keyword">else</span> num &gt;&gt; <span class="number">1</span></span><br><span class="line">        ret.append(num)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">programA</span>(<span class="params">b, r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (b + r ^ r) &amp; <span class="number">255</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">programB</span>(<span class="params">b, r</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">        b2 = (b &amp; <span class="number">128</span>) / <span class="number">128</span></span><br><span class="line">        b = (b * <span class="number">2</span> &amp; <span class="number">0xff</span>) + b2</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">programC</span>(<span class="params">b, r</span>):</span></span><br><span class="line">    b2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) == <span class="number">1</span>:</span><br><span class="line">            b2 = (b2 * <span class="number">2</span> + <span class="number">1</span> &amp; <span class="number">0xff</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            b2 = (b2 - <span class="number">1</span> &amp; <span class="number">0xff</span>)</span><br><span class="line">    <span class="keyword">return</span> b2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">programD</span>(<span class="params">b, r</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">        b2 = (b &amp; <span class="number">1</span>) * <span class="number">128</span></span><br><span class="line">        b = (b / <span class="number">2</span> &amp; <span class="number">0xff</span>) + b2</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">programE</span>(<span class="params">b, k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> b ^ k</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">programF</span>(<span class="params">idx</span>):</span></span><br><span class="line">    array = [<span class="number">121</span>, <span class="number">255</span>, <span class="number">214</span>, <span class="number">60</span>, <span class="number">106</span>, <span class="number">216</span>, <span class="number">149</span>, <span class="number">89</span>, <span class="number">96</span>, <span class="number">29</span>, <span class="number">81</span>, <span class="number">123</span>, <span class="number">182</span>, <span class="number">24</span>, <span class="number">167</span>, <span class="number">252</span>, <span class="number">88</span>, <span class="number">212</span>, <span class="number">43</span>, <span class="number">85</span>, <span class="number">181</span>, <span class="number">86</span>, <span class="number">108</span>, <span class="number">213</span>, <span class="number">50</span>, <span class="number">78</span>, <span class="number">247</span>, <span class="number">83</span>, <span class="number">193</span>, <span class="number">35</span>, <span class="number">135</span>, <span class="number">217</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">45</span>, <span class="number">236</span>, <span class="number">134</span>, <span class="number">102</span>, <span class="number">76</span>, <span class="number">74</span>, <span class="number">153</span>, <span class="number">34</span>, <span class="number">39</span>, <span class="number">10</span>, <span class="number">192</span>, <span class="number">202</span>, <span class="number">71</span>, <span class="number">183</span>, <span class="number">185</span>, <span class="number">175</span>, <span class="number">84</span>, <span class="number">118</span>, <span class="number">9</span>, <span class="number">158</span>, <span class="number">66</span>, <span class="number">128</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">46</span>, <span class="number">227</span>, <span class="number">132</span>, <span class="number">240</span>, <span class="number">122</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">186</span>, <span class="number">30</span>, <span class="number">157</span>, <span class="number">1</span>, <span class="number">154</span>, <span class="number">144</span>, <span class="number">124</span>, <span class="number">152</span>, <span class="number">187</span>, <span class="number">32</span>, <span class="number">87</span>, <span class="number">141</span>, <span class="number">103</span>, <span class="number">189</span>, <span class="number">12</span>, <span class="number">53</span>, <span class="number">222</span>, <span class="number">206</span>, <span class="number">91</span>, <span class="number">20</span>, <span class="number">174</span>, <span class="number">49</span>, <span class="number">223</span>, <span class="number">155</span>, <span class="number">250</span>, <span class="number">95</span>, <span class="number">31</span>, <span class="number">98</span>, <span class="number">151</span>, <span class="number">179</span>, <span class="number">101</span>, <span class="number">47</span>, <span class="number">17</span>, <span class="number">207</span>, <span class="number">142</span>, <span class="number">199</span>, <span class="number">3</span>, <span class="number">205</span>, <span class="number">163</span>, <span class="number">146</span>, <span class="number">48</span>, <span class="number">165</span>, <span class="number">225</span>, <span class="number">62</span>, <span class="number">33</span>, <span class="number">119</span>, <span class="number">52</span>, <span class="number">241</span>, <span class="number">228</span>, <span class="number">162</span>, <span class="number">90</span>, <span class="number">140</span>, <span class="number">232</span>, <span class="number">129</span>, <span class="number">114</span>, <span class="number">75</span>, <span class="number">82</span>, <span class="number">190</span>, <span class="number">65</span>, <span class="number">2</span>, <span class="number">21</span>, <span class="number">14</span>, <span class="number">111</span>, <span class="number">115</span>, <span class="number">36</span>, <span class="number">107</span>, <span class="number">67</span>, <span class="number">126</span>, <span class="number">80</span>, <span class="number">110</span>, <span class="number">23</span>, <span class="number">44</span>, <span class="number">226</span>, <span class="number">56</span>, <span class="number">7</span>, <span class="number">172</span>, <span class="number">221</span>, <span class="number">239</span>, <span class="number">161</span>, <span class="number">61</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">99</span>, <span class="number">171</span>, <span class="number">97</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">28</span>, <span class="number">166</span>, <span class="number">209</span>, <span class="number">229</span>, <span class="number">136</span>, <span class="number">130</span>, <span class="number">164</span>, <span class="number">194</span>, <span class="number">243</span>, <span class="number">220</span>, <span class="number">25</span>, <span class="number">169</span>, <span class="number">105</span>, <span class="number">238</span>, <span class="number">245</span>, <span class="number">215</span>, <span class="number">195</span>, <span class="number">203</span>, <span class="number">170</span>, <span class="number">16</span>, <span class="number">109</span>, <span class="number">176</span>, <span class="number">27</span>, <span class="number">184</span>, <span class="number">148</span>, <span class="number">131</span>, <span class="number">210</span>, <span class="number">231</span>, <span class="number">125</span>, <span class="number">177</span>, <span class="number">26</span>, <span class="number">246</span>, <span class="number">127</span>, <span class="number">198</span>, <span class="number">254</span>, <span class="number">6</span>, <span class="number">69</span>, <span class="number">237</span>, <span class="number">197</span>, <span class="number">54</span>, <span class="number">59</span>, <span class="number">137</span>, <span class="number">79</span>, <span class="number">178</span>, <span class="number">139</span>, <span class="number">235</span>, <span class="number">249</span>, <span class="number">230</span>, <span class="number">233</span>, <span class="number">204</span>, <span class="number">196</span>, <span class="number">113</span>, <span class="number">120</span>, <span class="number">173</span>, <span class="number">224</span>, <span class="number">55</span>, <span class="number">92</span>, <span class="number">211</span>, <span class="number">112</span>, <span class="number">219</span>, <span class="number">208</span>, <span class="number">77</span>, <span class="number">191</span>, <span class="number">242</span>, <span class="number">133</span>, <span class="number">244</span>, <span class="number">168</span>, <span class="number">188</span>, <span class="number">138</span>, <span class="number">251</span>, <span class="number">70</span>, <span class="number">150</span>, <span class="number">145</span>, <span class="number">248</span>, <span class="number">180</span>, <span class="number">218</span>, <span class="number">42</span>, <span class="number">15</span>, <span class="number">159</span>, <span class="number">104</span>, <span class="number">22</span>, <span class="number">37</span>, <span class="number">72</span>, <span class="number">63</span>, <span class="number">234</span>, <span class="number">147</span>, <span class="number">200</span>, <span class="number">253</span>, <span class="number">100</span>, <span class="number">19</span>, <span class="number">73</span>, <span class="number">5</span>, <span class="number">57</span>, <span class="number">201</span>, <span class="number">51</span>, <span class="number">156</span>, <span class="number">41</span>, <span class="number">143</span>, <span class="number">68</span>, <span class="number">8</span>, <span class="number">160</span>, <span class="number">58</span>]</span><br><span class="line">    </span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    num2 = <span class="number">0</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(idx+<span class="number">1</span>):</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        num %= <span class="number">256</span></span><br><span class="line">        num2 += array[num]</span><br><span class="line">        num2 %= <span class="number">256</span></span><br><span class="line">        array[num], array[num2] = array[num2], array[num]</span><br><span class="line">        result = array[(array[num] + array[num2]) % <span class="number">256</span>]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">programG</span>(<span class="params">idx</span>):</span></span><br><span class="line">    <span class="comment"># b = ((idx + 1) * 3988292384) &amp; 0xff</span></span><br><span class="line">    <span class="comment"># k = ((idx + 2) * 1669101435) &amp; 0xff</span></span><br><span class="line">    b = ((idx + <span class="number">1</span>) * <span class="number">309030853</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    k = ((idx + <span class="number">2</span>) * <span class="number">209897853</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">return</span> b ^ k</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">programH</span>(<span class="params">in_data</span>):</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    ret = [<span class="number">0</span>] * <span class="built_in">len</span>(in_data)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(in_data)):</span><br><span class="line">        num2 = programG(num)</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        num3 = in_data[i]</span><br><span class="line">        num3 = programE(num3, num2)</span><br><span class="line">        num3 = programB(num3, <span class="number">7</span>)</span><br><span class="line">        </span><br><span class="line">        num4 = programG(num)</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        num3 = programE(num3, num4)</span><br><span class="line">        num3 = programD(num3, <span class="number">3</span>)</span><br><span class="line">        ret[i] = num3</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">programJ</span>(<span class="params">z</span>):</span></span><br><span class="line">    b = <span class="number">5</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    value = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    bytes_v = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> b == <span class="number">1</span>:</span><br><span class="line">            num += <span class="number">4</span></span><br><span class="line">            b += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> b == <span class="number">2</span>:</span><br><span class="line">            num = num * <span class="number">2738</span></span><br><span class="line">            b += <span class="number">8</span></span><br><span class="line">        <span class="keyword">elif</span> b == <span class="number">3</span>:</span><br><span class="line">            num += programF(<span class="number">6</span>)</span><br><span class="line">            b += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> b == <span class="number">4</span>:</span><br><span class="line">            z = programB(z, <span class="number">1</span>)</span><br><span class="line">            b += <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> b == <span class="number">5</span>:</span><br><span class="line">            num = <span class="built_in">int</span>(<span class="string">&#x27;1F7D1482&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">            b -= <span class="number">3</span></span><br><span class="line">        <span class="keyword">elif</span> b == <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> b == <span class="number">7</span>:</span><br><span class="line">            num += <span class="built_in">int</span>(value)</span><br><span class="line">            b -= <span class="number">6</span></span><br><span class="line">        <span class="keyword">elif</span> b == <span class="number">10</span>:</span><br><span class="line">            bytes_v = <span class="string">&#x27;MzQxOTk=&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">            b += <span class="number">4</span></span><br><span class="line">        <span class="keyword">elif</span> b == <span class="number">14</span>:</span><br><span class="line">            value = bytes_v</span><br><span class="line">            b -= <span class="number">7</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (z ^ num) &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extractData</span>():</span></span><br><span class="line">    img = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag.bmp&#x27;</span>).convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(img.width):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(img.height):</span><br><span class="line">            r, g, b = img.getpixel((i, j))</span><br><span class="line">            num = (r &amp; <span class="number">7</span>) | ((g &amp; <span class="number">7</span>) &lt;&lt; <span class="number">3</span>) | ((b &amp; <span class="number">3</span>) &lt;&lt; <span class="number">6</span>) </span><br><span class="line">            data.append(num)</span><br><span class="line">    </span><br><span class="line">    r, g, b = img.getpixel((<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    num = (r &amp; <span class="number">7</span>) | ((g &amp; <span class="number">7</span>) &lt;&lt; <span class="number">3</span>) | ((b &amp; <span class="number">3</span>) &lt;&lt; <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span> num</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dataDeTranslate</span>(<span class="params">data</span>):</span></span><br><span class="line">    result = []</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">        num2 = programG(num)</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        num4 = programG(num)</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        num3 = d</span><br><span class="line">        num3 = programB(num3, <span class="number">3</span>)</span><br><span class="line">        num3 ^= num4</span><br><span class="line">        num3 = programD(num3, <span class="number">7</span>)</span><br><span class="line">        num3 ^= num2</span><br><span class="line">        result.append(num3 &amp; <span class="number">0xff</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag2.bmp&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>, result)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = extractData()</span><br><span class="line">dataDeTranslate(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>处理运行得到flag.bmp</p><p>还是一张普通的图，再把flag.bmp输入得到flag2.bmp，得到真正的flag</p><p><img src="/2019/10/08/Flare-On-2019-Writeup/6-flag.bmp" alt="6-flag"></p><p><img src="/2019/10/08/Flare-On-2019-Writeup/6-flag2.bmp" alt="6-flag2"></p><hr><p><strong>PS:</strong> 这题算是.net的骚操作了，对.net完全不熟，真的脑壳疼，全程靠猜</p><p>至于为什么不能调试，这其实又是.net的一个骚操作</p><p>根据官方writeup，这是一个anti-debug，没太看懂是什么原理，似乎他是会把getJit hook加上IncrementMaxStack，但是还是没懂为什么就抛异常了</p><p>然后把dnspy的反反调试去掉就又好了</p><p>官方的一种解法很值得我们学习：</p><p><strong>Black Box Analysis</strong></p><p>通过对黑盒输入空白图片，统计输出规律，进行暴力破解还原隐藏的byte</p><p>详细方法可参考官方题解</p><p><a href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/FlareOn6_Challenge6_Solution_BMPHIDE.pdf">https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/FlareOn6_Challenge6_Solution_BMPHIDE.pdf</a></p><p>官方的另一种解法就是通过写逆了</p><h2 id="7-wopr"><a href="#7-wopr" class="headerlink" title="7 - wopr"></a>7 - wopr</h2><p>这题乍一看不知道什么鬼，但其实看一下搜到的strings就能发现许多python相关的字符串</p><p>可以推断出用的pyinstaller打的包</p><p>通过<a href="https://github.com/countercept/python-exe-unpacker提取出pyc">https://github.com/countercept/python-exe-unpacker提取出pyc</a></p><p>提取出来要注意这是python3的pyc，有些pyc缺少了文件头，需要自己加上，有些不用，不然用uncompyle6不能反编译</p><p>但是extract出来一大堆文件，里面还包含不少库文件，怎么定位到到底是哪个文件呢？这个提取出来不像别的包含跟exe同名的script</p><p>我用的方法非常简单，跑起来，ctrl+c</p><p><img src="/2019/10/08/Flare-On-2019-Writeup/7-identify.png" alt="7-identify"></p><p>然后给cleanup加上pyc header，这里注意python的版本，在extract的时候可以得到</p><p><code>header = [0x42, 0x0d, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]</code></p><p>他会通过</p><p><code>code = lzma.decompress(fire(eye(__doc__.encode()), *bytes*([i]) + BOUNCE))</code></p><p>提取出隐藏的代码。里面许多函数不需要逆，直接cv了用就好</p><p>但这里直接跑是拿不到code的</p><p>注意<code>__doc__.encode()</code>，从doc里拿到的全是空格，怎么可能包含数据，这种tricks以前就遇到过了，用tab+space的组合隐藏数据，直接查看pyc的确能看到一大堆tab+space组合的数据，看来是uncompyle6把数据抹掉了</p><p>直接提出来就拿到真实跑的代码了</p><p>然后就能发现一堆约束，直接用z3解就完事了</p><p>其中一个关键的key是binary的代码段md5，要先计算出reloc固定的偏移，原代码中是直接搜索本进程的内存，想要直接沿用代码，必须注入进去，这步似乎挺麻烦的，因为我直接理解后手动计算了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">patchText</span>(<span class="params">data, reloc, base</span>):</span></span><br><span class="line">    e = <span class="number">0</span></span><br><span class="line">    textvaddr = <span class="number">0x1000</span></span><br><span class="line">    <span class="comment"># cal = 0</span></span><br><span class="line">    <span class="keyword">while</span> e &lt;= <span class="built_in">len</span>(reloc) - <span class="number">8</span>:</span><br><span class="line">        addr, size = struct.unpack_from(<span class="string">&#x27;=II&#x27;</span>, reloc, e)</span><br><span class="line">        <span class="keyword">if</span> addr == <span class="number">0</span> <span class="keyword">and</span> size == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        slot = reloc[e+<span class="number">8</span>: e+size]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(slot) &gt;&gt; <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># print &#x27;solt: &#x27; + str(i)</span></span><br><span class="line">            value, = struct.unpack_from(<span class="string">&#x27;=H&#x27;</span>, slot, <span class="number">2</span>*i)</span><br><span class="line">            f = value &gt;&gt; <span class="number">12</span></span><br><span class="line">            <span class="keyword">if</span> f != <span class="number">3</span>: <span class="keyword">continue</span></span><br><span class="line">            value = value &amp; <span class="number">0xfff</span></span><br><span class="line">            ready = addr + value - textvaddr</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ready &lt; <span class="built_in">len</span>(data):</span><br><span class="line">                <span class="comment"># numstr = (struct.unpack_from(&#x27;=I&#x27;, data, ready)[0] - base)</span></span><br><span class="line">                <span class="comment"># print hex(ready) + &#x27; &#x27; + hex(numstr)</span></span><br><span class="line">                <span class="comment"># print hex(ready)</span></span><br><span class="line">                <span class="comment"># data = data[:ready] + struct.pack(&#x27;=I&#x27;, numstr) + data[ready+4:]</span></span><br><span class="line">                struct.pack_into(<span class="string">&#x27;=I&#x27;</span>, data, ready, (struct.unpack_from(<span class="string">&#x27;=I&#x27;</span>, data, ready)[<span class="number">0</span>] - base))</span><br><span class="line"></span><br><span class="line">        e += size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getH</span>():</span></span><br><span class="line">    data = <span class="built_in">open</span>(<span class="string">&#x27;7 - wopr/wopr.exe&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    textdata = data[<span class="number">0x400</span>:<span class="number">0x400</span>+<span class="number">0x1f224</span>]</span><br><span class="line">    reloc = data[<span class="number">0x49a00</span>:<span class="number">0x49a00</span>+<span class="number">0x17b8</span>]</span><br><span class="line">    data = patchText(<span class="built_in">bytearray</span>(textdata), <span class="built_in">bytearray</span>(reloc), <span class="number">0x400000</span>)</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(data).digest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">h</span>):</span></span><br><span class="line">    x = [BitVec(<span class="string">&#x27;x&#x27;</span>+<span class="built_in">str</span>(i), <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    s = Solver()</span><br><span class="line">    s.add(h[<span class="number">0</span>] == x[<span class="number">2</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">14</span>])</span><br><span class="line">    s.add(h[<span class="number">1</span>] == x[<span class="number">0</span>] ^ x[<span class="number">1</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>])</span><br><span class="line">    s.add(h[<span class="number">2</span>] == x[<span class="number">0</span>] ^ x[<span class="number">1</span>] ^ x[<span class="number">2</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">5</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">    s.add(h[<span class="number">3</span>] == x[<span class="number">5</span>] ^ x[<span class="number">6</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">    s.add(h[<span class="number">4</span>] == x[<span class="number">1</span>] ^ x[<span class="number">6</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">    s.add(h[<span class="number">5</span>] == x[<span class="number">0</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">    s.add(h[<span class="number">6</span>] == x[<span class="number">1</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">    s.add(h[<span class="number">7</span>] == x[<span class="number">0</span>] ^ x[<span class="number">1</span>] ^ x[<span class="number">2</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">14</span>])</span><br><span class="line">    s.add(h[<span class="number">8</span>] == x[<span class="number">1</span>] ^ x[<span class="number">2</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">5</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">12</span>])</span><br><span class="line">    s.add(h[<span class="number">9</span>] == x[<span class="number">6</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">    s.add(h[<span class="number">10</span>] == x[<span class="number">0</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">8</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">    s.add(h[<span class="number">11</span>] == x[<span class="number">0</span>] ^ x[<span class="number">2</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">6</span>] ^ x[<span class="number">13</span>])</span><br><span class="line">    s.add(h[<span class="number">12</span>] == x[<span class="number">0</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">6</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">    s.add(h[<span class="number">13</span>] == x[<span class="number">2</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">4</span>] ^ x[<span class="number">5</span>] ^ x[<span class="number">6</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">12</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>])</span><br><span class="line">    s.add(h[<span class="number">14</span>] == x[<span class="number">1</span>] ^ x[<span class="number">2</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">5</span>] ^ x[<span class="number">7</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">14</span>] ^ x[<span class="number">15</span>])</span><br><span class="line">    s.add(h[<span class="number">15</span>] == x[<span class="number">1</span>] ^ x[<span class="number">3</span>] ^ x[<span class="number">5</span>] ^ x[<span class="number">9</span>] ^ x[<span class="number">10</span>] ^ x[<span class="number">11</span>] ^ x[<span class="number">13</span>] ^ x[<span class="number">15</span>])</span><br><span class="line"></span><br><span class="line">    s.check()</span><br><span class="line">    result = s.model()</span><br><span class="line">    <span class="keyword">return</span> [result.get_interp(x[i]).as_long() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fire</span>(<span class="params">wood, bounce</span>):</span></span><br><span class="line">    meaning = <span class="built_in">bytearray</span>(wood)</span><br><span class="line">    bounce = <span class="built_in">bytearray</span>(bounce)</span><br><span class="line">    regard = <span class="built_in">len</span>(bounce)</span><br><span class="line">    manage = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prospect</span>(<span class="params">*financial</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(financial) % <span class="number">256</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blade</span>(<span class="params">feel, cassette</span>):</span></span><br><span class="line">        cassette = prospect(cassette, manage[feel])</span><br><span class="line">        manage[feel], manage[cassette] = manage[cassette], manage[feel]</span><br><span class="line">        <span class="keyword">return</span> cassette</span><br><span class="line"></span><br><span class="line">    cassette = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> feel <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        cassette = prospect(cassette, bounce[(feel % regard)])</span><br><span class="line">        cassette = blade(feel, cassette)</span><br><span class="line"></span><br><span class="line">    cassette = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> pigeon, _ <span class="keyword">in</span> <span class="built_in">enumerate</span>(meaning):</span><br><span class="line">        feel = prospect(pigeon, <span class="number">1</span>)</span><br><span class="line">        cassette = blade(feel, cassette)</span><br><span class="line">        meaning[pigeon] ^= manage[prospect(manage[feel], manage[cassette])]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(meaning)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFlag</span>(<span class="params">x</span>):</span></span><br><span class="line">    eye = [<span class="number">219</span>, <span class="number">232</span>, <span class="number">81</span>, <span class="number">150</span>, <span class="number">126</span>, <span class="number">54</span>, <span class="number">116</span>, <span class="number">129</span>, <span class="number">3</span>, <span class="number">61</span>, <span class="number">204</span>, <span class="number">119</span>, <span class="number">252</span>, <span class="number">122</span>, <span class="number">3</span>, <span class="number">209</span>, <span class="number">196</span>, <span class="number">15</span>, <span class="number">148</span>, <span class="number">173</span>, <span class="number">206</span>, <span class="number">246</span>, <span class="number">242</span>, <span class="number">200</span>, <span class="number">201</span>, <span class="number">167</span>, <span class="number">2</span>, <span class="number">102</span>, <span class="number">59</span>, <span class="number">122</span>, <span class="number">81</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">23</span>]</span><br><span class="line">    flag = fire(eye, x).decode()</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    xor = [<span class="number">212</span>, <span class="number">162</span>, <span class="number">242</span>, <span class="number">218</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">50</span>, <span class="number">31</span>, <span class="number">125</span>, <span class="number">112</span>, <span class="number">249</span>, <span class="number">83</span>, <span class="number">55</span>, <span class="number">187</span>, <span class="number">131</span>, <span class="number">206</span>]</span><br><span class="line">    h = getH()</span><br><span class="line">    h = [<span class="built_in">ord</span>(h[i]) ^ xor[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    x = solve(h)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>, x))</span><br><span class="line">    <span class="built_in">print</span> getFlag(x)    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>PS：</strong>这题官方的解法中规中矩，没有太特别的地方</p><p>看了一下别人的解法，是直接dump memory修改了一下代码直接用的</p><p>flag是 <a href="mailto:L1n34R_4L93bR4_i5_FuN@flare-on.com">L1n34R_4L93bR4_i5_FuN@flare-on.com</a></p><p>emmm？linear algebra？ 🙃</p><h2 id="8-snake"><a href="#8-snake" class="headerlink" title="8 - snake"></a>8 - snake</h2><p>居然是个nes的镜像</p><p>找了一些资料</p><p><a href="http://wiki.nesdev.com/w/index.php/Bad_Apple">http://wiki.nesdev.com/w/index.php/Bad_Apple</a></p><p><a href="http://wiki.nesdev.com/w/index.php/Emulators">http://wiki.nesdev.com/w/index.php/Emulators</a></p><p>然后选择了一款看着挺好用的模拟器</p><p>FCEUX emulator</p><p>有点像cheat Engine的做法</p><p>可以在内存中搜索值，然后可以定位到吃苹果的个数，也就是分数值</p><p>在那个内存设定break in read</p><p>就可以在吃到苹果的一刻断下，查看附近代码，能看到两个关键点</p><p>cmp 0x33 和 cmp 0x4</p><p>然后修改内存后，flag就出来了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x0025: 吃的苹果个数        0x33时进行下一关</span><br><span class="line">0x0027: 当前速度（关卡？）   0x04时...flag出来了</span><br></pre></td></tr></table></figure><p><img src="/2019/10/08/Flare-On-2019-Writeup/8-getflag.png" alt="8-getflag"></p><p><strong>PS:</strong>这题是真的很简单呀</p><p>在twitter上看到有人真的靠玩出来的😂 tqltql</p><p>官方还提到一种做法，是跟NES的PPU data相关的</p><p>Nes把图案显示到屏幕，是通过把像下面的title map写到PPU Name Table上的</p><p>map的时候，按下面Normal title map，0-9A-Z应该是对应着从数字0数到35，但是通过模拟器的PPU viewer，可以看到他被打乱的，同时通过调试可以看到他还做了一些小混淆，计算显示时把data-0x10，所以通过这种方法恢复后，就可以直接从binary中搜到flag了</p><p><img src="/2019/10/08/Flare-On-2019-Writeup/8-ppu.png" alt="8-ppu"></p><h2 id="9-reloadered"><a href="#9-reloadered" class="headerlink" title="9 - reloadered"></a>9 - reloadered</h2><p>main逻辑很简单，但是还原不出来flag</p><p>拿其中一个有效flag输入是显示错误的（wrong key），但是在调试的时候则显示正确</p><p>message提到</p><blockquote><p> I hear that it caused problems when trying to analyze it with ghidra.</p></blockquote><p>似乎用ghidra分析会报异常？</p><p>不过用ida没事</p><p>并且用OD调试的时候，发现在原main逻辑代码底下有另外一套相似的代码，也包含wrong key</p><p>看来，程序应该是做了一些有趣的骚操作</p><p>尝试了几次，发现了一个东西，就是我反复执行的时候，有时候显示的UI界面不一样！</p><p>有时包含logo，有时只有单独一行字符</p><p>尝试了一下，捉摸不到显示的规律，结合ida分析，一开始分析的代码应该是包含logo的那个</p><p>不知道是什么原理，直接在ida中搜索找不到相关的代码</p><p>检查了一下md5，binary是一直没有任何修改的</p><p>换种调试方法</p><p>直接启动后，通过attach上去调试</p><p>发现其rebase到0x0010000的位置</p><p>在0x112D0发现奇怪的代码，里面还包含了GetModuleHandleA(0)的函数</p><p>大致看了一下是直接在进程了修改了相关代码，运行完以后直接就一大片nop掉了</p><p>前面还看到了反调试的代码，还有很多不知道什么check，但是不重要，因为我们已经拿到代码了</p><p>代码非常简单，跟前面的逻辑差不多</p><p>直接就能解出来flag了</p><hr><p><strong>PS:</strong> 89这两题，感觉就有点过于简单了</p><p>但是对于这题，背后实现原理远比解题要有意思</p><p>为什么会显示不同的逻辑？</p><p>首先，正常逻辑包含有几部分的代码</p><p>anti-vm, anti-debug, decoding, testing the password</p><p>而关键位置anti-vm部分是通过时间检测实现的，这是个非常玄的检测方式，这也就说明了直接跑为什么有时会显示正常逻辑，有时候会显示假逻辑</p><p>但是直接从start分析也没那么好分析</p><p>隐藏函数在0x112d0的偏移，但是跳转过去会查看到一大片nop</p><p>官方wp没有详细说明这个函数是怎么生成的</p><p>似乎是跟base relocation table有关？</p><p>事实是，这跟PE的加载机制有关，这片代码不是从start的地方生成的，只要binary加载到内存上就会生成这片代码</p><p>具体查看<a href="https://corkamiwiki.github.io/PE#relocations">https://corkamiwiki.github.io/PE#relocations</a></p><p>文档也给出了实现代码<a href="https://github.com/angea/corkami/blob/master/src/PE/reloccrypt.asm">https://github.com/angea/corkami/blob/master/src/PE/reloccrypt.asm</a></p><p>看了一下，没太看懂= =，这应该算是一种基于PE loader操作的加密方式</p><h2 id="10-Mugatu"><a href="#10-Mugatu" class="headerlink" title="10 - Mugatu"></a>10 - Mugatu</h2><p>这题一开始分析的时候看得我一头雾水，各种api乱调用的感觉</p><p>行吧，调试看看，结果一调试发现，实际的import table跟显示出来的不一样！</p><p>看来是做了些混淆</p><p>对PE不熟悉，手动根据调试信息恢复了一下导入表，总算能正常静态分析了</p><p>首先，这是一个勒索病毒，会把gif图片加密</p><p>但是直接分析没什么特别的头绪，程序从资源中加载了两张图片，分别为G和F</p><p>那么这两张什么图片呢？</p><p>直接debug跟踪了一下，把图片数据dump了出来，发现。。。F在用BitBlt的xor处理完后是个dll</p><p>总结一下是这么个操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 获取本地信息Src</span><br><span class="line">2. http get获得xml，把本地信息Src与title进行循环xor得到SrcXor</span><br><span class="line">3. 组成packet： 0x1FACEEEE | Size | SrcXor ， 进行base64编码，得到Base64Packet</span><br><span class="line">4. 获取到到pubdata作为http包additional header，把Base64Packet作为数据post到mugatu.flare-on.com</span><br><span class="line">5. 返回数据进行base64解码，并检查header xor 0x4D是否为&quot;orange mocha frappuccino&quot;，若是，则写到文件&#96;\\.\mailslot\Let_me_show_you_Derelicte&#96;</span><br><span class="line">6. 从binary load image g和f，用gdi32_BitBlt两张图片xor，并用gdi32_GetObjectW提取信息， </span><br><span class="line">7. data段数据，VirtualProtect 修改成 rwx，没细看，image_f 包含一个dll数据</span><br><span class="line">8. createThread，调用dll的导出函数，</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后就可以去分析dll了</p><p>这个dll也做了跟exe一样的import table混淆</p><p>结合调试，得到参数结构体的数据</p><p>就是从硬盘中搜索gif并加密</p><p>加密函数看了看，非常眼熟，😯是个xtea</p><p>但是密钥是刚开始的时候访问网络得到的，那个是个现在已经访问不了的url</p><p>但题目还有个提示，文件<code>the_key_to_success_0000.gif.Mugatu</code></p><p>直接解出来</p><p><img src="/2019/10/08/Flare-On-2019-Writeup/10-out.gif" alt="10-out"></p><p>密钥是4个byte的，这么就3个byte直接爆破了</p><p>得到flag</p><p><img src="/2019/10/08/Flare-On-2019-Writeup/10-flag.gif" alt="10-flag"></p><hr><p><strong>PS:</strong> 这gif图怎么这么骚气！（Dear God…It’s beautiful）</p><p>这题有意思的地方应该是在import table混淆上</p><p>emmmm 看了一下官方wp，原来这个混淆是这么简单，在WinMain调用之前，start的最开始调用了一个函数，把import address table（IAT）翻转了。。。因为反编译器通常都不会处理这种情况</p><p>至于怎么去混淆，也不用像我这么蠢手动恢复，直接在跑起来后dump memory再分析就好了</p><h2 id="11-vv-max"><a href="#11-vv-max" class="headerlink" title="11 - vv_max"></a>11 - vv_max</h2><p>这题就有意思了，上来先给你来个AVX2指令集</p><p>先检查一下CPU支不支持AVX2，然后就开始了程序的逻辑</p><p>大概看出来像是个VM，对那个贼大的结构体恢复了一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">YMM</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> value[<span class="number">32</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">VM</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> text[<span class="number">2048</span>];</span><br><span class="line"><span class="comment">//reg1: 2048 0x800</span></span><br><span class="line"><span class="comment">//reg2: 2304 0x900</span></span><br><span class="line"><span class="comment">//reg3: 2560 0xa00</span></span><br><span class="line"><span class="comment">//reg4: 2861 0xb00</span></span><br><span class="line">    YMM reg[<span class="number">32</span>];</span><br><span class="line"><span class="comment">//rip: 3072 0xc00</span></span><br><span class="line">    QWORD rip;</span><br><span class="line">    <span class="keyword">void</span> *funclist[<span class="number">24</span>];</span><br><span class="line"><span class="comment">//data: 3272 0xcc8</span></span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">1848</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后看了半天的文档，写了个反汇编器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disasm</span>(<span class="params">text</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;dis.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    ip = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> ip &lt; <span class="built_in">len</span>(text):</span><br><span class="line">        f.write(<span class="string">&#x27;&#123;&#125;: &#x27;</span>.<span class="built_in">format</span>(ip))    </span><br><span class="line">        <span class="keyword">if</span> ip &gt; <span class="number">2</span> <span class="keyword">and</span> ip &lt; <span class="number">32</span>+<span class="number">3</span>:</span><br><span class="line">            ip += <span class="number">1</span></span><br><span class="line">            f.write(<span class="string">&#x27;reserve INPUT1\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> ip &gt;= <span class="number">37</span> <span class="keyword">and</span> ip &lt; <span class="number">37</span> + <span class="number">32</span>:</span><br><span class="line">            ip += <span class="number">1</span></span><br><span class="line">            f.write(<span class="string">&#x27;reserve INPUT2\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">0</span>:</span><br><span class="line">            ip += <span class="number">1</span></span><br><span class="line">            f.write(<span class="string">&#x27;EmptyReg\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">1</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;muladd16 r&#123;&#125;, r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">2</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;muladd32 r&#123;&#125;, r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">3</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;xor r&#123;&#125;, r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">4</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;or r&#123;&#125;, r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">5</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;and r&#123;&#125;, r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">6</span>:</span><br><span class="line">            param1, param2 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>]</span><br><span class="line">            ip += <span class="number">3</span></span><br><span class="line">            f.write(<span class="string">&#x27;not r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">7</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;add8 r&#123;&#125;, r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">8</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;sub8 r&#123;&#125;, r&#123;&#125;, r&#123;&#125;  # p1 = p2 - p3\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">9</span>: <span class="comment"># not check below</span></span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;add16 r&#123;&#125;, r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">10</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;sub16 r&#123;&#125;, r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">11</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;add32 r&#123;&#125;, r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">12</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;sub32 r&#123;&#125;, r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">13</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;add64 r&#123;&#125;, r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">14</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;sub64 r&#123;&#125;, r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">15</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;muldq r&#123;&#125;, r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">16</span>:</span><br><span class="line">            param1, param2 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>]</span><br><span class="line">            ip += <span class="number">3</span></span><br><span class="line">            f.write(<span class="string">&#x27;movdq r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">17</span>:</span><br><span class="line">            param1 = text[ip+<span class="number">1</span>]</span><br><span class="line">            ip += <span class="number">2</span></span><br><span class="line">            f.write(<span class="string">&#x27;movdq r&#123;&#125;, mem[&#123;&#125;]\n&#x27;</span>.<span class="built_in">format</span>(param1, ip))</span><br><span class="line">            array = [text[ip + j] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">            f.write(<span class="string">&#x27;\t(&#123;&#125;-&#123;&#125;): &#x27;</span>.<span class="built_in">format</span>(ip, ip+<span class="number">32</span>) + <span class="built_in">str</span>(array) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            ip += <span class="number">32</span></span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">18</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;srld r&#123;&#125;, r&#123;&#125;, &#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">19</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;slld r&#123;&#125;, r&#123;&#125;, &#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">20</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;shufb r&#123;&#125;, r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">21</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;permd r&#123;&#125;, r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param3, param2))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">22</span>:</span><br><span class="line">            param1, param2, param3 = text[ip+<span class="number">1</span>], text[ip+<span class="number">2</span>], text[ip+<span class="number">3</span>]</span><br><span class="line">            ip += <span class="number">4</span></span><br><span class="line">            f.write(<span class="string">&#x27;cmpeq r&#123;&#125;, r&#123;&#125;, r&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(param1, param2, param3))</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">23</span>:</span><br><span class="line">            ip += <span class="number">1</span></span><br><span class="line">            f.write(<span class="string">&#x27;nop\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> text[ip] == <span class="number">0xff</span>:</span><br><span class="line">            ip += <span class="number">1</span></span><br><span class="line">            f.write(<span class="string">&#x27;exit\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            f.write(<span class="string">&#x27;unknown: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(text[ip]))</span><br><span class="line">            ip += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    text = <span class="built_in">open</span>(<span class="string">&#x27;text.bin&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">    text = <span class="built_in">map</span>(<span class="built_in">ord</span>, text)</span><br><span class="line">    disasm(text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就是要去逆这个东西了</p><p>总结了一下最后检查部分的要求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">final check:</span><br><span class="line">1. reg2 &#x3D;&#x3D; reg20</span><br><span class="line">2. input1[:9] &#x3D;&#x3D; &#39;FLARE2019&#39;</span><br><span class="line">flag &#x3D; reg1 xor reg31</span><br></pre></td></tr></table></figure><p>其中，R20是个固定的数组，可以直接从调试中获得</p><p>R2跟我们的输入有关，接下来就是看R2到底进行了哪些操作了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">781: srld r7, r1, 4</span><br><span class="line">813: and r7, r7, r6</span><br><span class="line">849: cmpeq r8, r1, r6       &#x2F;&#x2F; 0000000 ？</span><br><span class="line">889: add8 r7, r8, r7        &#x2F;&#x2F; equal - 1 &#x2F; not equal &#x3D; 0</span><br><span class="line">901: shufb r7, r5, r7</span><br><span class="line"></span><br><span class="line">949: add8 r2, r1, r7</span><br><span class="line">1029: muladd16 r7, r2, r10</span><br><span class="line">1109: muladd32 r2, r7, r11</span><br><span class="line">1297: shufb r2, r2, r12</span><br><span class="line">1421: permd r2, r13, r2</span><br><span class="line">1029: muladd16 r7, r2, r10</span><br><span class="line">1109: muladd32 r2, r7, r11</span><br></pre></td></tr></table></figure><p>主要翻了半天文档，去理解这些指令</p><p>刚开始我打算直接写Z3跑的，但在理解了这些指令的运算后，感觉好像没那么好写？</p><p>而且关键是，这指令的个数不多，应该可以直接写逆</p><p>但是这时有个关键点，muladd这种指令不好写逆</p><p>这时，我注意到一个东西，因为当中包含有常数数组，所以结合起来有如下的特点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">muladd32:</span><br><span class="line">r2[31:0] &#x3D; 0x1000 * r7[15:0] + r7[31:16]</span><br><span class="line">         &#x3D; r2[7:0] &lt;&lt; 18  + r2[15:8] &lt;&lt; 12 + r2[23:16] &lt;&lt; 6 + r2[31:24]</span><br></pre></td></tr></table></figure><p>6，12，18，24</p><p>每一段只占6个bit</p><p>这让我想起了base64</p><p>但是结合上下文我根本看不出来这是一个base64算法，因为还有一些奇怪的操作</p><p>但这时我从网上搜到这篇，用AVX2实现base64算法<a href="https://arxiv.org/pdf/1704.00605.pdf">https://arxiv.org/pdf/1704.00605.pdf</a></p><p>哦对！我还可以调试，直接当成黑盒看一下输入输出的关系</p><p>然后就发现。。。</p><p>这是一个base64 decode</p><p>然后就出来了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.\vv_max.exe FLARE2019 cHCyrAHSXmEKpyqoCByGGuhFyCmy86Ee</span><br><span class="line">That is correct!</span><br><span class="line">Flag: AVX2_VM_M4K3S_BASE64_C0MPL1C4T3D@flare-on.com</span><br></pre></td></tr></table></figure><hr><p><strong>PS:</strong> 骚操作真多</p><p>这题官方解法没有很特别的地方</p><p>以后遇到这些算法就学会了，先当成黑盒去猜，然后再去逆</p><h2 id="12-help"><a href="#12-help" class="headerlink" title="12 - help"></a>12 - help</h2><p>这是我做过最最最最难的一道题了！前面11道题，基本花费时间都不会超过两天，这题，断断续续抽空做弄了足足20天！我真是太太太太太菜了，但真的学到了非常多</p><p>首先说说这题吧，给了一个window的crash dump文件，大小2G，然后还有一个pacp</p><p>翻了一遍，发现一堆一堆的192.168.1.244和192.168.1.243的TCP交互数据，但是看不出来是啥数据</p><p>有一堆以8 bytes重复的字符</p><p>还看到了一些正常http访问的数据包</p><p>那么就去分析crash dump文件吧</p><p>因为之前没有弄过，所以先去网上搜了一波，用windbg拿到了一些信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Windows 7 Kernel Version 7601 (Service Pack 1) UP Free x64</span><br><span class="line">Product: WinNt, suite: TerminalServer SingleUserTS Personal</span><br><span class="line">Built by: 7601.18741.amd64fre.win7sp1_gdr.150202-1526</span><br><span class="line">...</span><br><span class="line">BugCheck 7E, &#123;ffffffffc0000005, fffffa8003f9c621, fffff88007c6b958, fffff88007c6b1b0&#125;</span><br><span class="line"></span><br><span class="line">*** WARNING: Unable to verify timestamp for man.sys</span><br><span class="line">*** ERROR: Module load completed but symbols could not be loaded for man.sys</span><br><span class="line">Probably caused by : man.sys ( man+1ce7 )</span><br></pre></td></tr></table></figure><p>看起来，问题出在了man.sys这个文件上，因为题目描述说道是病毒文件存在bug把电脑搞崩了</p><p>那么怎么分析这个文件呢</p><p>有一个很出名的工具叫volatility</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility.exe -f &#39;.\12 - help\help.dmp&#39; --profile&#x3D;Win7SP1x64 modscan &gt; .\ana\modscan</span><br></pre></td></tr></table></figure><p>Then I found <code>man.sys</code> by modscan.</p><p>But when I try to dump this file,</p><p><code>volatility.exe -f &#39;.\12 - help\help.dmp&#39; --profile=Win7SP1x64 moddump -D dump2 --regex=man.sys</code></p><p>I got<br><code>0xfffff880033bc000 man.sys              Error: e_magic 0000 is not a valid DOS signature.</code></p><p>emmmmm 这个文件的文件头似乎被抹掉了</p><p>然后就发现可以用volshell dump出来</p><p><a href="https://lists.volatilityfoundation.org/pipermail/vol-users/2013-March/000829.html">https://lists.volatilityfoundation.org/pipermail/vol-users/2013-March/000829.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = addrspace().zread(assumed_base_address, assumed_module_size)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file.dmp&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">......        f.write(data)</span><br></pre></td></tr></table></figure><p>dump出来后，因为没有文件头，分析不了</p><p>后来我发现ghidra可以直接识别到函数，所以就用ghidra做了（后来别人告诉我其实ida也可以的，不过只是要在初始化时选一个参数）</p><p>这样我就不用一个个找0x55然后C了</p><hr><p>因为刚开始只有一个去掉文件头的man.sys </p><p>我当时在想里面会不会藏有什么东西，就试着binwalk了一下，果然发现了一个dll文件</p><p>根据pdb字符串，这个就叫<code>m.dll</code></p><p><code>e:\dropbox\dropbox\flareon_2019\code\cd\objchk_win7_amd64\amd64\m.pdb</code></p><p>分析m.dll，去掉RC4的混淆，逆完发现他是在本地监听4444端口，然后根据发送过来的数据包调用相应的ioctl</p><p>看来还是得继续逆man.sys</p><p>man.sys好多奇怪的操作</p><p>emmmmm 还有好多疑似import的函数</p><p><img src="/2019/10/08/Flare-On-2019-Writeup/12-libFunc.png" alt="12-libFunc"></p><p>emmmm 这个地址，是什么函数呢？</p><p>啊！我能直接通过windbg查看！</p><p>这么就能一个个恢复出来了</p><p><img src="/2019/10/08/Flare-On-2019-Writeup/12-getlibFuncInWindbg.png" alt="12-getlibFuncInWindbg"></p><p>花了比较长的时间去逆man.sys，主要注意到他的ioctl的操作，都是从一个链表中搜索代码出来调用，调用的似乎都是export函数</p><p>在man.sys初始化的时候，会通过同样的函数调用m.dll的export函数，从而在本地开启4444端口监听</p><p>那么就计划先来分析一下4444端口接收到的数据进行了什么ioctl的调用吧</p><p>诶？？这数据完全对不上？？</p><p>我是哪里弄错了吗？</p><p>卡了一轮，无果，我以为我是开头哪里搞错了</p><p>上twitter问了一下大佬@hasherezade</p><blockquote><p>How many DLLs did you extract? There is one dll which functionality is to encrypt the traffic…</p></blockquote><p>emmmmmm</p><p>我太菜了</p><p>好的，然后我就知道往哪个方向去继续做了</p><p>我用volatility把基本能跑的都跑了一遍，似乎好像没发现什么特别的东西</p><p>在driver、module相关的信息里面倒是看到挺多flare on字样的驱动等等，但是似乎都提不出来，定位不到文件</p><p>这时看回man.sys，我主要到一个东西，加载的m.dll是要先attach到pid=876的进程上！</p><p>然后去查看pid 876，是svchost.exe，针对这个进程，emmmmm各种方法都找不到那些隐藏的dll</p><p>然后试着用yarascan命令搜了一下driver的ID <code>FLID</code></p><p>突然发现，在附近带有pdb的字符串！，我可以直接搜索pdb！</p><p><code>volatility.exe -f &#39;.\12 - help\help.dmp&#39; --profile=Win7SP1x64 yarascan -Y dropbox\\dropbox\\flareon_2019\\code --pid=876 &gt; .\ana\yarascan_code</code></p><p>Jesus…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">24d0a4 E:\Dropbox\Dropbox\flareon_2019\code\stmedit\sys\x64\Release\stmedit.pdb</span><br><span class="line">2934fc e:\dropbox\dropbox\flareon_2019\code\cryptodll\objchk_win7_amd64\amd64\c.pdb</span><br><span class="line">29650c e:\dropbox\dropbox\flareon_2019\code\networkdll\objchk_win7_amd64\amd64\n.pdb</span><br><span class="line">2a0508 e:\dropbox\dropbox\flareon_2019\code\keylogdll\objchk_win7_amd64\amd64\k.pdb</span><br><span class="line">2a74fc e:\dropbox\dropbox\flareon_2019\code\screenshotdll\objchk_win7_amd64\amd64\s.pdb</span><br><span class="line">2ac4fc e:\dropbox\dropbox\flareon_2019\code\filedll\objchk_win7_amd64\amd64\f.pdb</span><br><span class="line">6cbe124 e:\dropbox\dropbox\flareon_2019\code\id\objchk_win7_amd64\amd64\man.pdb</span><br><span class="line">6cbf600 e:\dropbox\dropbox\flareon_2019\code\cd\objchk_win7_amd64\amd64\m.pdb</span><br><span class="line">1af27b80 e:\dropbox\dropbox\flareon_2019\code\shellcodedriver\objchk_wxp_x86\i386\driver1.pdb</span><br></pre></td></tr></table></figure><p>然后我就结合binwalk把这些都dump出来了</p><p>注意到他们目录名称非常有意思</p><p><code>stmedit</code> <code>cryptodll</code> <code>networkdll</code> <code>keylogdll</code> <code>screenshotdll</code> <code>filedll</code> <code>shellcodedriver</code></p><p>刚开始我完全没看懂stmedit是什么东西，逆了一下完全没看懂，非常复杂</p><p>然后我去搜了一下……搜到了一个同名的MS的driver example</p><p><a href="https://github.com/microsoft/Windows-driver-samples/tree/master/network/trans/stmedit">https://github.com/microsoft/Windows-driver-samples/tree/master/network/trans/stmedit</a></p><p>原来这就是那个加密TCP流的driver！</p><p>他通过WPF的api替换TCP上的数据</p><p>结合这MS的sample逆了大半天，终于找到那个关键的函数了，是一个8bytes密钥的xor</p><p>并且，能从这个sys里面找到初始化4444端口的密钥，但是别的端口都是通过ioctl配置的，根本找不到密钥</p><p>先解4444端口的好了</p><p>刚开始我想沿用第4题的方法，同scapy提出来，但是存在一个问题，数据太多TCP包被拆分了，需要TCP重组，然后又是查了半天的资料，后来发现直接用wireshark就可以提出来了= =</p><p>然后就把4444端口的数据解出来了</p><hr><p>首先，数据大量调用了0xd180dab5的ioCode</p><p>解析出来的数据类似下面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#39;buf&#39;: &#39;GG\xda\xbe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#39;, &#39;ioCode&#39;: &#39;0xd180dab5&#39;, &#39;size&#39;: 26&#125;</span><br></pre></td></tr></table></figure><p>结合man.sys可以猜测这是远程发送控制调用相应的函数，其中buf的前4个byte是指明调用的哪个dll，但是我找不到这些值是在哪里初始化的，也就是说我并不知道他这调用了哪个函数</p><p>先总结一下前面提取出来的dll的作用，很快就逆了一遍，这都不难</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stmedit.sys: TCP包加密</span><br><span class="line">c.dll:数据加密，先用lznt1压缩，再用rc4加密，密钥是username &#39;FLARE ON 2019\x00&#39;</span><br><span class="line">n.dll:数据打包，发送到ip 192.268.1.243</span><br><span class="line">k.dll:键盘记录，保存并打包</span><br><span class="line">s.dll:屏幕截图，bmp格式</span><br><span class="line">f.dll:文件操作，读文件，文件搜索，文件写等</span><br><span class="line">man.sys:控制driver</span><br><span class="line">m.dll:4444监听端口</span><br><span class="line">driver1.sys:执行shellcode</span><br></pre></td></tr></table></figure><p>于是总结了一下数据包</p><p>4444接受发送来的数据</p><p>6666 7777 8888 都是发送到ip 192.268.1.243的数据</p><p>其中7777dump出来的数据包非常有规律，正是8byte的循环，虽然上面dll还有个数据加密的dll，但7777没有用到</p><p>后面再细逆man.sys就会发现，在dll的函数调用完毕后，会有一个设置的标志位，只有设置了那个标志位的数据，才会调用c.dll进行数据加密</p><p>6666 8888传输的数据均经过加密，而7777则没有</p><p>因为4444数据中包含了接收文件的操作，和有显示出来的字符串<code>C:\\keypass\\keys.kdb</code>，可以确定几个man.sys调用的函数</p><p>4444接收的文件我dump出来看了一下，其实正是driver1.sys，这个我们已经分析过了</p><p>而那个字符串，结合调用的f.dll逆，可以发现他的操作是</p><ol><li>在C盘搜索keys.kdb文件</li><li>发送keys.kdb文件出去</li></ol><p>那么6666 7777 8888 端口的数据我们就能猜测一下，分别是发送的key.kdb数据，屏幕截图数据和键盘记录数据</p><p>其中7777的数据量最大，数据包最多，可以先猜测这是屏幕截图数据</p><p>因为只是xor加密，而7777每次发送的数据都是<code>packet_len + bmpdata</code>的结构</p><p>bmp头有十几个byte的数据是已知的，那么就可以破解出密钥！</p><p><code>key = &#39;J\x1fK\x1c\xb0\xd8%\xc7&#39;</code></p><p>当我把屏幕截图解完，就发现了非常有意思的图片</p><p><img src="/2019/10/08/Flare-On-2019-Writeup/12-pkt150.bmp" alt="12-pkt150"></p><p><img src="/2019/10/08/Flare-On-2019-Writeup/12-pkt164.bmp" alt="12-pkt164"></p><p>结合图片可以知道flag就藏在keys.kdb里面！（不是看到这个我都差点忘了我是要找flag的了。。。）</p><p>打开keys.kdb的master key长度是18</p><p>接下来自然可以想到目标是解密出6666和8888端口的数据</p><p>拿到keys.kdb文件，并且从keylogger数据中读到密码</p><hr><p>解密6666 8888的数据</p><p>7777的密钥是我们直接破解出来的，但是6666和8888的数据因为还再加了一层加密，就很难这么干了</p><p>因为加密顺序是LZNT1 compress -&gt; RC4 with key ‘FLARE ON 2019\x00’ -&gt; xor with xor key</p><p>可以先猜出前面的一点点数据，然后同理加密后破解</p><p>但尝试了一段时间没有成功，也不知道哪里出问题了，理论上是可以的</p><p>于是我又卡住了</p><p>之后我在dump数据包出来的时候，发现了一样东西<img src="/2019/10/08/Flare-On-2019-Writeup/12-pkgtrick.png" alt="12-pkgtrick"></p><p>这里是同一个TCP数据包，怎么有两块长度一样的？</p><p>然后翻到下面的数据包，发现开头是<code>\x10\x09\x00\x00</code>，这不正是发出去的数据包的格式，前4个byte是包长度吗</p><p>但是正常情况应该是这4个字节也经过了xor加密</p><p>然后我就发现，这个包里面前半部分是经过xor加密的数据，后半部分是未经过xor加密的数据，两个数据是一样的。。。（或许是正如截图里的encrypt加密了两次？）</p><p>总的来说，这是stmedit没有逆清楚的锅，有可能是因为API用的Inject，原数据没有删掉（这里原因还不清楚</p><p>总之，接着这个思路6666和8888的数据都拿到了</p><p>keys.kdb拿到了</p><p>keylog也拿到了</p><p>从keylog拿到的密钥是<code>th1sisth33nd111</code>，这只有15位，还缺了3位</p><p>再细逆keylogger，发现这个keylogger问题很大</p><ol><li>特殊字符不能记录到</li><li>大小写统一都转换成小写</li></ol><p>从twitter上看到别人说从截图推断出来密码，嗯？？？</p><p>然后我就有点点被误导了</p><p>根据语义试了一堆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Th1s_Is_TH3_3nd111</span><br><span class="line">Th1s_Is_Th3_3nd111</span><br><span class="line">Th1s-is_th3-3nd111</span><br><span class="line">Th1s-is-th3_3nd111</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>卡了整整一天后，我就去问大佬了</p><p>超感谢@zvikam非常多的提示，指导我怎么去找到这个key</p><p>试着从dump文件中搜了一下<code>3nd</code></p><p>居然找到了！</p><p><code>Th!s_iS_th3_3Nd!!!</code></p><p>终于拿到了flag</p><hr><p>其中前面我刚开始爆破的时候思路有点错了，我着重爆破的是那3个不可见字符，大小写没有太多的考虑</p><p>并且！我没想到叹号会被转化成1，现在再细看，的确就是这样的，这个keylogger对于特殊字符没有检查shift，所以0-9键盘上的特殊字符都会被转化成数字</p><p>所以其实爆破也是一个正解，只不过我爆破的方向不对</p><p>这整一个病毒的思路非常明确</p><p>Man.sys是主病毒，通过4444端口接收控制数据</p><p>再发送捕获的数据到 6666 7777 8888 端口</p><hr><p><strong>PS：</strong>官方题解是直接用的windbg做的，tql</p><p>这里说好一下一些我自己做的时候没注意到的关键点</p><p>crash dump的原因是因为man.sys下载了一段32位的驱动，但系统是64位的，当32位驱动试图运行在64位系统的时候，系统crash了</p><p> 至于man.sys头部被抹掉，官方的一种做法是把另外的sys文件头复制过来，再手动修正，只要确保.text是对的就OK了，其他部分可以一律看作.data</p><p>我是手动恢复RC4混淆的字符串的。。的确是太蠢太麻烦了，可以通过ida的插件辅助完成</p><p><a href="https://github.com/fireeye/flare-emu">https://github.com/fireeye/flare-emu</a></p><p>emmmm关于我提取dll的方式，那的确是另一种方式</p><p>这些dll不是全都注入到svchost里的，因为有些dll的安装方式是通过ioctl，最终这些信息都储存在man.sys的那个链表中</p><p>关键点在这，因为这些都是直接从crash dump中获得的，那个链表我们其实可以直接通过windbg跟踪查看具体数据，通过这个信息，我们可以看到具体是注入到哪个进程，以及dll捆绑的端口是多少</p><p>引用一下官方wp的结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">INJECTED_PAYLOADS</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ULONG moduleId;</span><br><span class="line">    LIST_ENTRY link;</span><br><span class="line">    KMUTEX payloadMutex;</span><br><span class="line">    ULONG_PTR baseAddress;</span><br><span class="line">    ULONG_PTR runOffset;</span><br><span class="line">    ULONG_PTR loadedDllSize;</span><br><span class="line">    BOOLEAN isExfilDll; <span class="comment">// Sends data to 192.168.1.243</span></span><br><span class="line">    BOOLEAN isCryptoDll; <span class="comment">// Used to encrypt some payloads’ return data</span></span><br><span class="line">    ULONG exfilPort; <span class="comment">// Set per payload at injection time</span></span><br><span class="line">    PEPROCESS injectedProcess;</span><br><span class="line">&#125; INJECTED_PAYLOADS, *PINJECTED_PAYLOADS;</span><br></pre></td></tr></table></figure><p>像这些都是可以获得的</p><p>同理，stmedit在安装端口加密也是通过ioctl实现的，并且同样包含一个链表，dump出这个链表同样是可以找到加密的key，并不是一定要靠猜的</p><hr><p>关于其他大佬的做法，也能学到很多</p><p><a href="https://bruce30262.github.io/flare-on-challenge-2019-write-up/#level-12">https://bruce30262.github.io/flare-on-challenge-2019-write-up/#level-12</a></p><p>中提到，在逆man.sys的时候，要恢复库函数，可以通过Volatility的帮助</p><blockquote><p><em>Later did I know that you can just use Volatility’s</em> <a href="https://github.com/volatilityfoundation/volatility/wiki/Command-Reference-Mal#impscan">impscan</a> <em>command to identify calls to APIs. The command even has an option to generate an IDA .idc file that help us mark the function name in IDA !</em></p></blockquote><p>还有一个写得超详细的大佬在获取键盘记录上提供了一个非常刺激的思路</p><p><a href="https://github.com/eleemosynator/writeups/tree/master/flare-on-6/12 - help">https://github.com/eleemosynator/writeups/tree/master/flare-on-6/12%20-%20help</a></p><p>大致意思就是根据windows键盘驱动云云～～可以直接从windows驱动拿到键盘Keystroke event信息</p><blockquote><ul><li>Keyboard issues a processor interrupt when a keystroke event (key-up or key-down) is ready to be processed.</li><li>The [Interrupt Service Routine] of the low-level keyboard driver <code>i8042prt.sys</code> handles the interrupt.</li><li>As the operating system may be busy with other things when the keyboard interrupt is received, <code>i8042prt.sys</code> stores the keystroke event in a ring buffer (which resides in Non-Paged memory) which the OS can then process at its leisure.</li></ul></blockquote><p>这个方法简直太炫酷了，这样就可以直接拿到键盘记录数据，而不是靠猜靠爆破了</p><p><strong>高能预警！！！</strong></p><p>然后还有大佬是………………纯粹靠数据分析？？？？</p><p><a href="https://sysenter-eip.github.io/FlareOn2019_NoReversing">https://sysenter-eip.github.io/FlareOn2019_NoReversing</a></p><p>screenshot数据是直接看出来8byte xor然后用GBS（一个工具）处理查看发现是图片，然后猜key解出来的</p><p>在看完截图知道需要获得kdb后，直接从crash dump中得到了keys.kdb文件</p><p>然后猜了一下可能存在keylogger数据，和8888端口发送的数据包用的是同一个密钥，对比不同的数据包，发现有相同的MSB存在，就用滑动窗口去破解了（Orz）并且猜出来许多windows的病毒都是使用LZNT1</p><p>剩下就跟我一样在crash dump中搜到了master key</p><p>还有一种情况，既然拿到keys.kdb了，那是不是可以直接破解这个文件？</p><p>答案是可以的，需要逆一下cng.sys</p><p><a href="https://gist.github.com/Sin42/feb693a5b29679f8137b2d751aeb1e31">https://gist.github.com/Sin42/feb693a5b29679f8137b2d751aeb1e31</a></p><p>直接就把keys.kdb破解了 Orz</p><p>佩服得五体投地</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实整篇文章都写得像流水账，主要记录的是我的解题过程，我当时是怎么想的</p><p>详细的writeup网上有很多，而且flareon官方的writeup也足够详细</p><p>这总是能让我学到许多</p><p>大佬们都tqltql Orz</p><p>希望明年能再接再厉</p><p>要说真的挑一道自己喜欢的题目，那可能就是12题吧，因为真的学到了许多许多，非常偏向于实际的病毒分析</p><p>但是也折磨得我够呛的Orz</p><p>感谢flareon的组织（我们明年再见（滑稽））</p><p>PPS：牌子什么时候才能寄到呢？</p>]]></content>
      
      
      
        <tags>
            
            <tag> flare-on </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018flare-on recording</title>
      <link href="2018/11/21/2018flare-on-recording/"/>
      <url>2018/11/21/2018flare-on-recording/</url>
      
        <content type="html"><![CDATA[<p><a href="http://flare-on.com">http://flare-on.com</a></p><p>记录一下今年的flare-on，断断续续做了好久，最后12题中总共解出6题，后面的题就不够时间看了</p><p>再一次感受到自己是在太菜了，发现自己在逆向的时候很不善于用一些有用的工具，大部分时候是通过自己手动硬逆，事实上，逆向的目的是要搞懂程序在干些什么，不必去过于探究一些细节，而对于我数学、算法方面的硬伤，只需要抽时间去恶补理论基础就好了。但对于逆向技巧，flareon给了一个很好的学习逆向的题目。</p><p>另外，flare-on的官方writeup真的是太感人了，太详细了！</p><p><a href="https://www.fireeye.com/blog/threat-research/2018/10/2018-flare-on-challenge-solutions.html">https://www.fireeye.com/blog/threat-research/2018/10/2018-flare-on-challenge-solutions.html</a></p><p>希望明年能拿到徽章</p><span id="more"></span><hr><h2 id="Challenge-1"><a href="#Challenge-1" class="headerlink" title="Challenge 1"></a>Challenge 1</h2><p>一个java逆向，简单的通过jd-gui逆掉</p><h2 id="Challenge-2"><a href="#Challenge-2" class="headerlink" title="Challenge 2"></a>Challenge 2</h2><p>.net的逆向，一个扫雷的游戏，总共有897个雷，只有3个没雷的格子。</p><p>简单逆一下能发现这3个没雷的格子是初始化时硬编码的，所以确定了几个位置以后，直接点开3个格，就能getflag（数的我眼睛花</p><h2 id="Challenge-3"><a href="#Challenge-3" class="headerlink" title="Challenge 3"></a>Challenge 3</h2><p>这关包含48个PE文件，diff了一下发现只有部分数据不一样，每个文件的逻辑都是一样的，需要输入一个password，程序会创建一个jpg和显示一个字符。</p><p>这个jpg图像是一个lego拼接过程，左上角包含顺序数字。</p><p>48个文件，我开始想法是通过<code>pywin32</code>的进行模拟程序，把每一个处理自动化抽取出来，并且似乎最后要通过图像识别去提取图片中的数字。可惜这一部分我不会写，最后是通过手动的方式一个个抽取出来的（非常蠢的方法</p><hr><p>看回官方wp，resource是以一定格式储存的，所以其实是可以对每个binary进行提取处理。</p><p>这里有一个小技巧，就是通过python的vstruct.VStruct进行数据结构的构造</p><table><thead><tr><th>Offset</th><th>Description</th><th>(Decoded) value for 1BpnGjHOT7h5vvZsV4vISSb60Xj3pX5G.exe</th></tr></thead><tbody><tr><td>0x0</td><td>Password</td><td>ZImIT7DyCMOeF6</td></tr><tr><td>0x20</td><td>Filename</td><td>(XOR encoded) 65141174.png</td></tr><tr><td>0x30</td><td>Letter</td><td>(XOR encoded) w</td></tr><tr><td>0x4A</td><td>Return value</td><td>7</td></tr><tr><td>0x4C</td><td>Length RC4 encrypted data</td><td>0x47ED</td></tr><tr><td>0x50</td><td>RC4 encrypted data</td><td>&lt; PNG image data &gt;</td></tr></tbody></table><p>Table 2: Recovered resource data values for 1BpnGjHOT7h5vvZsV4vISSb60Xj3pX5G.exe </p><p>自己用了这么蠢的方法，大概是因为懒没有把binary逆清楚吧。。</p><hr><p>其他大佬解法</p><p><a href="https://bruce30262.github.io/flare-on-challenge-2018-write-up/">https://bruce30262.github.io/flare-on-challenge-2018-write-up/</a></p><p>在一个ak了的dalao提到，他用到了LIEF这个工具</p><p>说实话，这个工具一直躺在我的GitHub star中。。我没有去看过他能干什么</p><p>lief能用来对一个二进制文件进行解析，在这题中，就能用其提取resource</p><p><img src="/2018/11/21/2018flare-on-recording/lief.png" alt="lief"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lief</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_code</span>(<span class="params">filename</span>):</span></span><br><span class="line">    binary = lief.parse(filename)</span><br><span class="line">    brick = binary.resources.childs.<span class="built_in">next</span>()</span><br><span class="line">    id_101 = brick.childs.<span class="built_in">next</span>()</span><br><span class="line">    data = id_101.childs.<span class="built_in">next</span>().content</span><br><span class="line"></span><br><span class="line">    code = <span class="string">&quot;&quot;</span></span><br><span class="line">    has_zero = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> has_zero == <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                has_zero = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            has_zero = <span class="literal">False</span></span><br><span class="line">            code += <span class="built_in">chr</span>(d)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; =&gt; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename, code))</span><br></pre></td></tr></table></figure><h2 id="Challenge-4"><a href="#Challenge-4" class="headerlink" title="Challenge 4"></a>Challenge 4</h2><p>challenge 4是一道非常有意思的题目，这是一个js代码注入木马</p><p>首先，这道题目给了一个binstall.exe，是<code>.net</code>程序，通过dnspy反编译能看到做了混淆，而这个混淆也很好去，查了一下往年的flareon也有类似的<code>.net</code>混淆的题目，通过<code>de4dot</code>便能解混淆，这只是符号混淆</p><p>简单逆向一下，能看到几个关键信息</p><p>首先，这个安装器向目录<code>%APPDATA%\Microsoft\Internet Explorer\browserassist.dll</code>释放了一个dll，然后，向注册表的<code>AppInit_DLLs</code>字段写入这个dll，这个字段的作用是当进程启动时，会加载该dll</p><p>这里可参考<a href="https://docs.microsoft.com/en-us/windows/desktop/dlls/secure-boot-and-appinit-dlls">https://docs.microsoft.com/en-us/windows/desktop/dlls/secure-boot-and-appinit-dlls</a></p><blockquote><p>Only a small set of modern legitimate applications use this mechanism to load DLLs, while a large set of malware use this mechanism to compromise systems. … therefore usage of AppInit_DLLs is not recommended.</p></blockquote><p>正常情况下应用很少会用到该字段去加载dll，大部分需要用到该字段的都是恶意软件</p><p>在安装完这个dll后， binstall.exe便运行完毕，接下来需要逆向这个释放出来的dll</p><hr><p>对于这个dll，我刚开始是硬逆的，后来找到import表，从import表中找到网络相关的函数，找到了http请求到一些东西</p><p>这里其实还有一个技巧，在官方wp中提到，我们可以通过在ida中<code>View -&gt; Open subviews -&gt;Signatures</code>添加<code>vc32_14</code>和<code>vc32ucrt</code>使得我们不用去逆一些库函数</p><p>当时有twitter提到了只有在firefox上这个dll才能正常运行，我也没有细想去为什么，现在看回官方wp，才发现在逆向dll时忽略了很多函数</p><p>首先，从DllEntryPoint中可以根据常规套路找到DLLMain-&gt;0x100027D0</p><p>在DllMain中，做了获取当前加载该dll的进程名，并把进程名传进了两个函数，当校验成功便调用CreateThread</p><p>函数<code>sub_10002660</code>是一个简单的hash，并且进程名hash值要等于0x4932B10F，作者说到这是病毒常见的套路，用以隐藏进程名。这个hash正是firefox.exe对应的hash，而后一个函数则是检查firefox的版本要低于55。PS：这个hash不可逆，所以我们只能通过猜测，因为已知这应该是一个浏览器进程，所以在常见的浏览器中挨个试。</p><p>在随后的函数中，加入了一些字符串混淆，简单的通过放在栈上的byte异或进行字符串的恢复。</p><p>我用的方法比较蠢，把这些byte给dump出来，再通过手工的方法写代码进行异或处理，出题人给出了一个ida的python脚本，通过unicorn进行程序模拟执行，在print出字符串</p><p>恢复一堆后，发现设置user-agent的还有一堆base64编码的</p><p>base64解码后发现是乱码，看了下上下文，发现base64解码后还要通过一串rc4的解密，最后恢复出来是一个网址 <code>pastebin.com/raw/hvaru8NU</code></p><p>get请求这个数据，然后发现是一个json文件，包含了一些inject code什么的</p><p>接下来我就没有继续逆dll了，因为json中有一个host显示flare-on.com，并且也标明了几个js文件名，猜测是javascript代码注入，下了个老版的firefox，成功执行后访问flare-on，F12查看请求，请求中正是包含了那几个js文件，看了看的确包含进了注入的代码</p><p>分析注入代码，不难发现他往flare-on.com这个仿shell的网页中加入了一个<code>su</code>命令，并且前端验证密码，简单地逆出密码后取得root权限，再继续看注入的代码，发现获取root权限后可以cd到一个key目录，cd进去后ls一下就拿到flag了</p><p><img src="/2018/11/21/2018flare-on-recording/c4_getflag.png" alt="c4_getflag"></p><hr><p>其他启示</p><p>在dalao的wp中提到了一个工具<a href="https://github.com/hasherezade/dll_to_exe">dll_to_exe</a></p><p>能把dll转为exe，通过对dll的一些修改，使得能够直接运行进行调试</p><h2 id="Challenge-5"><a href="#Challenge-5" class="headerlink" title="Challenge 5"></a>Challenge 5</h2><p>wasm逆向</p><p>index.html会加载main.js，main.js再加载test.wasm</p><p>简单逆向main.js可以看到，向test.wasm里的函数传入一串bytecode，并与输入的q参数进行Match函数处理，最后返回值为1则输入的flag对。</p><p>在刚开始，我通过chrome debugger去debug wasm，但是量比较大，并且wasm储存变量的方式比较特殊，我花了很长时间都没有理解这是在进行什么运算。</p><p>后来我就想着去找些处理工具了，但是我找了类似 <a href="https://github.com/wwwg/wasmdec">https://github.com/wwwg/wasmdec</a> and <a href="https://github.com/WebAssembly/wabt之类的，也没有能简化阅读的">https://github.com/WebAssembly/wabt之类的，也没有能简化阅读的</a></p><p>后来发现jeb能处理wasm，联想到曾经在Android上jeb的强大，便下了个试用版体验</p><p>果然。。极其给力，一会儿便分析出来了</p><p>从main.js的输入是bytecode，整个wasm是一个简单的字节处理的虚拟机，对输入做加减乘除异或等操作，一个简单的python脚本便能解决</p><hr><p>但是官方wp不应该是通过这种方式做的，再来看回官方wp</p><p>官方wp有一种方法，先通过wasm2c转换成c的源码，再用O3编译，最后用现成的工具进行反编译分析，我试了一下。。最后出来的东西超庞大。。比较混乱</p><p>也提到了一个在线的ide<a href="https://webassembly.studio/，能以渲染过的wat格式进行展示，并且提到一个特性，在调试过程其可以触发Firefox的SpiderMonkey">https://webassembly.studio/，能以渲染过的wat格式进行展示，并且提到一个特性，在调试过程其可以触发Firefox的SpiderMonkey</a> JIT compiler，使得我们可以查看wasm在CPU上是怎么运行的，当转化成为熟悉的x86语言后，能更容易去进行理解。</p><p>再另外，就是IDA的wasm插件了<a href="https://github.com/fireeye/idawasm">https://github.com/fireeye/idawasm</a></p><p>这个插件正是fireeye做的，与普通反编译出来好处是能以ida的方式看清程序架构，并且变量名也经过处理</p><p>然后就是一步步逆了，还可以通过wasm_emu.py在ida中进行模拟运行</p><p>我使用jeb算是偷鸡了，正确操作应该熟悉wasm的架构，指令，并通过自己去进行指令简化，也可以自己写一个parser进行解析</p><p>懒了懒了</p><h2 id="Challenge-6"><a href="#Challenge-6" class="headerlink" title="Challenge 6"></a>Challenge 6</h2><p>这题就纯粹是一个常规的逆向题了</p><p>一共666轮验证，666轮的输入与binary中的data进行异或，最后出来flag</p><p>首先，当中有一个很大的结构体数组，该数组里包含smc代码，输入的字节需要传进去作为函数的参数，经过check函数的判断再以确定其中一轮是否正确。</p><p>一轮结束后，会通过一个固定种子的rand进行数组打乱，重新生成smc数据，并重新写到binary中，然后然后再一次运行单轮check</p><p>我的解法是编写了每一个check函数的求解，通过程序模拟的方式进行666轮求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> util</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;magic&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">binary = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUInt</span>(<span class="params">offset</span>):</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">&#x27;&lt;I&#x27;</span>, binary[offset:offset+<span class="number">4</span>])[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUInt64</span>(<span class="params">offset</span>):</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">&#x27;&lt;Q&#x27;</span>, binary[offset:offset+<span class="number">8</span>])[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFuncStruct</span>(<span class="params">i</span>):</span></span><br><span class="line">    func = getUInt64(<span class="number">0x5100</span>+<span class="number">0x120</span>*i)</span><br><span class="line">    func_off = func - <span class="number">0x400000</span></span><br><span class="line">    func_len = getUInt(<span class="number">0x5100</span>+<span class="number">0x120</span>*i+<span class="number">8</span>)</span><br><span class="line">    key_start = getUInt(<span class="number">0x5100</span>+<span class="number">0x120</span>*i+<span class="number">12</span>)</span><br><span class="line">    key_len = getUInt(<span class="number">0x5100</span>+<span class="number">0x120</span>*i+<span class="number">16</span>)</span><br><span class="line">    cpy_dst = getUInt(<span class="number">0x5100</span>+<span class="number">0x120</span>*i+<span class="number">20</span>)</span><br><span class="line">    data = getUInt64(<span class="number">0x5100</span>+<span class="number">0x120</span>*i+<span class="number">24</span>)</span><br><span class="line">    data_off = data - <span class="number">0x600000</span></span><br><span class="line">    data_need = binary[<span class="number">0x5100</span>+<span class="number">0x120</span>*i+<span class="number">32</span>:<span class="number">0x5100</span>+<span class="number">0x120</span>*(i+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;func_off&#x27;</span>:func_off, <span class="string">&#x27;func_len&#x27;</span>:func_len, <span class="string">&#x27;key_start&#x27;</span>:key_start, <span class="string">&#x27;key_len&#x27;</span>:key_len, <span class="string">&#x27;cpy_dst&#x27;</span>:cpy_dst, <span class="string">&#x27;data_off&#x27;</span>:data_off, <span class="string">&#x27;data_need&#x27;</span>:data_need&#125;</span><br><span class="line"></span><br><span class="line">funcList = [getFuncStruct(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>)]</span><br><span class="line"></span><br><span class="line">key = [<span class="number">0</span>] * <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_fibnacci</span>(<span class="params">index</span>):</span></span><br><span class="line">    key_start, key_len, data_need = funcList[index][<span class="string">&#x27;key_start&#x27;</span>], funcList[index][<span class="string">&#x27;key_len&#x27;</span>], funcList[index][<span class="string">&#x27;data_need&#x27;</span>]</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(key_len):</span><br><span class="line">        num = struct.unpack(<span class="string">&#x27;&lt;Q&#x27;</span>, data_need[<span class="number">8</span>*i:<span class="number">8</span>*(i+<span class="number">1</span>)])[<span class="number">0</span>]</span><br><span class="line">        key[key_start+i] = util.findFibnacci(num)</span><br><span class="line">        result += <span class="built_in">chr</span>(key[key_start+i])</span><br><span class="line">    <span class="comment"># print &#x27;solve fibnacci:&#x27; + str(index) + &#x27;\t&#x27; + result</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_crc32</span>(<span class="params">index</span>):</span></span><br><span class="line">    key_start, key_len, data_need = funcList[index][<span class="string">&#x27;key_start&#x27;</span>], funcList[index][<span class="string">&#x27;key_len&#x27;</span>], funcList[index][<span class="string">&#x27;data_need&#x27;</span>]</span><br><span class="line">    data_need = struct.unpack(<span class="string">&#x27;&lt;I&#x27;</span>, data_need[:<span class="number">4</span>])[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> key_len == <span class="number">1</span>:</span><br><span class="line">        c = util.breakCrc32_len1(data_need)</span><br><span class="line">        key[key_start] = <span class="built_in">ord</span>(c)</span><br><span class="line">    <span class="keyword">elif</span> key_len == <span class="number">2</span>:</span><br><span class="line">        c = util.breakCrc32_len2(data_need)</span><br><span class="line">        key[key_start], key[key_start+<span class="number">1</span>] = <span class="built_in">ord</span>(c[<span class="number">0</span>]), <span class="built_in">ord</span>(c[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">elif</span> key_len == <span class="number">3</span>:</span><br><span class="line">        c = util.breakCrc32_len3(data_need)</span><br><span class="line">        key[key_start], key[key_start+<span class="number">1</span>], key[key_start+<span class="number">2</span>] = <span class="built_in">ord</span>(c[<span class="number">0</span>]), <span class="built_in">ord</span>(c[<span class="number">1</span>]), <span class="built_in">ord</span>(c[<span class="number">2</span>])</span><br><span class="line">    <span class="comment"># print &#x27;solve crc32:&#x27; + str(index) + &#x27;\t&#x27; + c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_xor2A</span>(<span class="params">index</span>):</span></span><br><span class="line">    key_start, key_len, data_need = funcList[index][<span class="string">&#x27;key_start&#x27;</span>], funcList[index][<span class="string">&#x27;key_len&#x27;</span>], funcList[index][<span class="string">&#x27;data_need&#x27;</span>]</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(key_len):</span><br><span class="line">        key[key_start+i] = <span class="number">0x2A</span> ^ <span class="built_in">ord</span>(data_need[i])</span><br><span class="line">        result += <span class="built_in">chr</span>(key[key_start+i])</span><br><span class="line">    <span class="comment"># print &#x27;solve xor2A:&#x27; + str(index) + &#x27;\t&#x27; + result</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_xorWithStr</span>(<span class="params">index</span>):</span></span><br><span class="line">    key_start, key_len, data_need = funcList[index][<span class="string">&#x27;key_start&#x27;</span>], funcList[index][<span class="string">&#x27;key_len&#x27;</span>], funcList[index][<span class="string">&#x27;data_need&#x27;</span>]</span><br><span class="line">    v4 = <span class="built_in">map</span>(<span class="built_in">ord</span>, <span class="string">&#x27;Tis but a scratch.&#x27;</span>)</span><br><span class="line">    v10 = <span class="number">0</span></span><br><span class="line">    arr = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x100</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x100</span>):</span><br><span class="line">        v10 = (v10 + arr[i] + v4[i % <span class="number">18</span>]) &amp; <span class="number">0xff</span></span><br><span class="line">        arr[i], arr[v10] = arr[v10], arr[i]</span><br><span class="line">    v8 = <span class="number">0</span></span><br><span class="line">    v9 = <span class="number">0</span></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(key_len):</span><br><span class="line">        v9 = (v9 + <span class="number">1</span>) &amp; <span class="number">0xff</span></span><br><span class="line">        v8 = (v8 + arr[v9]) &amp; <span class="number">0xff</span></span><br><span class="line">        arr[v8], arr[v9] = arr[v9], arr[v8]</span><br><span class="line">        v10 = (arr[v9] + arr[v8]) &amp; <span class="number">0xff</span></span><br><span class="line">        key[key_start+i] = <span class="built_in">ord</span>(data_need[i]) ^ arr[v10]</span><br><span class="line">        result += <span class="built_in">chr</span>(key[key_start+i])</span><br><span class="line">    <span class="comment"># print &#x27;solve xorWithStr:&#x27; + str(index) + &#x27;\t&#x27; + result</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_strangeBase64</span>(<span class="params">index</span>):</span></span><br><span class="line">    key_start, key_len, data_need = funcList[index][<span class="string">&#x27;key_start&#x27;</span>], funcList[index][<span class="string">&#x27;key_len&#x27;</span>], funcList[index][<span class="string">&#x27;data_need&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span>(key_len % <span class="number">3</span> !=<span class="number">0</span>):</span><br><span class="line">        read_size = (key_len/<span class="number">3</span>+<span class="number">1</span>)*<span class="number">4</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        read_size = (key_len/<span class="number">3</span>)*<span class="number">4</span></span><br><span class="line">    table = <span class="string">&#x27;\x2A\x39\x5F\x64\xC2\xA7\x46\x23\x53\x6B\x74\x47\x28\x4D\x70\x42\x49\x25\x52\x6A\x62\x38\x40\x4A\x69\x45\x44\x59\x2D\x31\x24\x50\x67\x79\x54\x21\x4C\x76\x71\x66\x2B\x63\x68\x6D\x51\x57\x4F\x30\x65\x4E\x5A\x34\x75\x6E\x33\x6C\x37\x48\x26\x32\x77\x61\x7A\x4B&#x27;</span></span><br><span class="line">    ori_table = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">    tran = string.maketrans(table, ori_table)</span><br><span class="line">    data_need = data_need[:read_size]</span><br><span class="line">    data_need = data_need.translate(tran)</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(read_size):</span><br><span class="line">        <span class="keyword">if</span> data_need[i] == <span class="string">&#x27;\x00&#x27;</span>:</span><br><span class="line">            res += <span class="string">&#x27;=&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res += data_need[i]</span><br><span class="line">    res = base64.b64decode(res)</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(key_len):</span><br><span class="line">        key[key_start + i] = <span class="built_in">ord</span>(res[i])</span><br><span class="line">        result += <span class="built_in">chr</span>(key[key_start+i])</span><br><span class="line">    <span class="comment"># print &#x27;solve strangeBase64:&#x27; + str(index) + &#x27;\t&#x27; + result</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_add13</span>(<span class="params">index</span>):</span></span><br><span class="line">    key_start, key_len, data_need = funcList[index][<span class="string">&#x27;key_start&#x27;</span>], funcList[index][<span class="string">&#x27;key_len&#x27;</span>], funcList[index][<span class="string">&#x27;data_need&#x27;</span>]</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(key_len):</span><br><span class="line">        key[key_start+i] = <span class="built_in">ord</span>(data_need[i]) - <span class="number">13</span></span><br><span class="line">        result += <span class="built_in">chr</span>(key[key_start+i])</span><br><span class="line">    <span class="comment"># print &#x27;solve add13:&#x27; + str(index) + &#x27;\t&#x27; + result</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_equal</span>(<span class="params">index</span>):</span></span><br><span class="line">    key_start, key_len, data_need = funcList[index][<span class="string">&#x27;key_start&#x27;</span>], funcList[index][<span class="string">&#x27;key_len&#x27;</span>], funcList[index][<span class="string">&#x27;data_need&#x27;</span>]</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(key_len):</span><br><span class="line">        key[key_start + i] = <span class="built_in">ord</span>(data_need[i]) </span><br><span class="line">        result += <span class="built_in">chr</span>(key[key_start+i])</span><br><span class="line">    <span class="comment"># print &#x27;solve equal:&#x27; + str(index) + &#x27;\t&#x27; + result</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findFunction</span>(<span class="params">code</span>):</span></span><br><span class="line">    <span class="keyword">if</span> code[:<span class="number">27</span>] == <span class="string">&#x27;UH\x89\xE5H\x89&#125;\xB8\x89u\xB4H\x89U\xA8\xC7E\xFC\x00\x00\x00\x00\xE9\x19\x01\x00\x00&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;fibnacci&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> code[:<span class="number">35</span>] == <span class="string">&#x27;UH\x89\xE5H\x89&#125;\xD8\x89u\xD4H\x89U\xC8\xC6E\xF3\x00\xC7E\xFC\x00\x00\x00\x00\xC7E\xF4\xFF\xFF\xFF\xFF\xEBR&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;crc32&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> code[:<span class="number">41</span>] == <span class="string">&#x27;UH\x89\xE5H\x81\xEC\xD0\x00\x00\x00H\x89\xBD\xC8\xFE\xFF\xFF\x89\xB5\xC4\xFE\xFF\xFFH\x89\x95\xB8\xFE\xFF\xFFH\xB8Tis but &#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;xorWithStr&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> code[:<span class="number">25</span>] == <span class="string">&#x27;UH\x89\xE5H\x89&#125;\xA8\x89u\xA4H\x89U\x98H\xB8*9_d\xC2\xA7F#&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;base64&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> code[:<span class="number">31</span>] == <span class="string">&#x27;UH\x89\xE5H\x89&#125;\xE8\x89u\xE4H\x89U\xD8\xC7E\xFC\x00\x00\x00\x00\xC7E\xFC\x00\x00\x00\x00\xEBa&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;add13&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> code[:<span class="number">24</span>] == <span class="string">&#x27;UH\x89\xE5H\x89&#125;\xE8\x89u\xE4H\x89U\xD8\xC7E\xFC\x00\x00\x00\x00\xEBU&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;equal&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> code[:<span class="number">24</span>] == <span class="string">&#x27;UH\x89\xE5H\x89&#125;\xE8\x89u\xE4H\x89U\xD8\xC7E\xFC\x00\x00\x00\x00\xEB]&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;xor2A&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smc_core</span>(<span class="params">arr1, arr2, length</span>):</span></span><br><span class="line">    rel = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        rel += <span class="built_in">chr</span>(<span class="built_in">ord</span>(arr1[i]) ^ <span class="built_in">ord</span>(arr2[i]))</span><br><span class="line">    <span class="keyword">return</span> rel</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_once_round</span>():</span></span><br><span class="line">    <span class="keyword">global</span> funcList</span><br><span class="line">    <span class="keyword">global</span> key</span><br><span class="line">    <span class="comment"># funcList = [getFuncStruct(i) for i in range(33)]</span></span><br><span class="line">    key = [<span class="number">0</span>]*<span class="number">100</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(funcList)):</span><br><span class="line">        func = funcList[i]</span><br><span class="line">        result = smc_core(binary[func[<span class="string">&#x27;func_off&#x27;</span>]:], binary[func[<span class="string">&#x27;data_off&#x27;</span>]:], func[<span class="string">&#x27;func_len&#x27;</span>])</span><br><span class="line">        func_name = findFunction(result)</span><br><span class="line">        <span class="keyword">if</span> func_name == <span class="string">&#x27;fibnacci&#x27;</span>:</span><br><span class="line">            solve_fibnacci(i)</span><br><span class="line">        <span class="keyword">elif</span> func_name == <span class="string">&#x27;crc32&#x27;</span>:</span><br><span class="line">            solve_crc32(i)</span><br><span class="line">        <span class="keyword">elif</span> func_name == <span class="string">&#x27;xorWithStr&#x27;</span>:</span><br><span class="line">            solve_xorWithStr(i)</span><br><span class="line">        <span class="keyword">elif</span> func_name == <span class="string">&#x27;base64&#x27;</span>:</span><br><span class="line">            solve_strangeBase64(i)</span><br><span class="line">        <span class="keyword">elif</span> func_name == <span class="string">&#x27;add13&#x27;</span>:</span><br><span class="line">            solve_add13(i)</span><br><span class="line">        <span class="keyword">elif</span> func_name == <span class="string">&#x27;equal&#x27;</span>:</span><br><span class="line">            solve_equal(i)</span><br><span class="line">        <span class="keyword">elif</span> func_name == <span class="string">&#x27;xor2A&#x27;</span>:</span><br><span class="line">            solve_xor2A(i)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>, key))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rand_index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replaceInBinary</span>(<span class="params">off, buf, length</span>):</span></span><br><span class="line">    <span class="keyword">global</span> binary</span><br><span class="line">    binary = binary[:off] + buf + binary[off+length:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeTable</span>():</span></span><br><span class="line">    <span class="keyword">global</span> rand_index</span><br><span class="line">    binFuncOffs = <span class="number">0xbc6</span></span><br><span class="line">    new_func_src = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    key_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x21</span>):</span><br><span class="line">        v3 = i + util.random_num[rand_index] % (<span class="number">33</span>-i)</span><br><span class="line">        rand_index += <span class="number">1</span></span><br><span class="line">        func = funcList[v3]</span><br><span class="line">        </span><br><span class="line">        src = smc_core(binary[func[<span class="string">&#x27;func_off&#x27;</span>]:], binary[func[<span class="string">&#x27;data_off&#x27;</span>]:], func[<span class="string">&#x27;func_len&#x27;</span>])</span><br><span class="line">        func[<span class="string">&#x27;data_off&#x27;</span>] = (util.random_num[rand_index] % (<span class="number">0x10002</span> - func[<span class="string">&#x27;func_len&#x27;</span>]) + <span class="number">0x7620</span>)</span><br><span class="line">        rand_index += <span class="number">1</span></span><br><span class="line">        changeFunc = smc_core(src, binary[func[<span class="string">&#x27;data_off&#x27;</span>]:], func[<span class="string">&#x27;func_len&#x27;</span>])</span><br><span class="line">        new_func_src += changeFunc</span><br><span class="line">        </span><br><span class="line">        func[<span class="string">&#x27;func_off&#x27;</span>] = binFuncOffs</span><br><span class="line">        binFuncOffs += func[<span class="string">&#x27;func_len&#x27;</span>]</span><br><span class="line">        func[<span class="string">&#x27;key_start&#x27;</span>] = key_index</span><br><span class="line">        key_index += func[<span class="string">&#x27;key_len&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        funcList[v3], funcList[i] = funcList[i], funcList[v3]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x21</span>):</span><br><span class="line">        v4 = util.random_num[rand_index]</span><br><span class="line">        v4 = j + v4 % (<span class="number">33</span> - j)</span><br><span class="line">        rand_index += <span class="number">1</span></span><br><span class="line">        funcList[v4], funcList[j] = funcList[j], funcList[v4]</span><br><span class="line"></span><br><span class="line">    replaceInBinary(<span class="number">0xbc6</span>, new_func_src, <span class="built_in">len</span>(new_func_src))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u64toS</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&#x27;&lt;Q&#x27;</span>, num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    flag = u64toS(<span class="number">0x45123A7920755C24</span>) + u64toS(<span class="number">0x17263719711D201E</span>) + u64toS(<span class="number">0x4A7C67303E100367</span>) + u64toS(<span class="number">0x11621308555E1B11</span>) + u64toS(<span class="number">0x122C17445A7C6C68</span>) + u64toS(<span class="number">0x576D0C6324095979</span>) + u64toS(<span class="number">0x265D0F6A0C27651F</span>) + u64toS(<span class="number">0xA375C1433594643</span>) + u64toS(<span class="number">0x2C16022663</span>)</span><br><span class="line">    flag = <span class="built_in">map</span>(<span class="built_in">ord</span>, <span class="built_in">list</span>(flag))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">666</span>):</span><br><span class="line">        once_key = solve_once_round()</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;[+]: Solve round &#123;&#125;, key: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i, once_key)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">            flag[j] ^= <span class="built_in">ord</span>(once_key[j])</span><br><span class="line">        changeTable()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>, flag))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="comment"># print solve_once_round()</span></span><br><span class="line">    <span class="comment"># changeTable()</span></span><br><span class="line">    <span class="comment"># print solve_once_round()</span></span><br></pre></td></tr></table></figure><p>本来计划用pwntools进行循环交互的，那么我就不需要去模拟数组打乱部分了，但是pwntools不知道什么原因会阻塞。我觉得我这种解法太复杂了，需要把整个binary逆一遍并且再模拟一遍，工作量很大，能否使用现有的工具去简化整个流程呢？</p><p>接下来看一看官方wp</p><hr><p>….看完了官方wp，居然是用gdb脚本爆破的，，，晕</p><h2 id="Challenge-7"><a href="#Challenge-7" class="headerlink" title="Challenge 7"></a>Challenge 7</h2><p>这是flare-on的第七题了，这道题当时简单看了一下没做出来，现在就着官方wp看一下</p><p>首先，刚开始的时候我看到了那个带flare-on字符串的函数，有个异或对比的操作，但是解出来是Th1s_1s_th3_wr0ng_k3y_</p><p>然后准备动态调看看什么情况，但是一跑就退出了，不知道什么情况，现在结合wp看，我是没有注意到关键的函数</p><p>很容易能注意到<code>sub_1001800</code>和<code>sub_1001600</code>这两个条件函数，只有满足才会执行接下来的流程</p><p>简单查了MS的api可知道，这是对系统的版本做了检查</p><p><code>sub_1001800</code>：只有Windows 7和Windows Server 2008 R2才能满足条件</p><p><code>sub_1001600</code>：通过PEB获取模块信息，对模块名进行hash，与hash值比较，程序要运行在WOW64的环境下</p><p>这里设计到WOW64（Windows on Windows ），这个机制是为了确保向前兼容，使得32位的程序能够直接运行在64位的系统上</p><p><img src="/2018/11/21/2018flare-on-recording/wow64.png" alt="wow64"></p><p>借用一下官方wp的图，原始32位windows跟借助wow所加载的dll是不一样的</p><p>程序还包含了一个x64call的函数，用了一种很hacker的技巧从32位跳转到执行64位程序</p><p><a href="http://rce.co/knockin-on-heavens-gate-dynamic-processor-mode-switching/">http://rce.co/knockin-on-heavens-gate-dynamic-processor-mode-switching/</a></p><p>在分析中可以看到他把data里的数据都跟0xDEEDEEB异或，简单异或出来后就是一个64位的dll</p><p>通过一个导出的函数<code>X64Call</code>进行调用</p><p>X64Call中调用参数包含了一个偏移<code>0x580</code>，这个函数将会调用64bit dll中偏移为0x580的那个导出函数</p><hr><p>进入到64bit的dll，那个导出函数很值得注意，里面包含了一些<code>NtQueryInformationProcess</code>字符串，感觉像是在解释这些api的地址</p><p>这个先不管，注意到底下sub_180003100，第二个参数数据的开头是<code>MZ</code>，这又打包了一个dll，这个函数做了些qmemcpy的操作，看着挺复杂的，但是细看一下应该是根据PE文件头去读出整个PE文件，然后进行memcpy的操作</p><p>把这个crackme.dll文件dump出来，这又变成一个32位的dll了，继续分析。</p><p>32位dll中会接收localhost发送过来的信息，端口由用户输入，总共有29个循环</p><p>从64bit dll中会找到通过windows 的ioctl进行的socket connect等代码，从一个大的switch case中就能找到相关的异或代码，异或出来就是flag</p><hr><p>因为整个64bit dll分析起来非常复杂，整个binary通过一种很魔幻的方式去达成他的目的，真的是厉害</p><p>但是这题真实想做出其实不难，虽然接受的是再次内嵌的一个32位的dll，但是在64位中看到那么一块针对已有data进行异或的地方的时候，会下意思先尝试，这么一尝试就能拿到flag了，甚至都不需要再继续细逆。</p><p>但是这个函数埋藏得比较深，另外还带有许多配置操作的函数，导致这题的难度增加了不少。</p><h2 id="Challenge-8"><a href="#Challenge-8" class="headerlink" title="Challenge 8"></a>Challenge 8</h2><p>继续看下一题，file得出是一个DOS/MBR 的boot sector</p><p>我们可以直接用qemu启动，启动出来是一个非常DOS的界面，蓝屏白字，要求逆向输入password</p><p>一股古老的气息扑面而来 That’s funny!</p><p><img src="/2018/11/21/2018flare-on-recording/c8_qemu.png" alt="qemu"></p><p>接下来可以用qemu+GDB调试</p><p><code>qemu-system-x86_64 doogie.bin -S -s</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> .gdbinit</span></span><br><span class="line">set $lastcs = -1</span><br><span class="line"></span><br><span class="line">define hook-stop</span><br><span class="line"><span class="meta">  #</span><span class="bash"> There doesn<span class="string">&#x27;t seem to be a good way to detect if we&#x27;</span>re <span class="keyword">in</span> 16- or</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 32-bit mode, but we always run with CS == 8 <span class="keyword">in</span> 32-bit mode.</span></span><br><span class="line">  if $cs == 8 || $cs == 27</span><br><span class="line">    if $lastcs != 8 &amp;&amp; $lastcs != 27</span><br><span class="line">      set architecture i386</span><br><span class="line">    end</span><br><span class="line">    x/i $pc</span><br><span class="line">  else</span><br><span class="line">    if $lastcs == -1 || $lastcs == 8 || $lastcs == 27</span><br><span class="line">      set architecture i8086</span><br><span class="line">    end</span><br><span class="line">    # Translate the segment:offset into a physical address</span><br><span class="line">    printf &quot;[%4x:%4x] &quot;, $cs, $eip</span><br><span class="line">    x/i $cs*16+$eip</span><br><span class="line">  end</span><br><span class="line">  set $lastcs = $cs</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这里有个技巧，因为gef等插件不能显示实地址上的调试信息，所以我们可以通过这个脚本令单步调试的时候显示出bootloader上的指令</p><p><code>gdb -x .gdbinit doogie.bin</code> </p><p><code>b *0x7c00</code></p><p><code>target remote 127.0.0.1:1234</code></p><p>对于ROM，默认加载地址是在0x7c00，这是BIOS中的约定，具体为什么可以看</p><p><a href="https://www.glamenv-septzen.net/en/view/6">Why BIOS loads MBR into 0x7C00 in x86</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">seg000:0027 sub_27          proc near               ; CODE XREF: seg000:0021↑p</span><br><span class="line">seg000:0027                 xor     eax, eax</span><br><span class="line">seg000:002A                 mov     di, sp</span><br><span class="line">seg000:002C                 push    eax</span><br><span class="line">seg000:002E                 push    ebx</span><br><span class="line">seg000:0030                 push    es</span><br><span class="line">seg000:0031                 push    8000h</span><br><span class="line">seg000:0034                 push    7</span><br><span class="line">seg000:0036                 push    10h</span><br><span class="line">seg000:0038                 mov     si, sp</span><br><span class="line">seg000:003A                 mov     dl, ds:7C45h</span><br><span class="line">seg000:003E                 mov     ah, 42h ; &#39;B&#39;</span><br><span class="line">seg000:0040                 int     13h             ; DISK - IBM&#x2F;MS Extension - EXTENDED READ (DL - drive, DS:SI - disk address packet)</span><br><span class="line">seg000:0042                 mov     sp, di</span><br><span class="line">seg000:0044                 retn</span><br><span class="line">seg000:0044 sub_27          endp</span><br></pre></td></tr></table></figure><p>那么，关键便是sub_27函数中的<code>int 13h</code>了</p><p>引用wiki中的解释</p><p><a href="https://en.wikipedia.org/wiki/INT_13H#INT_13h_AH=42h:_Extended_Read_Sectors_From_Drive">https://en.wikipedia.org/wiki/INT_13H#INT_13h_AH=42h:_Extended_Read_Sectors_From_Drive</a></p><p>那么，在这里便是</p><table><thead><tr><th style="text-align:center">DAP Element</th><th style="text-align:center">Hex Byte</th></tr></thead><tbody><tr><td style="text-align:center">Size</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">Reserved</td><td style="text-align:center">00</td></tr><tr><td style="text-align:center"># Sectors to Read</td><td style="text-align:center">00 07</td></tr><tr><td style="text-align:center">Destination Address</td><td style="text-align:center">00 00 80 00</td></tr><tr><td style="text-align:center">Start Sector</td><td style="text-align:center">00 00 00 00 00 00 00 01</td></tr></tbody></table><p>这整个中断的操作就是从第一扇区（sector）开始读取7个扇区放到0x8000上</p><p>而一个扇区的大小为0x200，即512 Bytes，所以我们不看一开始的loader，只需要把整个image rebase到0x8000-0x200 = 0x7E00即可对后续进行分析</p><p>或者可以把image偏移从0x200开始的数据dump出来，然后rebase到0x8000进行分析</p><p>然后则是分析程序逻辑，逻辑非常简单，把binary中固定的data与当前日期异或再与用户输入的密码异或</p><p>首先日期从开头文字已经提示了，是<code>1990/02/06</code><br>然后对用户输入的密码，首先明确几个限制，必须再0x20-0x7f这个可见字符集中，另外储存密码的buffer总长度为21</p><p>因为用于异或的data很大，那么这不可能是输出@flare-on之类的flag，猜测这是个asciiart</p><p>既然是asciiart，则输出应当也是可见字符，接下来便是通过暴力的方法进行解了</p><p>这实际上便是密码学中的一个问题，参考cryptopals上的一道题目</p><p><a href="http://cryptopals.com/sets/1/challenges/6">http://cryptopals.com/sets/1/challenges/6</a></p><p>通过计算等长的字符串的汉明距离（hamming distance），距离最小的便是猜测密码的可能长度</p><p>然后便可以对密码进行进一步的猜测</p><p>官方wp中提到一个开源工具可以用来进行xor评分猜测</p><p><a href="https://github.com/hellman/xortool">https://github.com/hellman/xortool</a></p><h2 id="challenge-9"><a href="#challenge-9" class="headerlink" title="challenge 9"></a>challenge 9</h2><p>To be continue…still writing…</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> flare-on </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>诈尸一下</title>
      <link href="2018/10/08/%E8%AF%88%E5%B0%B8%E4%B8%80%E4%B8%8B/"/>
      <url>2018/10/08/%E8%AF%88%E5%B0%B8%E4%B8%80%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<p>在咸鱼很久以后，我突然想起了这个被我荒废了很久的博客</p><p>结合在断更之后所做过的事，现在立几个flag，先占几个坑，发布准备更新的文章</p><ol><li>android的api以及Linux内核hook的实现</li><li>Flare-on5 题解1-6</li><li>giglf的工具集</li></ol><p>这段时间打了好多ctf比赛，主做re，但是没打算写wp23333</p><p>有些是太久远了，而更主要原因是因为做出来的题没价值</p><p>最近做了flare-on5，做出了6题，flareon感觉还是能学到非常多的东西的</p><p>接下来打算着重总结一下</p><p>暂时，就这样（顺便测试一下新电脑上的hexo deploy</p>]]></content>
      
      
      <categories>
          
          <category> 感想or发疯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随便写写啦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu克隆mac地址后连不上网</title>
      <link href="2018/04/06/Ubuntu%E5%85%8B%E9%9A%86mac%E5%9C%B0%E5%9D%80%E5%90%8E%E8%BF%9E%E4%B8%8D%E4%B8%8A%E7%BD%91/"/>
      <url>2018/04/06/Ubuntu%E5%85%8B%E9%9A%86mac%E5%9C%B0%E5%9D%80%E5%90%8E%E8%BF%9E%E4%B8%8D%E4%B8%8A%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<p>记录最近配置ubuntu网络时遇到的神坑……</p><p>首先，我现在工位的电脑我装的是ubuntu16.04，然后因为端口的ip是跟mac地址绑定的，并且当时绑的是我笔记本的地址</p><p>所以，为了避免麻烦再绑一次，我就想直接改了ubuntu的mac就好了，那样我有时用笔记本直接插网线也就可以了</p><span id="more"></span><p>重点来了，我采取的方式是直接在网络连接里设置，clone mac address改成我笔记本的mac地址</p><p>结果是，重启电脑后，网络连接反复像网线没插好，一直在重复尝试连接，刚连上就又断了！</p><p>排除了网线、网络问题（因为直接插上我笔记本是能秒连的）</p><p>ubuntu里ifconfig能看到网卡，检查过网卡驱动也是好的，应该也不是这个原因</p><p>后来，我发现，如果我把克隆mac地址去掉，网络就秒连了！但是这样我还是上不了网啊！</p><p>上网搜了一波，终于发现了这个bug的出处</p><p><a href="https://askubuntu.com/questions/307717/networkmanager-problem-with-cloned-mac-address">https://askubuntu.com/questions/307717/networkmanager-problem-with-cloned-mac-address</a></p><p>居然是因为network-manager的bug？？？</p><p>再看描述，居然还是从ubuntu12.04遗留下来的，居然还没解决？？？</p><p>好了……最后解决了，我写了个脚本，每次开机后执行下就好了……</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 down</span><br><span class="line">ifconfig eth0 hw ether XX:XX:XX:XX:XX:XX</span><br><span class="line">ifconfig eth0 up</span><br></pre></td></tr></table></figure><p>记得把eth0换成你自己的网卡……</p>]]></content>
      
      
      <categories>
          
          <category> Study_Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network-manager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FindTheActivity出题记录</title>
      <link href="2018/03/26/FindTheActivity%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>2018/03/26/FindTheActivity%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>某次ctf内部赛上出了一题android的re，算是第一次认真出题了23333</p><p>因为太菜了，这破题从开始想到写花我4天= =，最后还改了一个思路</p><p>题目源码<a href="https://github.com/giglf/CTF_RE_FindTheActivity">https://github.com/giglf/CTF_RE_FindTheActivity</a></p><span id="more"></span><h1 id="FindTheActivity"><a href="#FindTheActivity" class="headerlink" title="FindTheActivity"></a>FindTheActivity</h1><p>我刚开始想到的出题思路是启动一个trick的Activity，误导验证过程，再通过AMS hook修改实际启动的Activity，真正启动的是一个要通过解密出来的dex里的Activity，这个解密出来的dex要通过DexClassLoader进行加载</p><p>但是我害怕这个太简单，就想着再加了层NativeActivity</p><p>从google的样例代码直接扒了下来简单修改了一下（不然完全不会写</p><p>初始想法是把内层的整个dex给加密到so文件的data段，然后jeb反编译的时候会什么都看不到，再动态加载内存里的dex，但是……因为太菜了不会写（捂脸），这个参考了之前pwnhub上的一道题，后来仔细看了下，发现我内层的dex写得有点大……正常编译下来700多k，本身想法是直接加密后拷到代码中作为一个全局常量放在.data段，想参考apk加固的做法，但是一直没找到……总结下来还是太菜了，感觉给整个文件patch到data段不应该是这么个做法</p><p>所以我就改成了从NativeActivity传一个key给MainActivity，作为获取解密的秘钥的关键，强制让解题者去看NativeActivity（滑稽），但是还遗留了一个偷鸡解法</p><p>其中AMS hook替换启动的Activity参考了这篇博客里的做法</p><p><a href="http://weishu.me/2016/03/21/understand-plugin-framework-activity-management/">http://weishu.me/2016/03/21/understand-plugin-framework-activity-management/</a></p><h1 id="writeup"><a href="#writeup" class="headerlink" title="writeup"></a>writeup</h1><h2 id="正常解法"><a href="#正常解法" class="headerlink" title="正常解法"></a>正常解法</h2><p>首先安装上手机，发现是一个屏幕颜色不断变换的界面，点击操作无别的反应。</p><p>然后jeb直接反编译，可以发现底下有6个类，其中名称很明显的是<code>CheckActivity</code>和<code>MainActivity</code></p><p>对于一个android的apk，首先思路是要查看一下AndroidManifest.xml文件，这记录了该apk的一些权限、Activity等组件注册信息。</p><p><code>&lt;intent-filter&gt;</code>包含这两句的是第一个启动的Activity</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>最后可以看到第一个启动的其实是NativeActivity，搜一下能知道这是一个纯粹靠cpp写的Activity，可以从apk解压出/lib/libnative-main.so，这是包含NativeActivity的地方，并且主函数为<code>android_main</code> （但是我做了轻轻的混淆，把这符号名给删了）</p><p>但是搜一下字符串能找到</p><p><code>.text:00006288    0000003A    C    Ahahahah, go to shake your phone 100 times in 10 seconds!</code></p><p>这样的字符串</p><p>跳转过去就是原来的<code>android_main</code>了</p><p>10秒里摇一摇摇到100次，会跳转到MainActivity（这开始应该是试出来的），会通过log输出一些信息，可以从ddms中看到</p><hr><p>再看到MainActivity，全程就是一个crackme，获取输入，然后放到intent里，再启动CheckActivtity，然后开始验证</p><p>这个验证过程很简单，很容易就能恢复出<code>green&#123;Do_you_really_think_this_is_flag?&#125;</code></p><p>这是是flag吗？？并不是，这只是一个trick（要这么简单的话我写那么多类干嘛哦）</p><p>但是intent的的确确是启动了CheckActivity这个Activity，但实际上这个flag在手机里输入试下也是出现wrong的。</p><p>之后可以注意到，在MainActivity中还有个attachBaseContext，这个方法是在Activity生成时最开始调用的，注意到里面调用了另外的一个a的类</p><p>后面这些类都做混淆了</p><p>几个类翻看一下c里面有许多base64编码的字符串，简单解一下能看到一些类名，还有一个<code>ctf.green.findtheactivity.check.CheckActivity</code>的类名，但是目录显然不包含<code>ctf.green.findtheactivity.check</code>的包，后面还能看到DexClassLoader的类的调用，dex其实就是android虚拟机的可执行文件，可以猜想他加载了另外一个Dex！</p><p>再往代码上面看，能看到getAssets()的调用，base64解码后是一串类似MD5的值（的确也是MD5），然后在apk包里的asset目录能找到这个文件</p><p>接下来的操作，复制出来，对读到的字节还调用了一个函数，可以猜到是做一个解密的操作，这个解密的类是b，其中秘钥是文件名和一个int值拆解成的4字节byte数组轮流进行异或</p><p>而这个int值跟上去是MainActivity中从启动intent获取的一个叫key的字段的值</p><p>而启动MainActivity的是NativeActivity，再从NativeActivity中看，在摇到100次后会调用一个函数，这时还传进去一个int值，int值是根据摇晃次数生成的，但摇晃次数是固定的，实际这就是一个写死的值，很容易算出是70624300（数字人生——林子祥 233333）</p><p>获取key后就是解密asset底下那个文件了</p><p>因为这里算法类已经给出，可以直接复制一下自己写个java调用，或者对算法熟悉的可以看出这是一个ARC4的加解密，直接恢复后就出来那个动态加载的dex了</p><p>反编译一下这个dex，跟那个trick的CheckActivity非常相似，而且对flag的验证也只是几个异或，本来想着到最后一步了就不难为大家了（其实也是懒得写更复杂的验证算法2333333）</p><p>最后就能出来真正的flag了</p><h2 id="偷鸡解法"><a href="#偷鸡解法" class="headerlink" title="偷鸡解法"></a>偷鸡解法</h2><p>后来还放出了一个hint，注意data目录，因为DexClassLoader加载的dex在程序中有一步复制出来的步骤</p><p>查看手机里<code>/data/data/&lt;package&gt;/</code>这个存放app的信息的目录，就能发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@pisces:&#x2F;data&#x2F;data&#x2F;ctf.green.findtheactivity # ls</span><br><span class="line">app_dex</span><br><span class="line">app_outdex</span><br><span class="line">cache</span><br><span class="line">files</span><br><span class="line">lib</span><br></pre></td></tr></table></figure><p>有个app_dex和app_outdex的目录</p><p>从app_outdex中能找到一个dex文件，这其实就已经是解密过后的dex了！</p><p>正常逻辑是解密后放到<code>app_dex</code>，然后<code>app_outdex</code>生成的是一个缓存用的odex文件，程序中在dex成功加载后就会删除两个文件夹里的内容，所以app_dex是空的，但是运行需要这个odex文件，odex文件是没删掉的！</p><p>通过adb pull把odex文件拷出</p><p>再用baksmali把odex解出来smali</p><p><code>java ‐jar baksmali.jar de ‐‐classpath‐dir &lt;framework‐dir&gt; &lt;classes.dex&gt;</code></p><p>用smali<br><code>java ‐jar smali.jar ass out</code></p><p>把smali恢复成dex，得到out.dex，就能正常反编译了，然后就是那个智障的验证过程</p><p>或者，可以在动态调试还没删除app_dex下的dex的时候pull出来，再或者……看手速？</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译小米3td内核记录</title>
      <link href="2018/01/31/%E7%BC%96%E8%AF%91%E5%B0%8F%E7%B1%B33td%E5%86%85%E6%A0%B8%E8%AE%B0%E5%BD%95/"/>
      <url>2018/01/31/%E7%BC%96%E8%AF%91%E5%B0%8F%E7%B1%B33td%E5%86%85%E6%A0%B8%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>首先吐槽一下小米3移动版，居然用的是英伟达的CPU，而联通、电信版是高通的</p><p>比较舒服的是小米已经开源了很多内核源码，资料基本都能查到</p><hr><p>虽然安卓底层也是linux的内核，但因为安卓百花齐放，一堆不同的硬件、适配，不同版本的手机也有定制的内核，不然很可能出现某个硬件用不了的情况</p><p>另外，编译过程还出了很多的错误emmmmm</p><p>猜测是编译器版本不同导致的问题</p><p>一下算是手把手教如何编译一遍了……</p><span id="more"></span><h2 id="Mi3-TD分支选择"><a href="#Mi3-TD分支选择" class="headerlink" title="Mi3 TD分支选择"></a>Mi3 TD分支选择</h2><p>首先再吐槽一下，github的repo description没有显示全，导致刚开始我没找到Mi3 TD的分支，但在网页的title可以全部显示出来</p><blockquote><p>MiCode/Xiaomi_Kernel_OpenSource: Xiaomi kernel OpenSource：cancro-kk-oss(contain MI 3W, MI 3C, MI 4 series, MI NOTE), armani-jb-oss(H1S), dior-kk-oss(HM-NOTE-LTE), ferrari-l-oss(Xiaomi 4i), thmoas-kk-oss(HM2 LTE),libra-l-oss(Xiaomi 4c,Xiaomi 4s and Xiaomi NotePro),kenzo-l-oss(HM Note3),ido-l-oss(Redme 3 and Redmi 2 android L),gucci-kk-oss(HM Note dual SIM version),pisces-kk-oss(MI 3TD),gemini-m-oss(Mi 5),hydrogen-m-oss(Mi Max),mocha-kk-oss(Mi Pad),latte-l-oss(Mi Pad2),land-m-oss(Redmi 3S),markw-m-oss(Redmi 4),scorpio-m-oss(Mi 5/5s/5s Plus/Note2 and MIX),mido-m-oss(Redmi Note4X),sagit-n-oss(Xiaomi 6 and MIX 2),jason-n-oss(MI Note 3),cancro-m-oss(Mi 3W/C, Mi 4, Mi Note),oxygen-n-oss(Mi Max2),tissot-n-oss(Mi A1)</p></blockquote><p><a href="https://github.com/MiCode/Xiaomi_Kernel_OpenSource/tree/pisces-kk-oss">https://github.com/MiCode/Xiaomi_Kernel_OpenSource/tree/pisces-kk-oss</a></p><p>对应分支是这个<code>pisces-kk-oss</code></p><p>其他不同的手机可以选对应的版本</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>因为我的Ubuntu很多库都装好了= = 并不清楚准确需要到那些库，但有一点是，我使用的交叉编译工具是<code>arm-none-eabi-gcc</code> 可直接通过apt下载</p><p>再补充一下，我的编译环境是Ubuntu16.04 amd64</p><p>当所有都装好后，就可以正式开始编译的工作了</p><h2 id="编译操作"><a href="#编译操作" class="headerlink" title="编译操作"></a>编译操作</h2><p>进入到内核源码目录，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ARCH=arm</span><br><span class="line"><span class="built_in">export</span> CROSS_COMPILE=arm-none-eabi-</span><br></pre></td></tr></table></figure><p>然后，从项目的git log可以看到</p><blockquote><p> Kernel: Xiaomi kernel changes for XIAOMI 3TD<br> ​    </p><pre><code>The Patch based on NVIDIA release TAG tegra-17r18-android-4.2The kernel config file used is tegra11_pisces_user_defconfigChange-Id: Ie601491b74b18e87303ec010b4df660e127f03beSigned-off-by: hehao &lt;hehao@xiaomi.com&gt;</code></pre></blockquote><p>kernel config file的版本</p><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make tegra11_pisces_user_defconfig</span><br></pre></td></tr></table></figure><p>进行编译的预设置</p><p>另外，因为我是要借用Module.symvers编写LKM的，所以在生成的<code>.config</code> 文件中，设置<code>CONFIG_MODVERSIONS=y</code></p><p>这篇文章大家可以参考<a href="http://www.freebuf.com/articles/system/93168.html">http://www.freebuf.com/articles/system/93168.html</a></p><p>一切准备就绪，就可以直接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>了</p><h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><p>编译过程中断了好几次，经过修改后终于是成功了</p><p>这里就总结一些各个存在问题的地方</p><ol><li>代码BUG？</li></ol><p>在编译到<code>/drivers/media/video/tegra/ad5823.c</code> 的时候</p><p>会出现<code>error: iteration 6u invokes undefined behavior</code> 的编译错误</p><p>说是第六次循环的时候出现未定义行为</p><p>看了一下代码</p><p>这一行循环是这样的，看内容是遍历ad5823_gpios，然后针对里面的元素进行操作</p><p>但是看下面的static代码，这个结构体数组只有6个，然后循环体里用了<code>&lt;=</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">nvc_gpio_init</span> <span class="title">ad5823_gpios</span>[] =</span> &#123;</span><br><span class="line">&#123;AD5823_GPIO_RESET, GPIOF_OUT_INIT_LOW, <span class="string">&quot;reset&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>,&#125;,</span><br><span class="line">&#123;AD5823_GPIO_I2CMUX, <span class="number">0</span>, <span class="string">&quot;i2c_mux&quot;</span>, <span class="number">0</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;AD5823_GPIO_GP1, <span class="number">0</span>, <span class="string">&quot;gp1&quot;</span>, <span class="number">0</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;AD5823_GPIO_GP2, <span class="number">0</span>, <span class="string">&quot;gp2&quot;</span>, <span class="number">0</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;AD5823_GPIO_GP3, <span class="number">0</span>, <span class="string">&quot;gp3&quot;</span>, <span class="number">0</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">&#123;AD5823_GPIO_CAM_AF_PWDN, <span class="number">0</span>, <span class="string">&quot;cam_af_pwdn&quot;</span>, <span class="number">1</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= ARRAY_SIZE(ad5823_gpios); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (info-&gt;gpio[i].flag &amp;&amp; info-&gt;gpio[i].own) &#123;</span><br><span class="line">gpio_free(info-&gt;gpio[i].gpio);</span><br><span class="line">info-&gt;gpio[i].own = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把<code>&lt;=</code>改成<code>&lt;</code> 后就好了</p><ol start="2"><li>报头文件找不到的错误，主要文件<code>drivers/tspdrv/tspdrv.c</code></li></ol><p>include的方式都是用&lt;&gt;，但所需的头文件都在同目录找到了，猜这是编译器版本的原因了，把那几个&lt;&gt;改成双引号””就好了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tspdrv.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ImmVibeSPI.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tspdrvOutputDataHandler.c&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_HIGH_RES_TIMERS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;VibeOSKernelLinuxHRTime.c&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;VibeOSKernelLinuxTime.c&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>include/linux/dynamic_debug.h:64:16: error: implicit declaration of function &#39;KBUILD_STR&#39;</code></li></ol><p>这个报错在google的时候找到了一毛一样的错误，在Makefile添加了参数后解决~</p><p><a href="https://stackoverflow.com/questions/41388294/error-while-compiling-android-3-10-kernel-source">https://stackoverflow.com/questions/41388294/error-while-compiling-android-3-10-kernel-source</a></p><p>根目录的Makefile在KBUILD_CFLAGS添加</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">KBUILD_CFLAGS += -w</span><br><span class="line"><span class="comment"># if all errors are to be suppressed</span></span><br><span class="line"></span><br><span class="line">KBUILD_CFLAGS += -Wno-error=unused-but-set-variable</span><br><span class="line"><span class="comment"># if that specific error is to be suppressed.</span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>error: ‘tspdrv’ undeclared</code></li></ol><p>这个问题直接在Xiaomi kernel的issues下找到了</p><p><a href="https://github.com/MiCode/Xiaomi_Kernel_OpenSource/issues/62">https://github.com/MiCode/Xiaomi_Kernel_OpenSource/issues/62</a></p><p>把<code>drivers/tspdrv</code> 下的Makefile修改一下</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##EXTRA_CFLAGS += -I$(M)</span></span><br><span class="line">EXTRA_CFLAGS += -I<span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br></pre></td></tr></table></figure><p>就成功了</p><h2 id="编译成功"><a href="#编译成功" class="headerlink" title="编译成功"></a>编译成功</h2><p>没啥说了，好冷不想写了[doge]</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 内核编译 </tag>
            
            <tag> mi3_td </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog update again...</title>
      <link href="2017/11/28/Blog-update-again/"/>
      <url>2017/11/28/Blog-update-again/</url>
      
        <content type="html"><![CDATA[<p> 简单来说</p><p>就是觉得以前用的那个主题freemind</p><p>太单调了</p><p>毕竟也不是自己写的</p><p>某次看别人的博客，看到一个叫spfk的主题</p><p><a href="https://github.com/luuman/hexo-theme-spfk">https://github.com/luuman/hexo-theme-spfk</a></p><p>感觉就是</p><p>艾玛太炫酷了</p><p>然后就用了</p><span id="more"></span><p>还有就是修复了数学公式不能正常渲染的bugs</p><p>再就是，我把背景图换成了美食系列</p><p>祝你们看博客愉快 ！</p><p>这真的不是一篇美食博客</p><p><img src="/2017/11/28/Blog-update-again/bg-1.jpg" alt="bg-1"></p><p>超想回去吃双皮奶了 (つД｀)･ﾟ･</p>]]></content>
      
      
      <categories>
          
          <category> 感想or发疯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随便写写啦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析Android so加载过程</title>
      <link href="2017/11/22/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Android-so%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
      <url>2017/11/22/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Android-so%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在目前许多的Android应用加固中，都用到了so文件，并且通过针对so文件的section table进行混淆处理，以避免ida等逆向工具进行静态分析，因为在Android源码中，so的加载是完全不需要section信息的。</p><p>在此之前，很多文章都已经写到过关于Android so加载的流程，但很多都是基于Android4.x系统</p><p>虽然流程大同小异，但在Android5.0以后已经从Dalvik转换成ART，文件关系上已经对不上</p><p>因此，我针对Android7.1.2_r28的代码，对so加载过程进行分析</p><h1 id="so加载"><a href="#so加载" class="headerlink" title="so加载"></a>so加载</h1><p>在加载一个so的时候，必然要写一句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.loadLibrary(<span class="string">&quot;native-lib&quot;</span>);</span><br></pre></td></tr></table></figure><p>那么，我们就从这个函数看起</p><span id="more"></span><p>在aosp目录中，这个方法位于<code>./libcore/ojluni/src/main/java/java/lang/Runtime.java</code> 当中</p><p>(一些关于异常错误处理的代码已删除，方便只看加载思路)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// ./libcore/ojluni/src/main/java/java/lang/Runtime.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadLibrary</span><span class="params">(String libname)</span> </span>&#123;</span><br><span class="line">        loadLibrary0(VMStack.getCallingClassLoader(), libname);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">loadLibrary0</span><span class="params">(ClassLoader loader, String libname)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    ......</span><br><span class="line">          </span><br><span class="line">        String libraryName = libname;</span><br><span class="line">        <span class="keyword">if</span> (loader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String filename = loader.findLibrary(libraryName);</span><br><span class="line">            </span><br><span class="line">            String error = doLoad(filename, loader);</span><br><span class="line">            <span class="keyword">if</span> (error != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedLinkError(error);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">......</span><br><span class="line">      <span class="comment">//下面删掉代码为根据平台加载对应的library，如x86、arm等</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">doLoad</span><span class="params">(String name, ClassLoader loader)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">  String librarySearchPath = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (loader != <span class="keyword">null</span> &amp;&amp; loader <span class="keyword">instanceof</span> BaseDexClassLoader) &#123;</span><br><span class="line">            BaseDexClassLoader dexClassLoader = (BaseDexClassLoader) loader;</span><br><span class="line">            librarySearchPath = dexClassLoader.getLdLibraryPath();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// nativeLoad should be synchronized so there&#x27;s only one LD_LIBRARY_PATH in use regardless</span></span><br><span class="line">        <span class="comment">// of how many ClassLoaders are in the system, but dalvik doesn&#x27;t support synchronized</span></span><br><span class="line">        <span class="comment">// internal natives.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nativeLoad(name, loader, librarySearchPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> should be synchronized, but dalvik doesn&#x27;t support synchronized internal natives.</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">nativeLoad</span><span class="params">(String filename, ClassLoader loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            String librarySearchPath)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>可以看到，到最后将会调用nativeLoad进入到native代码，接下来我们看一看native层的代码</p><p>nativeLoad代码位于<code>./libcore/ojluni/src/main/native/Runtime.c</code> </p><p>在以前的安卓源码中，相关定义是放在Dalvik虚拟机下的，后来换了ART，路径也有所变化，为此我找了很久</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./libcore/ojluni/src/main/native/Runtime.c</span></span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Runtime_nativeLoad(JNIEnv* env, jclass ignored, jstring javaFilename,</span><br><span class="line">                   jobject javaLoader, jstring javaLibrarySearchPath)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> JVM_NativeLoad(env, javaFilename, javaLoader, javaLibrarySearchPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后跳转到art目录下</span></span><br><span class="line"><span class="comment">// ./art/runtime/openjdkjvm/OpenjdkJvm.cc</span></span><br><span class="line"><span class="function">JNIEXPORT jstring <span class="title">JVM_NativeLoad</span><span class="params">(JNIEnv* env,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 jstring javaFilename,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 jobject javaLoader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 jstring javaLibrarySearchPath)</span> </span>&#123;</span><br><span class="line">  <span class="function">ScopedUtfChars <span class="title">filename</span><span class="params">(env, javaFilename)</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (filename.c_str() == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> error_msg;</span><br><span class="line">  &#123;</span><br><span class="line">    art::JavaVMExt* vm = art::Runtime::Current()-&gt;GetJavaVM();</span><br><span class="line">    <span class="keyword">bool</span> success = vm-&gt;LoadNativeLibrary(env,</span><br><span class="line">                                         filename.c_str(),</span><br><span class="line">                                         javaLoader,</span><br><span class="line">                                         javaLibrarySearchPath,</span><br><span class="line">                                         &amp;error_msg);</span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Don&#x27;t let a pending exception from JNI_OnLoad cause a CheckJNI issue with NewStringUTF.</span></span><br><span class="line">  env-&gt;ExceptionClear();</span><br><span class="line">  <span class="keyword">return</span> env-&gt;NewStringUTF(error_msg.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过一系列的跳转，终于跑到关键的函数了</p><p>这个函数太长，不便于看思路，所以我只保留下了一些关键的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./art/runtime/java_vm_ext.cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">JavaVMExt::LoadNativeLibrary</span><span class="params">(JNIEnv* env,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">const</span> std::string&amp; path,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  jobject class_loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  jstring library_path,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  std::string* error_msg)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//检查该NativeLibrary是否已加载</span></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Open the shared library.  Because we&#x27;re using a full path, the system</span></span><br><span class="line">  <span class="comment">// doesn&#x27;t have to search through LD_LIBRARY_PATH.  (It may do so to</span></span><br><span class="line">  <span class="comment">// resolve this library&#x27;s dependencies though.)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Failures here are expected when java.library.path has several entries</span></span><br><span class="line">  <span class="comment">// and we have to hunt for the lib.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Below we dlopen but there is no paired dlclose, this would be necessary if we supported</span></span><br><span class="line">  <span class="comment">// class unloading. Libraries will only be unloaded when the reference count (incremented by</span></span><br><span class="line">  <span class="comment">// dlopen) becomes zero from dlclose.</span></span><br><span class="line"></span><br><span class="line">  Locks::mutator_lock_-&gt;<span class="built_in">AssertNotHeld</span>(self);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* path_str = path.<span class="built_in">empty</span>() ? <span class="literal">nullptr</span> : path.<span class="built_in">c_str</span>();</span><br><span class="line">  <span class="keyword">void</span>* handle = android::<span class="built_in">OpenNativeLibrary</span>(env,</span><br><span class="line">                                            runtime_-&gt;<span class="built_in">GetTargetSdkVersion</span>(),</span><br><span class="line">                                            path_str,</span><br><span class="line">                                            class_loader,</span><br><span class="line">                                            library_path);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> needs_native_bridge = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (handle == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (android::<span class="built_in">NativeBridgeIsSupported</span>(path_str)) &#123;</span><br><span class="line">      handle = android::<span class="built_in">NativeBridgeLoadLibrary</span>(path_str, RTLD_NOW);</span><br><span class="line">      needs_native_bridge = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">VLOG</span>(jni) &lt;&lt; <span class="string">&quot;[Call to dlopen(\&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;, RTLD_NOW) returned &quot;</span> &lt;&lt; handle &lt;&lt; <span class="string">&quot;]&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (handle == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    *error_msg = <span class="built_in">dlerror</span>();</span><br><span class="line">    <span class="built_in">VLOG</span>(jni) &lt;&lt; <span class="string">&quot;dlopen(\&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;, RTLD_NOW) failed: &quot;</span> &lt;&lt; *error_msg;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> ......</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">VLOG</span>(jni) &lt;&lt; <span class="string">&quot;[Added shared library \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot; for ClassLoader &quot;</span> &lt;&lt; class_loader &lt;&lt; <span class="string">&quot;]&quot;</span>;</span><br><span class="line"> ......</span><br><span class="line">  <span class="keyword">bool</span> was_successful = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">void</span>* sym;</span><br><span class="line">  <span class="keyword">if</span> (needs_native_bridge) &#123;</span><br><span class="line">    library-&gt;<span class="built_in">SetNeedsNativeBridge</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  sym = library-&gt;<span class="built_in">FindSymbol</span>(<span class="string">&quot;JNI_OnLoad&quot;</span>, <span class="literal">nullptr</span>);</span><br><span class="line">  <span class="keyword">if</span> (sym == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="built_in">VLOG</span>(jni) &lt;&lt; <span class="string">&quot;[No JNI_OnLoad found in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line">    was_successful = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Call JNI_OnLoad.  We have to override the current class</span></span><br><span class="line">    <span class="comment">// loader, which will always be &quot;null&quot; since the stuff at the</span></span><br><span class="line">    <span class="comment">// top of the stack is around Runtime.loadLibrary().  (See</span></span><br><span class="line">    <span class="comment">// the comments in the JNI FindClass function.)</span></span><br><span class="line">    ScopedLocalRef&lt;jobject&gt; <span class="built_in">old_class_loader</span>(env, env-&gt;<span class="built_in">NewLocalRef</span>(self-&gt;<span class="built_in">GetClassLoaderOverride</span>()));</span><br><span class="line">    self-&gt;<span class="built_in">SetClassLoaderOverride</span>(class_loader);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">VLOG</span>(jni) &lt;&lt; <span class="string">&quot;[Calling JNI_OnLoad in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*JNI_OnLoadFn)</span><span class="params">(JavaVM*, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line">    JNI_OnLoadFn jni_on_load = <span class="keyword">reinterpret_cast</span>&lt;JNI_OnLoadFn&gt;(sym);</span><br><span class="line">    <span class="keyword">int</span> version = (*jni_on_load)(<span class="keyword">this</span>, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (runtime_-&gt;<span class="built_in">GetTargetSdkVersion</span>() != <span class="number">0</span> &amp;&amp; runtime_-&gt;<span class="built_in">GetTargetSdkVersion</span>() &lt;= <span class="number">21</span>) &#123;</span><br><span class="line">      fault_manager.<span class="built_in">EnsureArtActionInFrontOfSignalChain</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    self-&gt;<span class="built_in">SetClassLoaderOverride</span>(old_class_loader.<span class="built_in">get</span>());</span><br><span class="line"></span><br><span class="line"> ......</span><br><span class="line">   <span class="comment">//Version check</span></span><br><span class="line">    <span class="built_in">VLOG</span>(jni) &lt;&lt; <span class="string">&quot;[Returned &quot;</span> &lt;&lt; (was_successful ? <span class="string">&quot;successfully&quot;</span> : <span class="string">&quot;failure&quot;</span>)</span><br><span class="line">              &lt;&lt; <span class="string">&quot; from JNI_OnLoad in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  library-&gt;<span class="built_in">SetResult</span>(was_successful);</span><br><span class="line">  <span class="keyword">return</span> was_successful;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排除去一些版本检测，一些操作的语句，其实这个函数做的就是两个步骤</p><ol><li>调用<code>android::OpenNativeLibrary</code>，动态加载so到内存</li><li>从so中找到<code>JNI_Onload</code>函数，并调用。<code>sym = library-&gt;FindSymbol(&quot;JNI_OnLoad&quot;, nullptr);</code></li></ol><hr><p>然后我们再找到<code>android::OpenNativeLibrary</code>的源码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//./system/core/libnativeloader/include/nativeloader/native_loader.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">OpenNativeLibrary</span><span class="params">(JNIEnv* env,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">int32_t</span> target_sdk_version,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">const</span> <span class="keyword">char</span>* path,</span></span></span><br><span class="line"><span class="function"><span class="params">                        jobject class_loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                        jstring library_path)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__ANDROID__)</span></span><br><span class="line">  <span class="built_in">UNUSED</span>(target_sdk_version);</span><br><span class="line">  <span class="keyword">if</span> (class_loader == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dlopen</span>(path, RTLD_NOW);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">guard</span><span class="params">(g_namespaces_mutex)</span></span>;</span><br><span class="line">  <span class="keyword">android_namespace_t</span>* ns = g_namespaces-&gt;<span class="built_in">FindNamespaceByClassLoader</span>(env, class_loader);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ns == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="comment">// This is the case where the classloader was not created by ApplicationLoaders</span></span><br><span class="line">    <span class="comment">// In this case we create an isolated not-shared namespace for it.</span></span><br><span class="line">    ns = g_namespaces-&gt;<span class="built_in">Create</span>(env, class_loader, <span class="literal">false</span>, library_path, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span> (ns == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  android_dlextinfo extinfo;</span><br><span class="line">  extinfo.flags = ANDROID_DLEXT_USE_NAMESPACE;</span><br><span class="line">  extinfo.library_namespace = ns;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">android_dlopen_ext</span>(path, RTLD_NOW, &amp;extinfo);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="built_in">UNUSED</span>(env, target_sdk_version, class_loader, library_path);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">dlopen</span>(path, RTLD_NOW);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路也很简单，这里就是调用了<code>dlopen</code></p><p>然后后面对应还有<code>dlclose</code> <code>dlsym</code> <code>dlerror</code>等对应 programming interface to dynamic linking loader</p><p>这些函数位于</p><p><code>./bionic/linker/dlfcn.cpp</code></p><p>具体实现位于</p><p><code>./bionic/linker/linker.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//./bionic/linker/linker.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">do_dlopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">int</span> flags, <span class="keyword">const</span> android_dlextinfo* extinfo,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">void</span>* caller_addr)</span> </span>&#123;</span><br><span class="line">  soinfo* <span class="keyword">const</span> caller = <span class="built_in">find_containing_library</span>(caller_addr);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((flags &amp; ~(RTLD_NOW|RTLD_LAZY|RTLD_LOCAL|RTLD_GLOBAL|RTLD_NODELETE|RTLD_NOLOAD)) != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">DL_ERR</span>(<span class="string">&quot;invalid flags to dlopen: %x&quot;</span>, flags);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">android_namespace_t</span>* ns = <span class="built_in">get_caller_namespace</span>(caller);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//一些flag的设置和检查</span></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  std::string asan_name_holder;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* translated_name = name;</span><br><span class="line">  <span class="keyword">if</span> (g_is_asan) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">file_is_in_dir</span>(name, kSystemLibDir)) &#123;</span><br><span class="line">      asan_name_holder = std::<span class="built_in">string</span>(kAsanSystemLibDir) + <span class="string">&quot;/&quot;</span> + <span class="built_in">basename</span>(name);</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">file_exists</span>(asan_name_holder.<span class="built_in">c_str</span>())) &#123;</span><br><span class="line">        translated_name = asan_name_holder.<span class="built_in">c_str</span>();</span><br><span class="line">        <span class="built_in">PRINT</span>(<span class="string">&quot;linker_asan dlopen translating \&quot;%s\&quot; -&gt; \&quot;%s\&quot;&quot;</span>, name, translated_name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">file_is_in_dir</span>(name, kVendorLibDir)) &#123;</span><br><span class="line">      asan_name_holder = std::<span class="built_in">string</span>(kAsanVendorLibDir) + <span class="string">&quot;/&quot;</span> + <span class="built_in">basename</span>(name);</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">file_exists</span>(asan_name_holder.<span class="built_in">c_str</span>())) &#123;</span><br><span class="line">        translated_name = asan_name_holder.<span class="built_in">c_str</span>();</span><br><span class="line">        <span class="built_in">PRINT</span>(<span class="string">&quot;linker_asan dlopen translating \&quot;%s\&quot; -&gt; \&quot;%s\&quot;&quot;</span>, name, translated_name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ProtectedDataGuard guard;</span><br><span class="line">  soinfo* si = <span class="built_in">find_library</span>(ns, translated_name, flags, extinfo, caller);</span><br><span class="line">  <span class="keyword">if</span> (si != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    si-&gt;<span class="built_in">call_constructors</span>();</span><br><span class="line">    <span class="keyword">return</span> si-&gt;<span class="built_in">to_handle</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要关注一个关键的结构体<code>soinfo</code></p><p>这个结构体储存了so在加载后的信息</p><p>其定义在<code>./bionic/linker/linker.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">soinfo</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">typedef</span> LinkedList&lt;soinfo, SoinfoListAllocator&gt; <span class="keyword">soinfo_list_t</span>;</span><br><span class="line">  <span class="keyword">typedef</span> LinkedList&lt;<span class="keyword">android_namespace_t</span>, NamespaceListAllocator&gt; <span class="keyword">android_namespace_list_t</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__work_around_b_24465209__)</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">char</span> old_name_[SOINFO_NAME_LEN];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span>* phdr</span>;</span><br><span class="line">  <span class="keyword">size_t</span> phnum;</span><br><span class="line">  <span class="built_in">ElfW</span>(Addr) entry;</span><br><span class="line">  <span class="built_in">ElfW</span>(Addr) base;</span><br><span class="line">  <span class="keyword">size_t</span> size;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__work_around_b_24465209__)</span></span><br><span class="line">  <span class="keyword">uint32_t</span> unused1;  <span class="comment">// DO NOT USE, maintained for compatibility.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">ElfW</span>(Dyn)* dynamic;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__work_around_b_24465209__)</span></span><br><span class="line">  <span class="keyword">uint32_t</span> unused2; <span class="comment">// DO NOT USE, maintained for compatibility</span></span><br><span class="line">  <span class="keyword">uint32_t</span> unused3; <span class="comment">// DO NOT USE, maintained for compatibility</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  soinfo* next;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">uint32_t</span> flags_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* strtab_;</span><br><span class="line">  <span class="built_in">ElfW</span>(Sym)* symtab_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> nbucket_;</span><br><span class="line">  <span class="keyword">size_t</span> nchain_;</span><br><span class="line">  <span class="keyword">uint32_t</span>* bucket_;</span><br><span class="line">  <span class="keyword">uint32_t</span>* chain_;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__mips__) || !defined(__LP64__)</span></span><br><span class="line">  <span class="comment">// This is only used by mips and mips64, but needs to be here for</span></span><br><span class="line">  <span class="comment">// all 32-bit architectures to preserve binary compatibility.</span></span><br><span class="line">  <span class="built_in">ElfW</span>(Addr)** plt_got_;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(USE_RELA)</span></span><br><span class="line">  <span class="built_in">ElfW</span>(Rela)* plt_rela_;</span><br><span class="line">  <span class="keyword">size_t</span> plt_rela_count_;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ElfW</span>(Rela)* rela_;</span><br><span class="line">  <span class="keyword">size_t</span> rela_count_;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="built_in">ElfW</span>(Rel)* plt_rel_;</span><br><span class="line">  <span class="keyword">size_t</span> plt_rel_count_;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ElfW</span>(Rel)* rel_;</span><br><span class="line">  <span class="keyword">size_t</span> rel_count_;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">linker_function_t</span>* preinit_array_;</span><br><span class="line">  <span class="keyword">size_t</span> preinit_array_count_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">linker_function_t</span>* init_array_;</span><br><span class="line">  <span class="keyword">size_t</span> init_array_count_;</span><br><span class="line">  <span class="keyword">linker_function_t</span>* fini_array_;</span><br><span class="line">  <span class="keyword">size_t</span> fini_array_count_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">linker_function_t</span> init_func_;</span><br><span class="line">  <span class="keyword">linker_function_t</span> fini_func_;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__arm__)</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// ARM EABI section used for stack unwinding.</span></span><br><span class="line">  <span class="keyword">uint32_t</span>* ARM_exidx;</span><br><span class="line">  <span class="keyword">size_t</span> ARM_exidx_count;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__mips__)</span></span><br><span class="line">  <span class="keyword">uint32_t</span> mips_symtabno_;</span><br><span class="line">  <span class="keyword">uint32_t</span> mips_local_gotno_;</span><br><span class="line">  <span class="keyword">uint32_t</span> mips_gotsym_;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">mips_relocate_got</span><span class="params">(<span class="keyword">const</span> VersionTracker&amp; version_tracker,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> <span class="keyword">soinfo_list_t</span>&amp; global_group,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">const</span> <span class="keyword">soinfo_list_t</span>&amp; local_group)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(__LP64__)</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">mips_check_and_adjust_fp_modes</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">size_t</span> ref_count_;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  link_map link_map_head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> constructors_called;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// When you read a virtual address from the ELF file, add this</span></span><br><span class="line">  <span class="comment">// value to get the corresponding address in the process&#x27; address space.</span></span><br><span class="line">  <span class="built_in">ElfW</span>(Addr) load_bias;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(__LP64__)</span></span><br><span class="line">  <span class="keyword">bool</span> has_text_relocations;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">bool</span> has_DT_SYMBOLIC;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">soinfo</span>(<span class="keyword">android_namespace_t</span>* ns, <span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">const</span> struct stat* file_stat,</span><br><span class="line">         <span class="keyword">off64_t</span> file_offset, <span class="keyword">int</span> rtld_flags);</span><br><span class="line">  ~<span class="built_in">soinfo</span>();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">call_constructors</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">call_destructors</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">call_pre_init_constructors</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">prelink_image</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">link_image</span><span class="params">(<span class="keyword">const</span> <span class="keyword">soinfo_list_t</span>&amp; global_group, <span class="keyword">const</span> <span class="keyword">soinfo_list_t</span>&amp; local_group,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">const</span> android_dlextinfo* extinfo)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">protect_relro</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_child</span><span class="params">(soinfo* child)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">remove_all_links</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">ino_t</span> <span class="title">get_st_ino</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">dev_t</span> <span class="title">get_st_dev</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">off64_t</span> <span class="title">get_file_offset</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">uint32_t</span> <span class="title">get_rtld_flags</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">uint32_t</span> <span class="title">get_dt_flags_1</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_dt_flags_1</span><span class="params">(<span class="keyword">uint32_t</span> dt_flags_1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">soinfo_list_t</span>&amp; <span class="title">get_children</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">soinfo_list_t</span>&amp; <span class="title">get_children</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">soinfo_list_t</span>&amp; <span class="title">get_parents</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">find_symbol_by_name</span><span class="params">(SymbolName&amp; symbol_name,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> version_info* vi,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> ElfW(Sym)** symbol)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ElfW</span>(Sym)* <span class="built_in">find_symbol_by_address</span>(<span class="keyword">const</span> <span class="keyword">void</span>* addr);</span><br><span class="line">  <span class="built_in">ElfW</span>(Addr) <span class="built_in">resolve_symbol_address</span>(<span class="keyword">const</span> <span class="built_in">ElfW</span>(Sym)* s) <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">get_string</span><span class="params">(ElfW(Word) index)</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">can_unload</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_gnu_hash</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="keyword">inline</span> <span class="title">has_min_version</span><span class="params">(<span class="keyword">uint32_t</span> min_version __unused)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__work_around_b_24465209__)</span></span><br><span class="line">    <span class="keyword">return</span> (flags_ &amp; FLAG_NEW_SOINFO) != <span class="number">0</span> &amp;&amp; version_ &gt;= min_version;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_linked</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_linker</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_main_executable</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_linked</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_linker_flag</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_main_executable</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_nodelete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">increment_ref_count</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">size_t</span> <span class="title">decrement_ref_count</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">soinfo* <span class="title">get_local_group_root</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_soname</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* soname)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">get_soname</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">get_realpath</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Versym)</span>* <span class="title">get_versym</span><span class="params">(<span class="keyword">size_t</span> n)</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="built_in">ElfW</span>(Addr) <span class="built_in">get_verneed_ptr</span>() <span class="keyword">const</span>;</span><br><span class="line">  <span class="function"><span class="keyword">size_t</span> <span class="title">get_verneed_cnt</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="built_in">ElfW</span>(Addr) <span class="built_in">get_verdef_ptr</span>() <span class="keyword">const</span>;</span><br><span class="line">  <span class="function"><span class="keyword">size_t</span> <span class="title">get_verdef_cnt</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">find_verdef_version_index</span><span class="params">(<span class="keyword">const</span> version_info* vi, ElfW(Versym)* versym)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">uint32_t</span> <span class="title">get_target_sdk_version</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_dt_runpath</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; <span class="title">get_dt_runpath</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">android_namespace_t</span>* <span class="title">get_primary_namespace</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_secondary_namespace</span><span class="params">(<span class="keyword">android_namespace_t</span>* secondary_ns)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_mapped_by_caller</span><span class="params">(<span class="keyword">bool</span> reserved_map)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_mapped_by_caller</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">uintptr_t</span> <span class="title">get_handle</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">generate_handle</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span>* <span class="title">to_handle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">elf_lookup</span><span class="params">(SymbolName&amp; symbol_name, <span class="keyword">const</span> version_info* vi, <span class="keyword">uint32_t</span>* symbol_index)</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="built_in">ElfW</span>(Sym)* <span class="built_in">elf_addr_lookup</span>(<span class="keyword">const</span> <span class="keyword">void</span>* addr);</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">gnu_lookup</span><span class="params">(SymbolName&amp; symbol_name, <span class="keyword">const</span> version_info* vi, <span class="keyword">uint32_t</span>* symbol_index)</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="built_in">ElfW</span>(Sym)* <span class="built_in">gnu_addr_lookup</span>(<span class="keyword">const</span> <span class="keyword">void</span>* addr);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">lookup_version_info</span><span class="params">(<span class="keyword">const</span> VersionTracker&amp; version_tracker, ElfW(Word) sym,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> <span class="keyword">char</span>* sym_name, <span class="keyword">const</span> version_info** vi)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">call_array</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* array_name, <span class="keyword">linker_function_t</span>* functions, <span class="keyword">size_t</span> count, <span class="keyword">bool</span> reverse)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">call_function</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* function_name, <span class="keyword">linker_function_t</span> function)</span></span>;</span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElfRelIteratorT&gt;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">relocate</span><span class="params">(<span class="keyword">const</span> VersionTracker&amp; version_tracker, ElfRelIteratorT&amp;&amp; rel_iterator,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">const</span> <span class="keyword">soinfo_list_t</span>&amp; global_group, <span class="keyword">const</span> <span class="keyword">soinfo_list_t</span>&amp; local_group)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">// This part of the structure is only available</span></span><br><span class="line">  <span class="comment">// when FLAG_NEW_SOINFO is set in this-&gt;flags.</span></span><br><span class="line">  <span class="keyword">uint32_t</span> version_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// version &gt;= 0</span></span><br><span class="line">  <span class="keyword">dev_t</span> st_dev_;</span><br><span class="line">  <span class="keyword">ino_t</span> st_ino_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dependency graph</span></span><br><span class="line">  <span class="keyword">soinfo_list_t</span> children_;</span><br><span class="line">  <span class="keyword">soinfo_list_t</span> parents_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// version &gt;= 1</span></span><br><span class="line">  <span class="keyword">off64_t</span> file_offset_;</span><br><span class="line">  <span class="keyword">uint32_t</span> rtld_flags_;</span><br><span class="line">  <span class="keyword">uint32_t</span> dt_flags_1_;</span><br><span class="line">  <span class="keyword">size_t</span> strtab_size_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// version &gt;= 2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> gnu_nbucket_;</span><br><span class="line">  <span class="keyword">uint32_t</span>* gnu_bucket_;</span><br><span class="line">  <span class="keyword">uint32_t</span>* gnu_chain_;</span><br><span class="line">  <span class="keyword">uint32_t</span> gnu_maskwords_;</span><br><span class="line">  <span class="keyword">uint32_t</span> gnu_shift2_;</span><br><span class="line">  <span class="built_in">ElfW</span>(Addr)* gnu_bloom_filter_;</span><br><span class="line"></span><br><span class="line">  soinfo* local_group_root_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint8_t</span>* android_relocs_;</span><br><span class="line">  <span class="keyword">size_t</span> android_relocs_size_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* soname_;</span><br><span class="line">  std::string realpath_;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Versym)</span>* versym_</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ElfW</span>(Addr) verdef_ptr_;</span><br><span class="line">  <span class="keyword">size_t</span> verdef_cnt_;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ElfW</span>(Addr) verneed_ptr_;</span><br><span class="line">  <span class="keyword">size_t</span> verneed_cnt_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint32_t</span> target_sdk_version_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// version &gt;= 3</span></span><br><span class="line">  std::vector&lt;std::string&gt; dt_runpath_;</span><br><span class="line">  <span class="keyword">android_namespace_t</span>* primary_namespace_;</span><br><span class="line">  <span class="keyword">android_namespace_list_t</span> secondary_namespaces_;</span><br><span class="line">  <span class="keyword">uintptr_t</span> handle_;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">friend</span> soinfo* <span class="title">get_libdl_info</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>关注一下可以发现，soinfo结构体里包含的只有<code>segment table</code>的信息，并不包含section的信息</p><hr><p>注意发现，其获取soinfo的信息是通过一个叫<code>find_containing_library</code> 的方法，这个是检测so文件是否已经加载到内存中，如果已经加载到内存中，就可以直接return了。</p><p>如果尚未加载到内存中，则会通过<code>find_library</code> 函数获取soinfo信息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./bioni/linker/linker.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> soinfo* <span class="title">find_library</span><span class="params">(<span class="keyword">android_namespace_t</span>* ns,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">int</span> rtld_flags,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">const</span> android_dlextinfo* extinfo,</span></span></span><br><span class="line"><span class="function"><span class="params">                            soinfo* needed_by)</span> </span>&#123;</span><br><span class="line">  soinfo* si;</span><br><span class="line">  <span class="keyword">if</span> (name == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    si = somain;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">find_libraries</span>(ns, needed_by, &amp;name, <span class="number">1</span>, &amp;si, <span class="literal">nullptr</span>, <span class="number">0</span>, rtld_flags,</span><br><span class="line">                             extinfo, <span class="comment">/* add_as_children */</span> <span class="literal">false</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> si;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">find_libraries</span><span class="params">(<span class="keyword">android_namespace_t</span>* ns,</span></span></span><br><span class="line"><span class="function"><span class="params">                           soinfo* start_with,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span> library_names[],</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">size_t</span> library_names_count, soinfo* soinfos[],</span></span></span><br><span class="line"><span class="function"><span class="params">                           std::vector&lt;soinfo*&gt;* ld_preloads,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">size_t</span> ld_preloads_count, <span class="keyword">int</span> rtld_flags,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> android_dlextinfo* extinfo,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">bool</span> add_as_children)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Step 0: prepare.</span></span><br><span class="line">  LoadTaskList load_tasks;</span><br><span class="line">  std::unordered_map&lt;<span class="keyword">const</span> soinfo*, ElfReader&gt; readers_map;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; library_names_count; ++i) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* name = library_names[i];</span><br><span class="line">    load_tasks.<span class="built_in">push_back</span>(LoadTask::<span class="built_in">create</span>(name, start_with, &amp;readers_map));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Construct global_group.</span></span><br><span class="line">  soinfo::<span class="keyword">soinfo_list_t</span> global_group = <span class="built_in">make_global_group</span>(ns);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If soinfos array is null allocate one on stack.</span></span><br><span class="line">  <span class="comment">// The array is needed in case of failure; for example</span></span><br><span class="line">  <span class="comment">// when library_names[] = &#123;libone.so, libtwo.so&#125; and libone.so</span></span><br><span class="line">  <span class="comment">// is loaded correctly but libtwo.so failed for some reason.</span></span><br><span class="line">  <span class="comment">// In this case libone.so should be unloaded on return.</span></span><br><span class="line">  <span class="comment">// See also implementation of failure_guard below.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (soinfos == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">size_t</span> soinfos_size = <span class="built_in"><span class="keyword">sizeof</span></span>(soinfo*)*library_names_count;</span><br><span class="line">    soinfos = <span class="keyword">reinterpret_cast</span>&lt;soinfo**&gt;(<span class="built_in">alloca</span>(soinfos_size));</span><br><span class="line">    <span class="built_in">memset</span>(soinfos, <span class="number">0</span>, soinfos_size);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// list of libraries to link - see step 2.</span></span><br><span class="line">  <span class="keyword">size_t</span> soinfos_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> scope_guard = <span class="built_in">make_scope_guard</span>([&amp;]() &#123;</span><br><span class="line">    <span class="keyword">for</span> (LoadTask* t : load_tasks) &#123;</span><br><span class="line">      LoadTask::<span class="built_in">deleter</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> failure_guard = <span class="built_in">make_scope_guard</span>([&amp;]() &#123;</span><br><span class="line">    <span class="comment">// Housekeeping</span></span><br><span class="line">    <span class="built_in">soinfo_unload</span>(soinfos, soinfos_count);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ZipArchiveCache zip_archive_cache;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step 1: expand the list of load_tasks to include</span></span><br><span class="line">  <span class="comment">// all DT_NEEDED libraries (do not load them just yet)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i&lt;load_tasks.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    LoadTask* task = load_tasks[i];</span><br><span class="line">    soinfo* needed_by = task-&gt;<span class="built_in">get_needed_by</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> is_dt_needed = needed_by != <span class="literal">nullptr</span> &amp;&amp; (needed_by != start_with || add_as_children);</span><br><span class="line">    task-&gt;<span class="built_in">set_extinfo</span>(is_dt_needed ? <span class="literal">nullptr</span> : extinfo);</span><br><span class="line">    task-&gt;<span class="built_in">set_dt_needed</span>(is_dt_needed);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">find_library_internal</span>(ns, task, &amp;zip_archive_cache, &amp;load_tasks, rtld_flags)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    soinfo* si = task-&gt;<span class="built_in">get_soinfo</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_dt_needed) &#123;</span><br><span class="line">      needed_by-&gt;<span class="built_in">add_child</span>(si);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (si-&gt;<span class="built_in">is_linked</span>()) &#123;</span><br><span class="line">      si-&gt;<span class="built_in">increment_ref_count</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// When ld_preloads is not null, the first</span></span><br><span class="line">    <span class="comment">// ld_preloads_count libs are in fact ld_preloads.</span></span><br><span class="line">    <span class="keyword">if</span> (ld_preloads != <span class="literal">nullptr</span> &amp;&amp; soinfos_count &lt; ld_preloads_count) &#123;</span><br><span class="line">      ld_preloads-&gt;<span class="built_in">push_back</span>(si);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (soinfos_count &lt; library_names_count) &#123;</span><br><span class="line">      soinfos[soinfos_count++] = si;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step 2: Load libraries in random order (see b/24047022)</span></span><br><span class="line">  LoadTaskList load_list;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; task : load_tasks) &#123;</span><br><span class="line">    soinfo* si = task-&gt;<span class="built_in">get_soinfo</span>();</span><br><span class="line">    <span class="keyword">auto</span> pred = [&amp;](<span class="keyword">const</span> LoadTask* t) &#123;</span><br><span class="line">      <span class="keyword">return</span> t-&gt;<span class="built_in">get_soinfo</span>() == si;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!si-&gt;<span class="built_in">is_linked</span>() &amp;&amp;</span><br><span class="line">        std::<span class="built_in">find_if</span>(load_list.<span class="built_in">begin</span>(), load_list.<span class="built_in">end</span>(), pred) == load_list.<span class="built_in">end</span>() ) &#123;</span><br><span class="line">      load_list.<span class="built_in">push_back</span>(task);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">shuffle</span>(&amp;load_list);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; task : load_list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!task-&gt;<span class="built_in">load</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step 3: pre-link all DT_NEEDED libraries in breadth first order.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; task : load_tasks) &#123;</span><br><span class="line">    soinfo* si = task-&gt;<span class="built_in">get_soinfo</span>();</span><br><span class="line">    <span class="keyword">if</span> (!si-&gt;<span class="built_in">is_linked</span>() &amp;&amp; !si-&gt;<span class="built_in">prelink_image</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step 4: Add LD_PRELOADed libraries to the global group for</span></span><br><span class="line">  <span class="comment">// future runs. There is no need to explicitly add them to</span></span><br><span class="line">  <span class="comment">// the global group for this run because they are going to</span></span><br><span class="line">  <span class="comment">// appear in the local group in the correct order.</span></span><br><span class="line">  <span class="keyword">if</span> (ld_preloads != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; si : *ld_preloads) &#123;</span><br><span class="line">      si-&gt;<span class="built_in">set_dt_flags_1</span>(si-&gt;<span class="built_in">get_dt_flags_1</span>() | DF_1_GLOBAL);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step 5: link libraries.</span></span><br><span class="line">  soinfo::<span class="keyword">soinfo_list_t</span> local_group;</span><br><span class="line">  <span class="built_in">walk_dependencies_tree</span>(</span><br><span class="line">      (start_with != <span class="literal">nullptr</span> &amp;&amp; add_as_children) ? &amp;start_with : soinfos,</span><br><span class="line">      (start_with != <span class="literal">nullptr</span> &amp;&amp; add_as_children) ? <span class="number">1</span> : soinfos_count,</span><br><span class="line">      [&amp;] (soinfo* si) &#123;</span><br><span class="line">    local_group.<span class="built_in">push_back</span>(si);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We need to increment ref_count in case</span></span><br><span class="line">  <span class="comment">// the root of the local group was not linked.</span></span><br><span class="line">  <span class="keyword">bool</span> was_local_group_root_linked = local_group.<span class="built_in">front</span>()-&gt;<span class="built_in">is_linked</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> linked = local_group.<span class="built_in">visit</span>([&amp;](soinfo* si) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!si-&gt;<span class="built_in">is_linked</span>()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!si-&gt;<span class="built_in">link_image</span>(global_group, local_group, extinfo)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (linked) &#123;</span><br><span class="line">    local_group.for_each([](soinfo* si) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!si-&gt;<span class="built_in">is_linked</span>()) &#123;</span><br><span class="line">        si-&gt;<span class="built_in">set_linked</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    failure_guard.<span class="built_in">disable</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!was_local_group_root_linked) &#123;</span><br><span class="line">    local_group.<span class="built_in">front</span>()-&gt;<span class="built_in">increment_ref_count</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> linked;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意到，27行有一个<code>ELFReader</code> ，找到他的定义处</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./bionic/linker/linker_phdr.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElfReader</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">ElfReader</span>();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">Read</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">int</span> fd, <span class="keyword">off64_t</span> file_offset, <span class="keyword">off64_t</span> file_size)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">Load</span><span class="params">(<span class="keyword">const</span> android_dlextinfo* extinfo)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">name</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> name_.<span class="built_in">c_str</span>(); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">size_t</span> <span class="title">phdr_count</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> phdr_num_; &#125;</span><br><span class="line">  <span class="built_in">ElfW</span>(Addr) <span class="built_in">load_start</span>() <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;<span class="built_in">ElfW</span>(Addr)&gt;(load_start_); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">size_t</span> <span class="title">load_size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> load_size_; &#125;</span><br><span class="line">  <span class="built_in">ElfW</span>(Addr) <span class="built_in">load_bias</span>() <span class="keyword">const</span> &#123; <span class="keyword">return</span> load_bias_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span>* <span class="title">loaded_phdr</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> loaded_phdr_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Dyn)</span>* <span class="title">dynamic</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> dynamic_; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">get_string</span><span class="params">(ElfW(Word) index)</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_mapped_by_caller</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> mapped_by_caller_; &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">ReadElfHeader</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">VerifyElfHeader</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">ReadProgramHeaders</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">ReadSectionHeaders</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">ReadDynamicSection</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">ReserveAddressSpace</span><span class="params">(<span class="keyword">const</span> android_dlextinfo* extinfo)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">LoadSegments</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">FindPhdr</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">CheckPhdr</span><span class="params">(ElfW(Addr))</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">CheckFileRange</span><span class="params">(ElfW(Addr) offset, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> alignment)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> did_read_;</span><br><span class="line">  <span class="keyword">bool</span> did_load_;</span><br><span class="line">  std::string name_;</span><br><span class="line">  <span class="keyword">int</span> fd_;</span><br><span class="line">  <span class="keyword">off64_t</span> file_offset_;</span><br><span class="line">  <span class="keyword">off64_t</span> file_size_;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ElfW</span>(Ehdr) header_;</span><br><span class="line">  <span class="keyword">size_t</span> phdr_num_;</span><br><span class="line"></span><br><span class="line">  MappedFileFragment phdr_fragment_;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span>* phdr_table_</span>;</span><br><span class="line"></span><br><span class="line">  MappedFileFragment shdr_fragment_;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Shdr)</span>* shdr_table_</span>;</span><br><span class="line">  <span class="keyword">size_t</span> shdr_num_;</span><br><span class="line"></span><br><span class="line">  MappedFileFragment dynamic_fragment_;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Dyn)</span>* dynamic_</span>;</span><br><span class="line"></span><br><span class="line">  MappedFileFragment strtab_fragment_;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* strtab_;</span><br><span class="line">  <span class="keyword">size_t</span> strtab_size_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// First page of reserved address space.</span></span><br><span class="line">  <span class="keyword">void</span>* load_start_;</span><br><span class="line">  <span class="comment">// Size in bytes of reserved address space.</span></span><br><span class="line">  <span class="keyword">size_t</span> load_size_;</span><br><span class="line">  <span class="comment">// Load bias.</span></span><br><span class="line">  <span class="built_in">ElfW</span>(Addr) load_bias_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Loaded phdr.</span></span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Phdr)</span>* loaded_phdr_</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Is map owned by the caller</span></span><br><span class="line">  <span class="keyword">bool</span> mapped_by_caller_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从其private的方法就能看出，有一系列读取ELF信息的操作。</p><p>这里要说明一下，这里显然有<code>ReadSectionHeaders()</code> 和 <code>ReadDynamicSection()</code> 两个函数，这在4.x的安卓源码中是没有的，别的没看过，并不清楚。</p><p>在ELFReader中也对应多了一个<code>Read</code>的函数，这是用来读取一个ELF的信息，但是真正运行的时候只需要其加载到内存中，也即是<code>Load</code> 函数。而<code>Load</code>函数中则只需要segment的信息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ElfReader::Read</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">int</span> fd, <span class="keyword">off64_t</span> file_offset, <span class="keyword">off64_t</span> file_size)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">CHECK</span>(!did_read_);</span><br><span class="line">  <span class="built_in">CHECK</span>(!did_load_);</span><br><span class="line">  name_ = name;</span><br><span class="line">  fd_ = fd;</span><br><span class="line">  file_offset_ = file_offset;</span><br><span class="line">  file_size_ = file_size;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">ReadElfHeader</span>() &amp;&amp;</span><br><span class="line">      <span class="built_in">VerifyElfHeader</span>() &amp;&amp;</span><br><span class="line">      <span class="built_in">ReadProgramHeaders</span>() &amp;&amp;</span><br><span class="line">      <span class="built_in">ReadSectionHeaders</span>() &amp;&amp;</span><br><span class="line">      <span class="built_in">ReadDynamicSection</span>()) &#123;</span><br><span class="line">    did_read_ = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> did_read_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ElfReader::Load</span><span class="params">(<span class="keyword">const</span> android_dlextinfo* extinfo)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">CHECK</span>(did_read_);</span><br><span class="line">  <span class="built_in">CHECK</span>(!did_load_);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">ReserveAddressSpace</span>(extinfo) &amp;&amp;</span><br><span class="line">      <span class="built_in">LoadSegments</span>() &amp;&amp;</span><br><span class="line">      <span class="built_in">FindPhdr</span>()) &#123;</span><br><span class="line">    did_load_ = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> did_load_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说，在Android运行时，对于一个so，只需要用到它的segment信息，由此可以对section部分进行删除，而ida等工具静态分析都是通过section的信息进行分析的，所以由此可以有效地防止so被静态分析逆向。</p><hr><p>注意到下面还有调用<code>si-&gt;call_constructors()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">soinfo::call_constructors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (constructors_called) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We set constructors_called before actually calling the constructors, otherwise it doesn&#x27;t</span></span><br><span class="line">  <span class="comment">// protect against recursive constructor calls. One simple example of constructor recursion</span></span><br><span class="line">  <span class="comment">// is the libc debug malloc, which is implemented in libc_malloc_debug_leak.so:</span></span><br><span class="line">  <span class="comment">// 1. The program depends on libc, so libc&#x27;s constructor is called here.</span></span><br><span class="line">  <span class="comment">// 2. The libc constructor calls dlopen() to load libc_malloc_debug_leak.so.</span></span><br><span class="line">  <span class="comment">// 3. dlopen() calls the constructors on the newly created</span></span><br><span class="line">  <span class="comment">//    soinfo for libc_malloc_debug_leak.so.</span></span><br><span class="line">  <span class="comment">// 4. The debug .so depends on libc, so CallConstructors is</span></span><br><span class="line">  <span class="comment">//    called again with the libc soinfo. If it doesn&#x27;t trigger the early-</span></span><br><span class="line">  <span class="comment">//    out above, the libc constructor will be called again (recursively!).</span></span><br><span class="line">  constructors_called = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">is_main_executable</span>() &amp;&amp; preinit_array_ != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="comment">// The GNU dynamic linker silently ignores these, but we warn the developer.</span></span><br><span class="line">    <span class="built_in">PRINT</span>(<span class="string">&quot;\&quot;%s\&quot;: ignoring DT_PREINIT_ARRAY in shared library!&quot;</span>, <span class="built_in">get_realpath</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">get_children</span>().for_each([] (soinfo* si) &#123;</span><br><span class="line">    si-&gt;<span class="built_in">call_constructors</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">TRACE</span>(<span class="string">&quot;\&quot;%s\&quot;: calling constructors&quot;</span>, <span class="built_in">get_realpath</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// DT_INIT should be called before DT_INIT_ARRAY if both are present.</span></span><br><span class="line">  <span class="built_in">call_function</span>(<span class="string">&quot;DT_INIT&quot;</span>, init_func_);</span><br><span class="line">  <span class="built_in">call_array</span>(<span class="string">&quot;DT_INIT_ARRAY&quot;</span>, init_array_, init_array_count_, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数通过执行<code>.init(_array)</code>定义的内容，从而完成so的初始化</p><hr><p><code>dlopen</code>的内容就不继续探究了，这里主要是有关Linux动态链接库方面的内容了。</p><p>总结一下</p><p>Android对so的加载</p><ol><li>通过<code>System.loadLibrary</code> 传递so的路径、classLoader等信息，然后进入native代码</li><li>进入native代码后，通过调用<code>android::OpenNativeLibrary</code> 函数，跳转到dlopen，加载so到内存</li><li>在dlopen中，会通过执行<code>.init(array)</code> 的内容进行so的一些动态链接信息初始化</li><li><code>android::OpenNativeLibrary</code> 执行完后，会调用so中<code>JNI_Onload</code>函数，从而完成native函数的注册</li></ol><hr><h6 id="Android-7-1-1的代码相比4-x的源码复杂了好多……"><a href="#Android-7-1-1的代码相比4-x的源码复杂了好多……" class="headerlink" title="Android 7.1.1的代码相比4.x的源码复杂了好多……"></a>Android 7.1.1的代码相比4.x的源码复杂了好多……</h6>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> so加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一个Windows下Makefile的神坑</title>
      <link href="2017/11/12/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AAWindows%E4%B8%8BMakefile%E7%9A%84%E7%A5%9E%E5%9D%91/"/>
      <url>2017/11/12/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AAWindows%E4%B8%8BMakefile%E7%9A%84%E7%A5%9E%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p> 之前在写一个cpp的项目，不想用一些比较臃肿的IDE，所以就直接vscode+Makefile了</p><p>然后，因为是在windows下开发，遇到了一些神坑了。。</p><hr><p>首先是make clean （别问我为什么不用cmake，是懒得配置</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">clean:</span></span><br><span class="line">rm <span class="variable">$(TARGET)</span> <span class="variable">$(OBJS)</span></span><br></pre></td></tr></table></figure><p>很正常的代码，但是就是运行崩了</p><p>并不是因为rm的原因，因为这是运行在powershell下的结果</p><p>首先，它报出了这样的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">process_begin: CreateProcess(NULL, rm sb.exe src&#x2F;main.o src&#x2F;ELFReader.o, ...) failed.</span><br><span class="line">make (e&#x3D;2): 系统找不到指定的文件。</span><br><span class="line">Makefile:23: recipe for target &#39;clean&#39; failed</span><br><span class="line">make: *** [clean] Error 2</span><br></pre></td></tr></table></figure><p>似乎是找不到命令的原因。</p><p>后来我发现在powershell底下，rm后面的文件与文件之间必须要是逗号分隔……</p><p>修改后，还是爆出一样的错误，经过一系列的搜索并没有搜出个什么来</p><p>后来经朋友提醒……加个引号试试</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">clean:</span></span><br><span class="line"><span class="string">&quot;rm <span class="variable">$(TARGET)</span> <span class="variable">$(OBJS)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>很有道理，那么CreateProcess第二个就像一个参数了</p><p>果然，不一样的报错了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;rm sb.exe src&#x2F;main.o src&#x2F;ELFReader.o&quot;</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;bash: rm sb.exe src&#x2F;main.o src&#x2F;ELFReader.o: No such file or directory</span><br><span class="line">Makefile:30: recipe for target &#39;clean&#39; failed</span><br><span class="line">make: *** [clean] Error 127</span><br></pre></td></tr></table></figure><p>好的，你告诉我为什么在Windows下会调用的是bash（万脸问号）？？？</p><p>结合起来搜索，似乎说这是因为git bash的原因 ´_&gt;`</p><p>不过，我并不打算管了，Windows下开发不用ide坑太多了</p><p>果断转移到Linux底下去</p><hr><p>另外就是，MinGW在window下的依赖问题</p><p>如果是mingw-w64，则能很好的进行64位程序的编译，但是，当我加上-m32</p><p>正常的默认设置是不支持编译32位程序的，但SJLJ的是支持的</p><p>重新安装过后，-m32能正常编译了，但是程序运行会爆出</p><p><code>应用程序无法正常启动0xc000007b</code>的错误，似乎也是一些依赖问题</p><p>但暂时不打算解决了，要想编译32位的程序，大可另外下个w32版本的mingw</p><p>Windows实在……太坑了´_&gt;`</p>]]></content>
      
      
      <categories>
          
          <category> Study_Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable.kr_思路</title>
      <link href="2017/10/25/pwnable-kr-%E6%80%9D%E8%B7%AF/"/>
      <url>2017/10/25/pwnable-kr-%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>学二进制、pwn，pwnable.kr是一个必须要刷的网站，所以开一篇文章专门记录自己的刷题历程</p><p>其实网上很多都有，但我这里主要记录各题的思路，不写详细的解法，也主要用于自己的归纳总结，do it yourself，才能学到更多</p><p>对我所说的思路有不了解或有不同的看法的，欢迎email我 <a href="mailto:lin.giglf@gmail.com">lin.giglf@gmail.com</a> 一起讨论</p><p>不定期更新</p><span id="more"></span><hr><h2 id="Toddler’s-Bottle"><a href="#Toddler’s-Bottle" class="headerlink" title="Toddler’s Bottle"></a>Toddler’s Bottle</h2><p>这个章节做完有点久了。。然后才来补思路，如果有什么错误欢迎联系我 ↑</p><h4 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h4><p>知道linux 下<code>stdin=0</code> <code>stdout=1</code> <code>stderr=2</code></p><h4 id="collision"><a href="#collision" class="headerlink" title="collision"></a>collision</h4><p>学会怎么用python构造非ascii字符的输入</p><h4 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h4><p>一个简单的溢出，覆盖相邻变量的值</p><h4 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h4><p>这其实是一道逆向题。。直接逆就好</p><h4 id="passcode"><a href="#passcode" class="headerlink" title="passcode"></a>passcode</h4><p>scanf没有加取地址符，debug发现能控制passcode1的值，然后可以通过覆写plt达到目的</p><h4 id="random"><a href="#random" class="headerlink" title="random"></a>random</h4><p>随机数种子固定，每次生成随机数一样</p><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><p>这题挺有意思的，写程序执行实现每个阶段的要求，需要了解一些socket相关的知识还有Linux软连接，很有趣！</p><h4 id="leg"><a href="#leg" class="headerlink" title="leg"></a>leg</h4><p>考察arm汇编的阅读，要知道一点，pc的值为当前地址+8</p><h4 id="mistake"><a href="#mistake" class="headerlink" title="mistake"></a>mistake</h4><p>打开password给fd赋值时没有用括号，优先级问题从读文件变成了stdin</p><h4 id="shellshock"><a href="#shellshock" class="headerlink" title="shellshock"></a>shellshock</h4><p>给了一个特定版本的bash，这是一个cve，（CVE-2014-6271），bash是不会继承定义的函数，但是会继承定义的环境变量。而在该版本及以下的bash当中，对环境变量函数的解析在函数定义完毕后并不会停止。便导致了这个漏洞。</p><h4 id="coin1"><a href="#coin1" class="headerlink" title="coin1"></a>coin1</h4><p>通过二分法找出那枚硬币，关键其实是怎么编写与服务器通信的脚本。It’s a good way to learn pwntools.</p><h4 id="blackjack"><a href="#blackjack" class="headerlink" title="blackjack"></a>blackjack</h4><p>阅读代码，发现输入bet money时能溢出，You just need to win one time.</p><h4 id="lotto"><a href="#lotto" class="headerlink" title="lotto"></a>lotto</h4><p>看检测代码部分，双层循环，则只要其中一位能在random中找到就行了</p><h4 id="cmd1"><a href="#cmd1" class="headerlink" title="cmd1"></a>cmd1</h4><p>程序过滤了sh, tmp, flag</p><p>于是/bin/cat fla* ,可以用通配符来解决过滤的flag</p><h4 id="cmd2"><a href="#cmd2" class="headerlink" title="cmd2"></a>cmd2</h4><p>过滤了<code>/</code> ，还删除了对应的环境变量，无法直接cat了，flag依旧可以通过通配符解决。</p><p>网上搜wp看到了很多种思路</p><ol><li>cd 到根目录，通过$(pwd)构造<code>/</code>的</li><li>把命令编码成八进制，通过echo解决的</li></ol><h4 id="uaf"><a href="#uaf" class="headerlink" title="uaf"></a>uaf</h4><p>use after free。在调用的时候，没有检测是否对象已经free，free了后的内存可以任意写，此时写入getshell的地址，则再次调用时就会调用到getshell的函数。</p><h4 id="codemap"><a href="#codemap" class="headerlink" title="codemap"></a>codemap</h4><p>让学习的是ida的IDC脚本编写，当然可以选择使用python，已经提示了注意某个地址寄存器的值，只要在循环每次读入寄存器的值，找出符合的那几个数即可。</p><h4 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h4><p>这题关键是要让程序跑通，主要就是那段内嵌汇编要正常运作不能崩。</p><p>内嵌汇编中，movntps是对xmm进行操作的，xmm是128bits寄存器，16字节，则要求空间要16字节对齐。每次输入满足对齐规则的空间大小。</p><h4 id="asm"><a href="#asm" class="headerlink" title="asm"></a>asm</h4><p>考shellcode的编写，嗯，pwntools的确是个好东西</p><h4 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h4><p>链表中，在unlink一个单位时，很容易出问题</p><p>例如，有一链表 <code>A &lt;-&gt; B &lt;-&gt; C</code></p><p>unlink(B)时，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bk = B-&gt;bk;</span><br><span class="line">fd = B-&gt;fd;</span><br><span class="line">fd-&gt;bk = bk;</span><br><span class="line">bk-&gt;fd = fd;</span><br></pre></td></tr></table></figure><p>如果把B-&gt;bk、B-&gt;fd改写了，则可以改写任意地址的内容。</p><p>例如，假设bk指针在结构体第8字节，改写<code>fd = B-&gt;fd = address-8</code> </p><p>则<code>fd-&gt;bk = address-8+8 = bk = B-&gt;bk</code></p><p>可以把address地址改写，即可以改写任意地址的内容 </p><h4 id="blukat"><a href="#blukat" class="headerlink" title="blukat"></a>blukat</h4><p>password是没有权限去读的，但是在运行的blukat有读的权限并且我们可以运行blukat，在调试中直接就可以看到读到buf中的password内容，而且这个password内容还伪装了一把permission denied。。</p><h4 id="horcruxes"><a href="#horcruxes" class="headerlink" title="horcruxes"></a>horcruxes</h4><p>说明需要rop，很容易找到溢出点，并且没开canary，第一想法是溢出gets直接跳到open flag那里就可以得到flag了。但是试了好一会都没成功，后来才发现在ropme的函数里地址都包含0x0A，即<code>\n</code> ，gets是会截断的。因此只能反复跳到ABCDEFG并计算出sum值最后再call ropme去满足条件获取flag </p><h2 id="Rookiss"><a href="#Rookiss" class="headerlink" title="Rookiss"></a>Rookiss</h2><h4 id="brain-fuck"><a href="#brain-fuck" class="headerlink" title="brain fuck"></a>brain fuck</h4><p>这题属于GOT表替换，brainfuck的指令能随意移动指针，可以移动到GOT表做函数替换</p><h4 id="md5-calculator"><a href="#md5-calculator" class="headerlink" title="md5 calculator"></a>md5 calculator</h4><p>这题的关键点，找到溢出点，base64编码跟原码长度为4:3，存在溢出</p><p>但开了Canary保护，能看到在开头验证码生成时用了对应的cookie，所以可以通过验证码反推出cookie，绕过Canary保护</p><h4 id="simple-login"><a href="#simple-login" class="headerlink" title="simple login"></a>simple login</h4><p>溢出限制了长度，只能溢出到ebp，ret处理不了，但这里在auth函数的ret后，紧接着是main函数的ret，理清思路后可以利用</p><h4 id="otp"><a href="#otp" class="headerlink" title="otp"></a>otp</h4><p>这个题。。。没接触过根本想不到，<code>ulimite -f 0</code>限制文件大小，使得密码为0</p><h4 id="ascii-easy"><a href="#ascii-easy" class="headerlink" title="ascii_easy"></a>ascii_easy</h4><p>这题是我花时间最长的一题了，上网搜了wp，然后发现题目改过，虽然思路差不多，就是构造ascii的shellcode，但一直也没成功。后来github搜到一个解法，发现是函数调用问题，对于系统调用的跟通常的函数调用有点不一样。</p><p>例如call execve，可以参考 <a href="http://shell-storm.org/blog/Return-Oriented-Programming-and-ROPgadget-tool/">http://shell-storm.org/blog/Return-Oriented-Programming-and-ROPgadget-tool/</a> </p><p>然后就是，想方设法构造在ascii范围内的shellcode，并且可以通过环境变量的方式做一个/bin/sh的别名链接，使得我们不需要构造出/bin/sh的地址。但实际想要构造也能成功，通过地址的变换，再找几个rop_chain实现</p><h4 id="tiny-easy"><a href="#tiny-easy" class="headerlink" title="tiny_easy"></a>tiny_easy</h4><p>一个只包含几条指令的binary，简单调试可得，最后call的是argv[0]，并且栈可执行，但是有aslr</p><p>通常，直接启动执行argv[0]是程序执行路径。那么这里有个知识点，可以通过execl进行启动，l参数启动的时候argv[0]是可以自定义的，于是我们可以通过argv往栈上写shellcode，但是call的地址不确定，我们可以通过栈喷的方式，在shellcode前填充大量的slide code（例如nop），于是便可以跑到shellcode上getshell。</p><p><strong>技巧：</strong>调试通过exec系列启动的程序，gdb中<code>set follow-fork-mode child</code>可令调试程序执行跟进到子进程，<code>catch exec</code>可以挂接gdb到通过exec启动的程序上，在该程序上下断点。</p><h4 id="fsb"><a href="#fsb" class="headerlink" title="fsb"></a>fsb</h4><p>简单分析即可知道存在format string (格式化字符串)漏洞</p><p>emmm printf不仅可以用来泄漏地址，还可以用来写入地址，printf包含一个%n的占位符，这个参数的作用是</p><blockquote><p>不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</p></blockquote><p>于是可以通过这个这个方式向栈上写入地址，而因为key的地址是可以获得的（通过printf泄漏或者直接获取都可以，因为key位于.bss段 并且程序没开启aslr），便可以向栈上写入key的地址</p><p>接下来便可以用同样方法覆写key的地址或者直接泄漏key的值了</p><h4 id="dragon"><a href="#dragon" class="headerlink" title="dragon"></a>dragon</h4><p>RPG游戏，试验了一下怎么都不可能正常的打败dragon的，但是我们发现dragon每一轮都会给自己加血，并且dragon的HP储存是个char，那么就恰好存在一个溢出，溢出到负数便可以触发打败dragon</p><p>那么怎么利用？dragon被打败后会free掉，同时malloc一个同样大小的buf，而后面居然还调用free掉的dragon里的函数，这就是一个UAF，复写dragon中的func到system(“/bin/sh”)就OK了</p><h4 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h4><p>linux kernel pwn，实现了一个kernel module，而这个kernel module包含一个bug，任意地址写。</p><p>因为在kernel对任意地址写可以达到进行任意的系统调用，例如通过<code>commit_creds(prepare_kernel_cred(0))</code>进行提权。通过 cat /proc/kallsyms便可以查看两个系统调用的符号地址。</p><p>最后有一个需要绕过的点，kernel module实现的系统调用会对小写字符大写，而符号地址当中便包含一个0x6c，我用了别人wp的一个方法，向该地址前面的内存填充nop指令，然后跳转到0x60之前的地址，从而绕过该限制。另外也有师傅通过汇编实现了真正的全地址任意写，看了一下网上的wp，简直就是各显神通。</p><p>最后提权后直接cat /root/flag就OK了</p><h4 id="Crypto1"><a href="#Crypto1" class="headerlink" title="Crypto1"></a>Crypto1</h4><p>密码学题目，关于AES128CBC的使用漏洞，题目会给出由个人提供输入AES128_CBC加密结果，key、IV不知</p><p>因为在CBC模式下，16byte的分组有，当前n <em> 16 byte的信息前缀相同时，加密出来的前n </em> 16也是相等的</p><p>这个设计到分组密码与CBC模式的弱点</p><p>因此当有段不明信息<code>secretmessage</code>，可以通过比较</p><p>AES128Encode(<code>---------------s</code>)</p><p>AES128Encode(<code>---------------*</code>)</p><p>构造最后一位*，进行爆破比对，从而得出最终明文</p><h4 id="echo1"><a href="#echo1" class="headerlink" title="echo1"></a>echo1</h4><p>超大的栈溢出，什么保护都没有，直接往栈上写shellcode然后再通过bss作为跳板jmp rsp就可以getshell</p><p>要注意一点就是pwntools写shellcode时，<code>shellcraft.sh</code>是32位的<code>shellcraft.amd64.sh</code>是64位的</p><h4 id="echo2"><a href="#echo2" class="headerlink" title="echo2"></a>echo2</h4><p>shellcode不能用shellcraft的了，因为无论哪种利用方式，输入长度都限制在24以下，所以可以从exploitdb上找shellcode，用fsb泄漏出shellcode地址，然后通过uaf利用调用shellcode</p><p>这题实际也很简单，感觉自己花了很多时间是在找bug和复习fsb上了T_T</p><h4 id="rsa-calculator"><a href="#rsa-calculator" class="headerlink" title="rsa_calculator"></a>rsa_calculator</h4><p>需要比较耐心的逆向才能找到bug。。。<br>这题关键漏洞都在rsa_decrypt函数里，包含有fmtstr和stack overflow<br>程序只开了canary<br>所以，思路是通过fmtstr leak canary，然后通过stack overflow写ret<br>虽然binary提供了system函数，但是最简单还是直接用shellcode了<br>这题需要注意的点是decrypt的时候几个buffer 从hex to byte的操作<br>由于1024的buf overflow到了520的buf，520的buf再stack overflow<br>而520的buf是由1024的buf hex2byte生成的，所以overflow到520buf的部分需要进行两次encode(‘hex’)的操作，然后就可以构造溢出data了</p><h4 id="alloca"><a href="#alloca" class="headerlink" title="alloca"></a>alloca</h4><p>很容易发现size可以小于0，但是怎么利用呢？<br>一个思路，先寻找有哪些操作可以往栈上写<br>当发现只有g_canary可以时，去找写到栈上的地方与ebp-4的关系<br>能够列出公式，最后求解出size<br>最后通过env上填充callme的地址，跳转过去，多次启动一定几率下可以getshell</p><h2 id="Grotesque"><a href="#Grotesque" class="headerlink" title="Grotesque"></a>Grotesque</h2><h2 id="Hacker’s-Secret"><a href="#Hacker’s-Secret" class="headerlink" title="Hacker’s Secret"></a>Hacker’s Secret</h2>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwnable.kr </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog update!</title>
      <link href="2017/10/09/Blog-update/"/>
      <url>2017/10/09/Blog-update/</url>
      
        <content type="html"><![CDATA[<p> 终于颓颓颓颓了很长一段时间，开始修我的blog</p><p>这里说一下我blog的更新的地方吧</p><hr><p>博客依然由hexo+freemind主题建成</p><ol><li><p>图床修复：采用<code>hexo-asset-image</code>插件，图片直接同步到repo中，在pages上直接引用</p></li><li><p>留言系统修复：多说关闭了，只能换一个，disqus以前用过，但是登陆方式有限制，对国内用户不太友好，后来找到一个叫livere(来必力)的，看着还挺好用，就换成这个了。</p></li><li><p>从前博客挂在github pages上，用的<a href="http://gifish.tk">http://gifish.tk</a> 的域名。但由于github禁了百度的爬虫，导致百度会搜不到，现在同步挂到了github pages和coding.net pages上，让百度可以搜到博客的内容，不过试了下，似乎刚配置好百度的爬虫还没更新。然后更新域名为<a href="http://blog.2bsticker.cn">http://blog.2bsticker.cn</a> ，国外线路解析到github，国内线路解析到coding.net，试了试github page不能设置多个CNAME记录，于是吧gifish.tk url重定向到了github page上。</p><p>综上，目前你可以通过以下链接访问我的博客</p><ul><li><a href="http://gifish.tk">http://gifish.tk</a></li><li><a href="http://blog.2bsticker.cn">http://blog.2bsticker.cn</a></li><li><a href="http://giglf.github.io">http://giglf.github.io</a></li><li><a href="http://gifish.coding.me">http://gifish.coding.me</a></li></ul><p>以后想注册个个人长期使用的域名，日后再更新。</p></li><li><p>添加<code>hexo-wordcount</code>插件，修改侧边栏的样式，每篇文章可显示字数和预计阅读时间。</p></li><li><p>添加小蒜子阅读数量统计，显示于侧边栏。</p></li><li><p>添加rss订阅链接。</p></li><li><p>freemind的样式更改为readable-inverse</p></li><li><p>更新About Me面页</p></li><li><p>更新了freemind的字体包，添加了google analyse和baidu统计，这个主要用于自己查看数据用的。</p></li></ol><hr><p>依然存在问题</p><ol><li>hexo-math插件出问题，怎么配置都没成功，数学公式不能正常显示（还好博客还没有很多公式）</li><li>https配置未成功，配置自定义域名后，coding.net和github都要识别域名的所有权才能给站点开启https，其中coding.net用的是Let’s Encrpty的认证，尝试了很多种，尚未配置成功。</li></ol><hr><p>资料参考</p><p><a href="http://masikkk.com/tags/Hexo/">http://masikkk.com/tags/Hexo/</a></p><h6 id="有些文章感觉挺没意思的，不过写了就不删了，以后看心情再写些有意义点的文章23333"><a href="#有些文章感觉挺没意思的，不过写了就不删了，以后看心情再写些有意义点的文章23333" class="headerlink" title="有些文章感觉挺没意思的，不过写了就不删了，以后看心情再写些有意义点的文章23333"></a>有些文章感觉挺没意思的，不过写了就不删了，以后看心情再写些有意义点的文章23333</h6>]]></content>
      
      
      <categories>
          
          <category> 感想or发疯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随便写写啦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About recently</title>
      <link href="2017/09/04/About-recently/"/>
      <url>2017/09/04/About-recently/</url>
      
        <content type="html"><![CDATA[<p>仔细看一下，上一篇特么是4月份的事了，现在9月份，已近5个月没有更新过了</p><p>在这五个月中，本来有想过写东西的，但由于一直很烦（对，其实也不算太忙）</p><p>烦于找实习，实习失利又去考虑找读研导师，一直折腾来折腾去，各种破事。</p><hr><p>如果说大三上是因为各种课程各种实验堆积搞得自己很忙很烦，那么大三下就是各种破事堆积搞得自己很烦</p><p>每天都很烦！</p><p>还好，这段可怕的日子已经过去了，我也丝毫不留恋，如今仅仅会感叹一下时间过得真快，现在学校又都是军训的萌新，不止一次感叹年轻真好</p><p>在这五个月，有几次我都想更些blog，不过一直没写，没组织，现在考虑下是不是应该补上。</p><p>其中包括：</p><ol><li>DDCTF前几题的wp</li><li>一次pwnhub关于Android的逆向（没多大意思，有点不打算写了）</li><li>最近一次pwnhub关于pyc的逆向</li></ol><p>还有些想写的，但似乎忘了，果然应该及时写的= =</p><p>然后，最近想要从零开始写一个小型的操作系统内核，正在肝文档，抄代码，会及时记下这个过程的</p><hr><p>再就是，关于这个博客的修整</p><p>首先的问题是：</p><ol><li>以前的图床收费，图片全挂了，需要修复</li><li>留言挂了，等待修复</li><li>以前hexo的配置有问题，似乎ban了某些搜索引擎，待修复</li></ol><p>所以计划是：</p><ol><li>修复以前的图片</li><li>修复留言系统</li><li>站点重新配置，修改一下样式之类的</li><li>补一下文章。。。</li><li>考虑配置个https</li></ol><p>就酱</p><hr><p>但愿人生能往自己喜欢的方向发展，丰富多彩。</p><h6 id="但是没钱是个大问题"><a href="#但是没钱是个大问题" class="headerlink" title="但是没钱是个大问题"></a>但是没钱是个大问题</h6>]]></content>
      
      
      <categories>
          
          <category> 感想or发疯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随便写写啦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android签名原理介绍（2）--schemev2</title>
      <link href="2017/04/11/Android%E7%AD%BE%E5%90%8D%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%EF%BC%882%EF%BC%89-schemev2/"/>
      <url>2017/04/11/Android%E7%AD%BE%E5%90%8D%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%EF%BC%882%EF%BC%89-schemev2/</url>
      
        <content type="html"><![CDATA[<p>接上一篇，接下来介绍7.0后新增的v2签名认证方式</p><h2 id="APK-Signature-Scheme-v2"><a href="#APK-Signature-Scheme-v2" class="headerlink" title="APK Signature Scheme v2"></a>APK Signature Scheme v2</h2><p>与v1方式签名不同的是，v2的签名是对整个文件的一种签名方式</p><p>直接从字节码上对apk进行签名，不必遍历每个入口进行计算签名</p><p>并且每一个改动都会使得签名失败，因此其提高了签名认证的速度和签名保护的安全性</p><p>但是有一点得注意的是，v2签名仅用在7.0以上的系统中，因为只有7.0以上的系统有有关v2签名认证的代码</p><p>因此为了适配早前的系统，正常还是采用v1签名，或是v1v2签名并存</p><p>在后面的代码可以看出来，7.0以上的系统会先进行v2签名的认证，若没检测到v2签名信息，则再进行v1的方法</p><p>但是由于一些应用需要打包渠道包，每次修改再编译再签名实在太耗时，大部分会选择关闭v2签名</p><p>在build Gradle中添加</p><blockquote><p>v2SigningEnabled false</p></blockquote><p>因为在v1签名中，<code>META-INF</code>中的内容是不会检测的，这使得在打包渠道包时不需要重复重新签名</p><blockquote><p>渠道包指的是在各大应用市场，发布的apk包的清单文件中，某个meta-data标签下，配置的value不一样，这个标签的作用就是用来区分是哪个市场的</p></blockquote><span id="more"></span><p>下图是从google上扒来的图，更详细的介绍可以看google</p><blockquote><p><a href="https://source.android.com/security/apksigning/v2">https://source.android.com/security/apksigning/v2</a></p></blockquote><p><img src="https://source.android.com/security/images/apk-before-after-signing.png" alt="APK before and after signing"></p><p>与不签名相比，v2签名在ZIP Central Directory section之前插入了一段<code>signing block</code>，这就是所有签名的信息</p><p><img src="https://source.android.com/security/images/apk-validation-process.png" alt="APK signature verification process"></p><p>签名认证过程</p><hr><p>这里是Android7.1.1_r28下signApk工具中使用v2签名方式进行签名的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer[] sign(</span><br><span class="line">        ByteBuffer inputApk,</span><br><span class="line">        List&lt;SignerConfig&gt; signerConfigs)</span><br><span class="line">                <span class="keyword">throws</span> ApkParseException, InvalidKeyException, SignatureException &#123;</span><br><span class="line">    <span class="comment">// Slice/create a view in the inputApk to make sure that:</span></span><br><span class="line">    <span class="comment">// 1. inputApk is what&#x27;s between position and limit of the original inputApk, and</span></span><br><span class="line">    <span class="comment">// 2. changes to position, limit, and byte order are not reflected in the original.</span></span><br><span class="line">    ByteBuffer originalInputApk = inputApk;</span><br><span class="line">    inputApk = originalInputApk.slice();</span><br><span class="line">    inputApk.order(ByteOrder.LITTLE_ENDIAN);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Locate ZIP End of Central Directory (EoCD), Central Directory, and check that Central</span></span><br><span class="line">    <span class="comment">// Directory is immediately followed by the ZIP End of Central Directory.</span></span><br><span class="line">    <span class="keyword">int</span> eocdOffset = ZipUtils.findZipEndOfCentralDirectoryRecord(inputApk);</span><br><span class="line">    <span class="keyword">if</span> (eocdOffset == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApkParseException(<span class="string">&quot;Failed to locate ZIP End of Central Directory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ZipUtils.isZip64EndOfCentralDirectoryLocatorPresent(inputApk, eocdOffset)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApkParseException(<span class="string">&quot;ZIP64 format not supported&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    inputApk.position(eocdOffset);</span><br><span class="line">    <span class="keyword">long</span> centralDirSizeLong = ZipUtils.getZipEocdCentralDirectorySizeBytes(inputApk);</span><br><span class="line">    <span class="keyword">if</span> (centralDirSizeLong &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApkParseException(</span><br><span class="line">                <span class="string">&quot;ZIP Central Directory size out of range: &quot;</span> + centralDirSizeLong);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> centralDirSize = (<span class="keyword">int</span>) centralDirSizeLong;</span><br><span class="line">    <span class="keyword">long</span> centralDirOffsetLong = ZipUtils.getZipEocdCentralDirectoryOffset(inputApk);</span><br><span class="line">    <span class="keyword">if</span> (centralDirOffsetLong &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApkParseException(</span><br><span class="line">                <span class="string">&quot;ZIP Central Directory offset in file out of range: &quot;</span> + centralDirOffsetLong);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> centralDirOffset = (<span class="keyword">int</span>) centralDirOffsetLong;</span><br><span class="line">    <span class="keyword">int</span> expectedEocdOffset = centralDirOffset + centralDirSize;</span><br><span class="line">    <span class="keyword">if</span> (expectedEocdOffset &lt; centralDirOffset) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApkParseException(</span><br><span class="line">                <span class="string">&quot;ZIP Central Directory extent too large. Offset: &quot;</span> + centralDirOffset</span><br><span class="line">                        + <span class="string">&quot;, size: &quot;</span> + centralDirSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (eocdOffset != expectedEocdOffset) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApkParseException(</span><br><span class="line">                <span class="string">&quot;ZIP Central Directory not immeiately followed by ZIP End of&quot;</span></span><br><span class="line">                        + <span class="string">&quot; Central Directory. CD end: &quot;</span> + expectedEocdOffset</span><br><span class="line">                        + <span class="string">&quot;, EoCD start: &quot;</span> + eocdOffset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create ByteBuffers holding the contents of everything before ZIP Central Directory,</span></span><br><span class="line">    <span class="comment">// ZIP Central Directory, and ZIP End of Central Directory.</span></span><br><span class="line">    inputApk.clear();</span><br><span class="line">    ByteBuffer beforeCentralDir = getByteBuffer(inputApk, centralDirOffset);</span><br><span class="line">    ByteBuffer centralDir = getByteBuffer(inputApk, eocdOffset - centralDirOffset);</span><br><span class="line">    <span class="comment">// Create a copy of End of Central Directory because we&#x27;ll need modify its contents later.</span></span><br><span class="line">    <span class="keyword">byte</span>[] eocdBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[inputApk.remaining()];</span><br><span class="line">    inputApk.get(eocdBytes);</span><br><span class="line">    ByteBuffer eocd = ByteBuffer.wrap(eocdBytes);</span><br><span class="line">    eocd.order(inputApk.order());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Figure which which digests to use for APK contents.</span></span><br><span class="line">    Set&lt;Integer&gt; contentDigestAlgorithms = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SignerConfig signerConfig : signerConfigs) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> signatureAlgorithm : signerConfig.signatureAlgorithms) &#123;</span><br><span class="line">            contentDigestAlgorithms.add(</span><br><span class="line">                    getSignatureAlgorithmContentDigestAlgorithm(signatureAlgorithm));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute digests of APK contents.</span></span><br><span class="line">    Map&lt;Integer, <span class="keyword">byte</span>[]&gt; contentDigests; <span class="comment">// digest algorithm ID -&gt; digest</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        contentDigests =</span><br><span class="line">                computeContentDigests(</span><br><span class="line">                        contentDigestAlgorithms,</span><br><span class="line">                        <span class="keyword">new</span> ByteBuffer[] &#123;beforeCentralDir, centralDir, eocd&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (DigestException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SignatureException(<span class="string">&quot;Failed to compute digests of APK&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sign the digests and wrap the signatures and signer info into an APK Signing Block.</span></span><br><span class="line">    ByteBuffer apkSigningBlock =</span><br><span class="line">            ByteBuffer.wrap(generateApkSigningBlock(signerConfigs, contentDigests));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update Central Directory Offset in End of Central Directory Record. Central Directory</span></span><br><span class="line">    <span class="comment">// follows the APK Signing Block and thus is shifted by the size of the APK Signing Block.</span></span><br><span class="line">    centralDirOffset += apkSigningBlock.remaining();</span><br><span class="line">    eocd.clear();</span><br><span class="line">    ZipUtils.setZipEocdCentralDirectoryOffset(eocd, centralDirOffset);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Follow the Java NIO pattern for ByteBuffer whose contents have been consumed.</span></span><br><span class="line">    originalInputApk.position(originalInputApk.limit());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reset positions (to 0) and limits (to capacity) in the ByteBuffers below to follow the</span></span><br><span class="line">    <span class="comment">// Java NIO pattern for ByteBuffers which are ready for their contents to be read by caller.</span></span><br><span class="line">    <span class="comment">// Contrary to the name, this does not clear the contents of these ByteBuffer.</span></span><br><span class="line">    beforeCentralDir.clear();</span><br><span class="line">    centralDir.clear();</span><br><span class="line">    eocd.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Insert APK Signing Block immediately before the ZIP Central Directory.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ByteBuffer[] &#123;</span><br><span class="line">        beforeCentralDir,</span><br><span class="line">        apkSigningBlock,</span><br><span class="line">        centralDir,</span><br><span class="line">        eocd,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateApkSigningBlock(<span class="keyword">byte</span>[] apkSignatureSchemeV2Block) &#123;</span><br><span class="line">    <span class="comment">// FORMAT:</span></span><br><span class="line">    <span class="comment">// uint64:  size (excluding this field)</span></span><br><span class="line">    <span class="comment">// repeated ID-value pairs:</span></span><br><span class="line">    <span class="comment">//     uint64:           size (excluding this field)</span></span><br><span class="line">    <span class="comment">//     uint32:           ID</span></span><br><span class="line">    <span class="comment">//     (size - 4) bytes: value</span></span><br><span class="line">    <span class="comment">// uint64:  size (same as the one above)</span></span><br><span class="line">    <span class="comment">// uint128: magic</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> resultSize =</span><br><span class="line">            <span class="number">8</span> <span class="comment">// size</span></span><br><span class="line">            + <span class="number">8</span> + <span class="number">4</span> + apkSignatureSchemeV2Block.length <span class="comment">// v2Block as ID-value pair</span></span><br><span class="line">            + <span class="number">8</span> <span class="comment">// size</span></span><br><span class="line">            + <span class="number">16</span> <span class="comment">// magic</span></span><br><span class="line">            ;</span><br><span class="line">    ByteBuffer result = ByteBuffer.allocate(resultSize);</span><br><span class="line">    result.order(ByteOrder.LITTLE_ENDIAN);</span><br><span class="line">    <span class="keyword">long</span> blockSizeFieldValue = resultSize - <span class="number">8</span>;</span><br><span class="line">    result.putLong(blockSizeFieldValue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> pairSizeFieldValue = <span class="number">4</span> + apkSignatureSchemeV2Block.length;</span><br><span class="line">    result.putLong(pairSizeFieldValue);</span><br><span class="line">    result.putInt(APK_SIGNATURE_SCHEME_V2_BLOCK_ID);</span><br><span class="line">    result.put(apkSignatureSchemeV2Block);</span><br><span class="line"></span><br><span class="line">    result.putLong(blockSizeFieldValue);</span><br><span class="line">    result.put(APK_SIGNING_BLOCK_MAGIC);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.array();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateSignerBlock(</span><br><span class="line">        SignerConfig signerConfig,</span><br><span class="line">        Map&lt;Integer, <span class="keyword">byte</span>[]&gt; contentDigests) <span class="keyword">throws</span> InvalidKeyException, SignatureException &#123;</span><br><span class="line">    <span class="keyword">if</span> (signerConfig.certificates.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SignatureException(<span class="string">&quot;No certificates configured for signer&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    PublicKey publicKey = signerConfig.certificates.get(<span class="number">0</span>).getPublicKey();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] encodedPublicKey = encodePublicKey(publicKey);</span><br><span class="line"></span><br><span class="line">    V2SignatureSchemeBlock.SignedData signedData = <span class="keyword">new</span> V2SignatureSchemeBlock.SignedData();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        signedData.certificates = encodeCertificates(signerConfig.certificates);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CertificateEncodingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SignatureException(<span class="string">&quot;Failed to encode certificates&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Pair&lt;Integer, <span class="keyword">byte</span>[]&gt;&gt; digests =</span><br><span class="line">            <span class="keyword">new</span> ArrayList&lt;&gt;(signerConfig.signatureAlgorithms.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> signatureAlgorithm : signerConfig.signatureAlgorithms) &#123;</span><br><span class="line">        <span class="keyword">int</span> contentDigestAlgorithm =</span><br><span class="line">                getSignatureAlgorithmContentDigestAlgorithm(signatureAlgorithm);</span><br><span class="line">        <span class="keyword">byte</span>[] contentDigest = contentDigests.get(contentDigestAlgorithm);</span><br><span class="line">        <span class="keyword">if</span> (contentDigest == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    getContentDigestAlgorithmJcaDigestAlgorithm(contentDigestAlgorithm)</span><br><span class="line">                    + <span class="string">&quot; content digest for &quot;</span></span><br><span class="line">                    + getSignatureAlgorithmJcaSignatureAlgorithm(signatureAlgorithm)</span><br><span class="line">                    + <span class="string">&quot; not computed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        digests.add(Pair.create(signatureAlgorithm, contentDigest));</span><br><span class="line">    &#125;</span><br><span class="line">    signedData.digests = digests;</span><br><span class="line"></span><br><span class="line">    V2SignatureSchemeBlock.Signer signer = <span class="keyword">new</span> V2SignatureSchemeBlock.Signer();</span><br><span class="line">    <span class="comment">// FORMAT:</span></span><br><span class="line">    <span class="comment">// * length-prefixed sequence of length-prefixed digests:</span></span><br><span class="line">    <span class="comment">//   * uint32: signature algorithm ID</span></span><br><span class="line">    <span class="comment">//   * length-prefixed bytes: digest of contents</span></span><br><span class="line">    <span class="comment">// * length-prefixed sequence of certificates:</span></span><br><span class="line">    <span class="comment">//   * length-prefixed bytes: X.509 certificate (ASN.1 DER encoded).</span></span><br><span class="line">    <span class="comment">// * length-prefixed sequence of length-prefixed additional attributes:</span></span><br><span class="line">    <span class="comment">//   * uint32: ID</span></span><br><span class="line">    <span class="comment">//   * (length - 4) bytes: value</span></span><br><span class="line">    signer.signedData = encodeAsSequenceOfLengthPrefixedElements(<span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;</span><br><span class="line">        encodeAsSequenceOfLengthPrefixedPairsOfIntAndLengthPrefixedBytes(signedData.digests),</span><br><span class="line">        encodeAsSequenceOfLengthPrefixedElements(signedData.certificates),</span><br><span class="line">        <span class="comment">// additional attributes</span></span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>],</span><br><span class="line">    &#125;);</span><br><span class="line">    signer.publicKey = encodedPublicKey;</span><br><span class="line">    signer.signatures = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> signatureAlgorithm : signerConfig.signatureAlgorithms) &#123;</span><br><span class="line">        Pair&lt;String, ? extends AlgorithmParameterSpec&gt; signatureParams =</span><br><span class="line">                getSignatureAlgorithmJcaSignatureAlgorithm(signatureAlgorithm);</span><br><span class="line">        String jcaSignatureAlgorithm = signatureParams.getFirst();</span><br><span class="line">        AlgorithmParameterSpec jcaSignatureAlgorithmParams = signatureParams.getSecond();</span><br><span class="line">        <span class="keyword">byte</span>[] signatureBytes;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Signature signature = Signature.getInstance(jcaSignatureAlgorithm);</span><br><span class="line">            signature.initSign(signerConfig.privateKey);</span><br><span class="line">            <span class="keyword">if</span> (jcaSignatureAlgorithmParams != <span class="keyword">null</span>) &#123;</span><br><span class="line">                signature.setParameter(jcaSignatureAlgorithmParams);</span><br><span class="line">            &#125;</span><br><span class="line">            signature.update(signer.signedData);</span><br><span class="line">            signatureBytes = signature.sign();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidKeyException(<span class="string">&quot;Failed sign using &quot;</span> + jcaSignatureAlgorithm, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException | InvalidAlgorithmParameterException</span><br><span class="line">                | SignatureException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SignatureException(<span class="string">&quot;Failed sign using &quot;</span> + jcaSignatureAlgorithm, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Signature signature = Signature.getInstance(jcaSignatureAlgorithm);</span><br><span class="line">            signature.initVerify(publicKey);</span><br><span class="line">            <span class="keyword">if</span> (jcaSignatureAlgorithmParams != <span class="keyword">null</span>) &#123;</span><br><span class="line">                signature.setParameter(jcaSignatureAlgorithmParams);</span><br><span class="line">            &#125;</span><br><span class="line">            signature.update(signer.signedData);</span><br><span class="line">            <span class="keyword">if</span> (!signature.verify(signatureBytes)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SignatureException(<span class="string">&quot;Signature did not verify&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidKeyException(<span class="string">&quot;Failed to verify generated &quot;</span> + jcaSignatureAlgorithm</span><br><span class="line">                    + <span class="string">&quot; signature using public key from certificate&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException | InvalidAlgorithmParameterException</span><br><span class="line">                | SignatureException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SignatureException(<span class="string">&quot;Failed to verify generated &quot;</span> + jcaSignatureAlgorithm</span><br><span class="line">                    + <span class="string">&quot; signature using public key from certificate&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        signer.signatures.add(Pair.create(signatureAlgorithm, signatureBytes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FORMAT:</span></span><br><span class="line">    <span class="comment">// * length-prefixed signed data</span></span><br><span class="line">    <span class="comment">// * length-prefixed sequence of length-prefixed signatures:</span></span><br><span class="line">    <span class="comment">//   * uint32: signature algorithm ID</span></span><br><span class="line">    <span class="comment">//   * length-prefixed bytes: signature of signed data</span></span><br><span class="line">    <span class="comment">// * length-prefixed bytes: public key (X.509 SubjectPublicKeyInfo, ASN.1 DER encoded)</span></span><br><span class="line">    <span class="keyword">return</span> encodeAsSequenceOfLengthPrefixedElements(</span><br><span class="line">            <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;</span><br><span class="line">                signer.signedData,</span><br><span class="line">                encodeAsSequenceOfLengthPrefixedPairsOfIntAndLengthPrefixedBytes(</span><br><span class="line">                        signer.signatures),</span><br><span class="line">                signer.publicKey,</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里贴上关键的两个函数</p><p>通过分析可知，其签名过程分为以下几个步骤</p><ol><li>把apk看为zip，把zip的三个块划分开</li><li>分别对三个块从提前获取到的摘要算法(signerConfigs)进行hash处理，这部分就是用于签名的信息</li><li>通过私钥对从这三个块获得的签名数据进行加密，获得签名，并编码公钥，签名结果</li></ol><p>格式在注释中已说</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SIGNEDDATA FORMAT:</span></span><br><span class="line">        <span class="comment">// * length-prefixed sequence of length-prefixed digests:</span></span><br><span class="line">        <span class="comment">//   * uint32: signature algorithm ID</span></span><br><span class="line">        <span class="comment">//   * length-prefixed bytes: digest of contents</span></span><br><span class="line">        <span class="comment">// * length-prefixed sequence of certificates:</span></span><br><span class="line">        <span class="comment">//   * length-prefixed bytes: X.509 certificate (ASN.1 DER encoded).</span></span><br><span class="line">        <span class="comment">// * length-prefixed sequence of length-prefixed additional attributes:</span></span><br><span class="line">        <span class="comment">//   * uint32: ID</span></span><br><span class="line">        <span class="comment">//   * (length - 4) bytes: value</span></span><br><span class="line">        </span><br><span class="line"> <span class="comment">//BLOCK FORMAT:</span></span><br><span class="line">        <span class="comment">// * length-prefixed signed data</span></span><br><span class="line">        <span class="comment">// * length-prefixed sequence of length-prefixed signatures:</span></span><br><span class="line">        <span class="comment">//   * uint32: signature algorithm ID</span></span><br><span class="line">        <span class="comment">//   * length-prefixed bytes: signature of signed data</span></span><br><span class="line">        <span class="comment">// * length-prefixed bytes: public key (X.509 SubjectPublicKeyInfo, ASN.1 DER encoded)</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//SIGNED　BLOCK FORMAT:</span></span><br><span class="line">        <span class="comment">// uint64:  size (excluding this field)</span></span><br><span class="line">        <span class="comment">// repeated ID-value pairs:</span></span><br><span class="line">        <span class="comment">//     uint64:           size (excluding this field)</span></span><br><span class="line">        <span class="comment">//     uint32:           ID</span></span><br><span class="line">        <span class="comment">//     (size - 4) bytes: value</span></span><br><span class="line">        <span class="comment">// uint64:  size (same as the one above)</span></span><br><span class="line">        <span class="comment">// uint128: magic</span></span><br></pre></td></tr></table></figure><p><img src="https://source.android.com/security/images/apk-integrity-protection.png" alt="APK digest"></p><p>对于验证过程</p><blockquote><h3 id="APK-Signature-Scheme-v2-verification"><a href="#APK-Signature-Scheme-v2-verification" class="headerlink" title="APK Signature Scheme v2 verification"></a>APK Signature Scheme v2 verification</h3><ol><li>Locate the APK Signing Block and verify that:<ol><li>Two size fields of APK Signing Block contain the same value.</li><li>ZIP Central Directory is immediately followed by ZIP End of Central Directory record.</li><li>ZIP End of Central Directory is not followed by more data.</li></ol></li><li>Locate the first APK Signature Scheme v2 Block inside the APK Signing Block. If the v2 Block if present, proceed to step 3. Otherwise, fall back to verifying the APK <a href="https://source.android.com/security/apksigning/v2#v1-verification">using v1 scheme</a>.</li><li>For each <code>signer</code> in the APK Signature Scheme v2 Block:Choose the strongest supported <code>signature algorithm ID</code> from <code>signatures</code>. The strength ordering is up to each implementation/platform version.Verify the corresponding <code>signature</code> from <code>signatures</code> against <code>signed data</code> using <code>public key</code>. (It is now safe to parse <code>signed data</code>.)Verify that the ordered list of signature algorithm IDs in <code>digests</code> and <code>signatures</code> is identical. (This is to prevent signature stripping/addition.)<a href="https://source.android.com/security/apksigning/v2#integrity-protected-contents">Compute the digest of APK contents</a> using the same digest algorithm as the digest algorithm used by the signature algorithm.Verify that the computed digest is identical to the corresponding <code>digest</code> from <code>digests</code>.Verify that SubjectPublicKeyInfo of the first <code>certificate</code> of <code>certificates</code> is identical to <code>public key</code>.</li><li>Verification succeeds if at least one <code>signer</code> was found and step 3 succeeded for each found <code>signer</code>.</li></ol></blockquote><p>即</p><ol><li>定位到signing block</li><li>获取签名证书的段，读取公钥，解密签名数据</li><li>获取摘要算法，对另外三个块进行hash，并与解密出来的数据对比</li></ol><p>对于有多个不同签名的apk，将会拥有多个signing block</p><p>以下即是其中一个apk的v2签名块</p><p><img src="/2017/04/11/Android%E7%AD%BE%E5%90%8D%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%EF%BC%882%EF%BC%89-schemev2/Android签名原理介绍（2）-schemev2/startOfSignBlock_zpsaxlxuhct.jpg" alt="startOfSignBlock"></p><p><img src="/2017/04/11/Android%E7%AD%BE%E5%90%8D%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%EF%BC%882%EF%BC%89-schemev2/Android签名原理介绍（2）-schemev2/endOfSignBlock_zpsaffeizzi.jpg" alt="endOfSignBlock"></p><p>中间还有很多的信息省略了</p><p>这里可以看到在签名块结尾的magic number</p><p><code>APK Sig Block 42</code></p><hr><p>对于v2签名介绍已完毕，下一篇将会简单地对比两种签名方式 (好像该对比的都对比得差不多了23333)</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 签名认证 </tag>
            
            <tag> scheme v2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android签名原理介绍（1）--schemev1</title>
      <link href="2017/04/07/Android%E7%AD%BE%E5%90%8D%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%EF%BC%881%EF%BC%89--schemev1/"/>
      <url>2017/04/07/Android%E7%AD%BE%E5%90%8D%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%EF%BC%881%EF%BC%89--schemev1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为某些不知名的原因，让我感觉很有必要学习一下apk签名的方式，于是。。。便有了这篇</p><p>（真的好久没写了哇，近期烦心事真的太多了）</p><p>我在网上搜了各种大大小小关于apk签名的文章，但始终没有能让我满意的，而且也感觉一直缺乏一篇能从字节上分析对比新旧两种签名方式的文章，so……</p><p>传统的安卓签名方式是通过jar的签名方式实现的，在apk包下，会有一个<code>META-INF</code>的文件夹，META-INF的文件夹下，会有<code>MANIFEST.MF</code> <code>CERT.SF</code> <code>CERT.RSA</code>三个文件，均是用于apk签名认证的。</p><p>而在Android7.0后，新增了一个APK Signature Scheme v2的签名方式，更为强效。而原来的签名方式则是 JAR-signed APK verification (v1 scheme)</p><p>详细可看官方的文档 </p><blockquote><p><a href="https://source.android.com/security/apksigning/v2#v1-verification">https://source.android.com/security/apksigning/v2#v1-verification</a></p></blockquote><span id="more"></span><h2 id="JAR-signed-APK-verification-v1-scheme"><a href="#JAR-signed-APK-verification-v1-scheme" class="headerlink" title="JAR-signed APK verification (v1 scheme)"></a>JAR-signed APK verification (v1 scheme)</h2><p>分析一下原版的签名方式</p><p>├─META-INF<br>│      CERT.RSA<br>│      CERT.SF<br>│      MANIFEST.MF</p><p><code>MANIFEST.MF</code>：储存了apk底下除了META-INF文件夹外其余文件的SHA1后对应的base64的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Built-By: Generated-by-ADT</span><br><span class="line">Created-By: Android Gradle 2.3.0</span><br><span class="line"></span><br><span class="line">Name: res&#x2F;anim&#x2F;design_snackbar_in.xml</span><br><span class="line">SHA1-Digest: QPiYcwJRp7LvVEneHabhK9QbisA&#x3D;</span><br><span class="line"></span><br><span class="line">Name: res&#x2F;layout&#x2F;design_text_input_password_icon.xml</span><br><span class="line">SHA1-Digest: jJEvq6P1Soe1bsUay8j+cdxWKGk&#x3D;</span><br><span class="line"></span><br><span class="line">Name: res&#x2F;drawable-hdpi-v4&#x2F;abc_list_longpressed_holo.9.png</span><br><span class="line">SHA1-Digest: KQunCQh0E4bP0utgN0cHdQr9OwA&#x3D;</span><br><span class="line"></span><br><span class="line">Name: res&#x2F;drawable-xxhdpi-v4&#x2F;abc_ic_star_half_black_16dp.png</span><br><span class="line">SHA1-Digest: EikVyBT5I7pmbJO2k8qF0V5hUc0&#x3D;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>CERT.SF</code>：在MAINFEST.MF文件的基础上，增加了对MANIFEST.MF的SHA1的值，并在base64编码后放到开头。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Signature-Version: 1.0</span><br><span class="line">SHA1-Digest-Manifest: rYILhq+GQ4rnRO9NeNUFTLzDiFs&#x3D;</span><br><span class="line">Created-By: 1.0 (Android)</span><br><span class="line"></span><br><span class="line">Name: res&#x2F;anim&#x2F;design_snackbar_in.xml</span><br><span class="line">SHA1-Digest: QPiYcwJRp7LvVEneHabhK9QbisA&#x3D;</span><br><span class="line"></span><br><span class="line">Name: res&#x2F;layout&#x2F;design_text_input_password_icon.xml</span><br><span class="line">SHA1-Digest: jJEvq6P1Soe1bsUay8j+cdxWKGk&#x3D;</span><br><span class="line"></span><br><span class="line">Name: res&#x2F;drawable-hdpi-v4&#x2F;abc_list_longpressed_holo.9.png</span><br><span class="line">SHA1-Digest: KQunCQh0E4bP0utgN0cHdQr9OwA&#x3D;</span><br><span class="line"></span><br><span class="line">Name: res&#x2F;drawable-xxhdpi-v4&#x2F;abc_ic_star_half_black_16dp.png</span><br><span class="line">SHA1-Digest: EikVyBT5I7pmbJO2k8qF0V5hUc0&#x3D;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>CERT.RSA</code>：这个则是RSA证书文件了，文本文件打开肯定是乱码，我们可以通过openssl查看其信息。</p><p>应该算挺标准的X509格式的证书吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">$ openssl pkcs7 -inform DER -in CERT.RSA -noout -print_certs -text</span><br><span class="line">Certificate:</span><br><span class="line">    Data:</span><br><span class="line">        Version: 3 (0x2)</span><br><span class="line">        Serial Number: 2064162882 (0x7b08a042)</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">        Issuer: OU&#x3D;gifish, CN&#x3D;lin.giglf</span><br><span class="line">        Validity</span><br><span class="line">            Not Before: Feb 28 14:20:15 2017 GMT</span><br><span class="line">            Not After : Feb 22 14:20:15 2042 GMT</span><br><span class="line">        Subject: OU&#x3D;gifish, CN&#x3D;lin.giglf</span><br><span class="line">        Subject Public Key Info:</span><br><span class="line">            Public Key Algorithm: rsaEncryption</span><br><span class="line">                Public-Key: (2048 bit)</span><br><span class="line">                Modulus:</span><br><span class="line">                    00:af:8a:df:e1:7f:70:b4:97:85:71:1b:ca:b8:9e:</span><br><span class="line">                    48:80:7a:4e:10:5a:a7:d7:aa:85:3a:7c:0a:99:42:</span><br><span class="line">                    ec:db:01:d7:28:ad:69:72:04:e6:9e:f3:0a:56:30:</span><br><span class="line">                    f1:d8:1e:8b:bd:d9:94:2e:ac:b0:64:83:71:89:24:</span><br><span class="line">                    e4:8e:63:f1:24:7f:73:d7:e4:48:d6:82:11:f6:9c:</span><br><span class="line">                    1f:de:4a:22:52:f1:b3:7b:0b:7a:01:09:fc:8e:36:</span><br><span class="line">                    85:2c:79:b3:25:60:93:aa:61:d2:d4:7c:e1:ab:70:</span><br><span class="line">                    40:5b:bb:cd:30:9a:cd:40:89:df:8d:73:25:87:ce:</span><br><span class="line">                    49:1e:63:42:47:d7:f4:66:40:56:db:67:6b:89:b2:</span><br><span class="line">                    4f:8e:9f:4a:f3:04:f4:40:58:02:83:c0:81:0b:5e:</span><br><span class="line">                    79:e6:d3:7f:3b:32:22:47:ed:f2:42:1f:7c:94:41:</span><br><span class="line">                    b1:d2:4b:f7:df:d0:61:68:1f:74:60:07:56:05:e4:</span><br><span class="line">                    44:27:5d:15:24:66:02:3e:51:06:7b:13:9c:f1:31:</span><br><span class="line">                    f3:15:39:6f:de:22:27:44:f9:3a:42:59:c8:20:f4:</span><br><span class="line">                    41:5a:4e:36:b0:8e:25:eb:a4:a8:72:01:e6:81:56:</span><br><span class="line">                    86:67:01:e5:bd:43:28:99:14:57:90:ff:b3:e9:f5:</span><br><span class="line">                    c6:85:d7:36:cb:05:c0:31:c6:b0:f5:b9:ec:54:ae:</span><br><span class="line">                    83:85</span><br><span class="line">                Exponent: 65537 (0x10001)</span><br><span class="line">        X509v3 extensions:</span><br><span class="line">            X509v3 Subject Key Identifier:</span><br><span class="line">                30:06:A9:7C:68:78:A4:7A:50:52:4F:B6:75:DE:5D:88:86:AD:DD:4F</span><br><span class="line">    Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">         26:2b:cf:a3:fa:4d:81:c5:a7:37:6f:4a:95:2c:ba:f4:73:cc:</span><br><span class="line">         57:69:8c:0e:4e:07:ad:6a:df:9e:ad:c1:62:68:82:c9:89:35:</span><br><span class="line">         9f:17:32:4c:98:a3:f5:45:fb:54:75:8e:ea:74:5f:ad:b4:56:</span><br><span class="line">         c6:4c:c1:e9:f0:c5:0d:12:37:b1:83:35:16:af:de:43:e7:1b:</span><br><span class="line">         58:26:eb:86:c5:3c:da:88:6a:28:fa:65:cf:49:c6:ff:84:d7:</span><br><span class="line">         dd:1e:ad:3f:01:a0:4e:ae:52:a4:98:8f:4f:94:84:04:5f:93:</span><br><span class="line">         43:01:39:80:69:02:46:ac:bc:b4:12:f9:b2:fd:4b:ed:50:71:</span><br><span class="line">         cc:6d:1f:5f:5e:5d:e0:67:a2:a3:65:af:bf:e0:bd:26:8e:51:</span><br><span class="line">         56:d1:76:6a:e7:56:90:4e:aa:57:90:60:d0:47:38:3f:2f:9c:</span><br><span class="line">         38:01:e0:2d:4a:6c:9e:e5:5a:e5:33:fe:a6:46:f2:a9:03:ed:</span><br><span class="line">         28:2e:7a:de:e3:a8:33:3f:1c:3d:ca:eb:dd:7d:28:82:6f:2a:</span><br><span class="line">         b1:09:37:7f:b8:2c:59:75:e0:0c:2b:5f:87:9a:24:f3:2b:88:</span><br><span class="line">         5e:bb:71:60:51:d2:a4:68:c2:8f:ba:8e:46:3d:14:d9:21:13:</span><br><span class="line">         68:23:c0:f2:05:3a:21:5e:10:20:05:59:f9:06:33:9c:c4:7d:</span><br><span class="line">         95:91:ce:43</span><br></pre></td></tr></table></figure><hr><p>接着就结合源码看一看</p><p>因为网上有关这部分的已经很多了，这里贴一个链接，我就不自己贴代码了</p><blockquote><p><a href="http://www.2cto.com/kf/201601/456020.html">http://www.2cto.com/kf/201601/456020.html</a></p></blockquote><p>大致说一下其中的主要流程</p><ol><li>apk包安装，解压得到<code>META-INF</code>下的文件</li><li>计算apk内所有文件的hash+base64的值，与<code>MANIFEST.MF</code>的内容进行比较，查看是否一致</li><li>使用<code>CERT.RSA</code>证书文件(可以是<code>.DSA .RSA .EC</code>)校验签名文件<code>CERT.SF</code>文件，两个文件名称必须相同</li><li>验证通过后，再用<code>CERT.SF</code>文件与<code>MANIFEST.MF</code>文件对比，确认没被篡改。</li></ol><p>这部分就这样被我咸鱼地搞了一天，说几点要点。</p><ul><li><p>刚开始我是结合android 7.1.1的源码看的，结果源码太多，里面各种自定义的类，看着没什么耐心，而且因为是7.0以上的源码，当中还结合了v2签名的代码，看着很复杂（主要是今天太懒没耐心）。后来就看<code>SignApk</code>这个工具的代码去了，路径是<code>build/tools/signapk/src/com/android/signapk/SignApk.java</code> 由于是一个签名工具，关键代码比较集中，比较容易理解。</p></li><li><p>刚开始的时候比较困惑，说的是用<code>CERT.RSA</code>校验签名文件<code>CERT.SF</code>，但是我在对比过<code>MANIFEST.MF</code>和<code>CERT.SF</code>后发现，这两个文件除了开头部分，后面是完全一样的，那么所谓的签名文件是什么意思？</p><p>看过SignApk的代码后，我明白了。（因为代码网上都能找到讲解，我就直接说思路了）</p><p>通过工具签名，其流程是这样的</p><ol><li>得到签名的信息，公钥、私钥等（可能包含多个签名）</li><li>通过jar(zip/apk)的入口点（即包内的各个文件）计算出hash+base64的值，hash用的sha1还是sha256取决于安卓sdk的最低版本，结果存到<code>MANIFEST.MF</code>里</li><li>取出一对公钥私钥</li><li>对<code>MANIFEST.MF</code>计算hash+base64，把<code>MANIFEST.MF</code>剩余部分复制过去，得到<code>CERT.SF</code>，这就是为何后面是完全一样的了。</li><li>调用<code>writeSignatureBlock()</code>方法，用私钥对<code>CERT.SF</code>当中生成的hash+base64进行加密，生成的密文放到证书最后生成<code>CERT.RSA</code>。</li><li>如果还有别的签名重复3-5步。</li></ol><p>我对两个不同的apk进行了签名，对比CERT.RSA文件可以看到就最后存在差异</p><p><img src="/2017/04/07/Android%E7%AD%BE%E5%90%8D%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%EF%BC%881%EF%BC%89--schemev1/Android签名原理介绍（1）--schemev1/diff_zpsmiw3qcya.jpg" alt="diff"></p><p>通过openssl输出的证书信息都是一样的。</p><p>由此便可推出Android在验证apk签名信息时做的步骤。</p><p>接下来下一篇介绍新一代的签名方式</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 签名认证 </tag>
            
            <tag> scheme v1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NGfish_mini-lctf_writeup</title>
      <link href="2017/02/21/NGfish_mini-lctf_writeup/"/>
      <url>2017/02/21/NGfish_mini-lctf_writeup/</url>
      
        <content type="html"><![CDATA[<p>WriteUp比赛完就写了= =结果我拖到现在才整理发上来<br>mini-lctf是校内入门赛啊……<br>真正的dalao们都出题去了，没有参加，于是给我单挑打了个第五出来<br>然而因为没有新生在队内所以不给我奖品咯[掀桌!]<br>好歹我还ak了re和mobile！(虽然都是入门级的)<br>好咯，不管你，post一下题目的打包<br>链接: <a href="https://pan.baidu.com/s/1pKXa2rp">https://pan.baidu.com/s/1pKXa2rp</a> 密码: gnbq</p><span id="more"></span><h2 id="Web-50-苏打学姐撞上碳酸钠了"><a href="#Web-50-苏打学姐撞上碳酸钠了" class="headerlink" title="Web 50 (苏打学姐撞上碳酸钠了)"></a>Web 50 (苏打学姐撞上碳酸钠了)</h2><p>能看到源码为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sha1 conllision, Can you <span class="keyword">do</span> it&lt;!-- </span><br><span class="line"><span class="variable">$key</span> = <span class="string">&quot;aa3OFF9m&quot;</span>;</span><br><span class="line"><span class="variable">$pass</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>] : <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$pass</span> != <span class="variable">$key</span> &amp;&amp; sha1(<span class="variable">$pass</span>)==sha1(<span class="variable">$key</span>) ) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;sha1 conllision&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125; --&gt;</span><br></pre></td></tr></table></figure><p>获得pass，与key=”aa30FF9m”的sha1值比较</p><p>第一个想到的是sha1碰撞，试了下显然没什么效果，50分不应该很难</p><p>后来谷狗搜了下key的sha1值，发现了这个神奇的github</p><p><a href="https://github.com/spaze/hashes">https://github.com/spaze/hashes</a></p><p>这个是php的问题了额</p><p>挑了个输入，得到flag</p><p><code>LCTF&#123;conllision_is_so_difficult&#125;</code></p><p>然后web就基本都不会做了= =</p><h2 id="Misc-20-回转十三位"><a href="#Misc-20-回转十三位" class="headerlink" title="Misc 20 (回转十三位)"></a>Misc 20 (回转十三位)</h2><p>后面接着4个等号，base32编码，加上回转13位，想到ROT13，得到flag</p><h2 id="Misc20-Easy"><a href="#Misc20-Easy" class="headerlink" title="Misc20 (Easy)"></a>Misc20 (Easy)</h2><p>密文是<code>LbbeCaarT3r&#125;Fer&#123;_i</code></p><p>典型栅栏密码</p><h2 id="Misc60-Document"><a href="#Misc60-Document" class="headerlink" title="Misc60 (Document)"></a>Misc60 (Document)</h2><p>解压出来后用binwalk跑了下，发现了一堆隐藏的文件</p><p>直接后缀名改成.zip，是个压缩包</p><p>直接就在子文件夹中找到flag了</p><h2 id="Misc100-Noisy"><a href="#Misc100-Noisy" class="headerlink" title="Misc100 (Noisy)"></a>Misc100 (Noisy)</h2><p>下载文件名是wav，音频文件嘛……后缀名改成.wmv，听一下是一段噪音</p><p>下了个Audacity分析，瞎搞一下</p><p>发现转成频谱图的时候</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zpsrxova7qk.jpg" alt="捕获"></p><p>噢草，厉害了！</p><h2 id="Misc150-Sword-Art-Online"><a href="#Misc150-Sword-Art-Online" class="headerlink" title="Misc150 (Sword Art Online)"></a>Misc150 (Sword Art Online)</h2><p>一个txt文件，打开发现全是<code>255, 255, 255</code></p><p>然后中间还夹杂着一些别的数据</p><p>第一反应就是RGB数据咯，统计了下共1080*1080组数据</p><p>写了个脚本复原一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">width = <span class="number">1080</span></span><br><span class="line">height = <span class="number">1080</span></span><br><span class="line"></span><br><span class="line">image = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height))</span><br><span class="line"></span><br><span class="line">colorfd = <span class="built_in">open</span>(<span class="string">&#x27;wtf.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">draw = ImageDraw.Draw(image)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">s = colorfd.readline()</span><br><span class="line"><span class="keyword">if</span> x%<span class="number">4</span>==<span class="number">1</span>:</span><br><span class="line">y1 = (y+<span class="number">270</span>)%<span class="number">1080</span></span><br><span class="line"><span class="keyword">elif</span> x%<span class="number">4</span>==<span class="number">2</span>:</span><br><span class="line">y1 = (y+<span class="number">540</span>)%<span class="number">1080</span></span><br><span class="line"><span class="keyword">elif</span> x%<span class="number">4</span>==<span class="number">3</span>:</span><br><span class="line">y1 = (y+<span class="number">810</span>)%<span class="number">1080</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">y1 = y</span><br><span class="line">num = s.split(<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line">draw.point((x,y1), fill=(<span class="built_in">int</span>(num[<span class="number">0</span>]), <span class="built_in">int</span>(num[<span class="number">1</span>]), <span class="built_in">int</span>(num[<span class="number">2</span>])))</span><br><span class="line"></span><br><span class="line">image.save(<span class="string">&#x27;fix.jpg&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>)</span><br></pre></td></tr></table></figure><p>当中一些点的排序有问题，导致图分成了四个部分= = (事实上是我错估了分辨率)</p><p>随意魔改了下脚本，虽然还是有问题，但是已经勉强能看出flag了2333333</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/fix_zpswpeyzcbx.jpg" alt="fix"></p><p><code>LCTF&#123;C0ngratulation_y0u_g0t_1t&#125;</code></p><p>Misc玩完了……时间不够不想继续尝试了T_T</p><h2 id="Pwn20"><a href="#Pwn20" class="headerlink" title="Pwn20"></a>Pwn20</h2><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zpsa3cnlzby.jpg" alt="捕获"></p><p>这个，gdb调试能发现，写v2时直接溢出就能覆盖到v3，v3只要为非0就是true了</p><p>直接输入长点瞎搞一下就出来了……</p><h2 id="Pwn80"><a href="#Pwn80" class="headerlink" title="Pwn80"></a>Pwn80</h2><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zpsoqqw4x9u.jpg" alt="捕获"></p><p>同样，输入能覆盖到v2、v3，0x63 0x65这些还都是正常的字符， 不需要用python构造输入</p><p>gdb调试时确定下相关位置就稳了</p><p>pwn基本没怎么接触过，shellcode还不会写T_T</p><p>狗带吧！</p><h2 id="Mobile20-Log"><a href="#Mobile20-Log" class="headerlink" title="Mobile20 (Log)"></a>Mobile20 (Log)</h2><p>题目都说着Log了……</p><p>然后我直接反编译看了下代码</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zpsdabqrlyk.jpg" alt="1"></p><p>log的数据写到了jni里，这么正常思维就是连上真机/虚拟机调试DDMS看log出来的flag</p><p>然后咸鱼如我直接ida了一下lib包……(才20分怎么可能写得很复杂嘛！)</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/2_zpswhckumuz.jpg" alt="2"></p><p>然后就出来了呗</p><h2 id="Mobile50-Base"><a href="#Mobile50-Base" class="headerlink" title="Mobile50 (Base)"></a>Mobile50 (Base)</h2><p>说实话这题我不知道考点在哪……代码混淆吗……</p><p>毕竟也就50分</p><p>就是这段代码</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zpseqny3qrf.jpg" alt="1"></p><p>检测是否调试器链接，然后toast输出flag</p><p>懵逼了很久……后来我甚至发现了那算法就是base32阿噗</p><p>流程就是把写死在程序里的key base32变换一下输出，key转换一下顺序再base32 一下输出</p><p>结果就是直接装上真机，按一下按钮flag就出来了……</p><h2 id="Mobile100-Smali"><a href="#Mobile100-Smali" class="headerlink" title="Mobile100 (Smali)"></a>Mobile100 (Smali)</h2><p>下载下来就是一个Smali代码</p><p>而且是经过一定的处理，不能用Smali2Java之类的工具转换成java代码</p><p>那么就直接阅读吧（真棒！！！刚好给我练一下阅读smali代码！）</p><p>smali代码指令可以到这查询</p><p><a href="http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html">http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html</a></p><p>很关键的几个字符串<code>AES/ECB/PKCS5Padding</code> <code>MD5</code></p><p>最终结果是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00000080  const-string        v6, &quot;falg&quot;</span><br><span class="line">00000084  invoke-static       Log-&gt;d(String, String)I, v6, v4</span><br></pre></td></tr></table></figure><p>Log输出flag（唔，为什么是falg）</p><p>代码不长，大致流程就是</p><p>字符串<code>this_is_your_key</code> ，传进Encrypt.handle()函数</p><p>用这返回结果作为AES加密的秘钥，</p><p>再用这返回结果调用AESEncrypt.Encryption()函数</p><p>最后加密结果把byte转回为16进制String输出</p><p>分析一下handle函数，其实就是把奇数位和偶数位的字符交换一下</p><p>由此复原函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Learn</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">handle</span><span class="params">(String key)</span> <span class="keyword">throws</span> UnsupportedEncodingException</span>&#123;</span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;key.length();i+=<span class="number">2</span>)&#123;</span><br><span class="line">stringBuilder.append(key.charAt(i+<span class="number">1</span>));</span><br><span class="line">stringBuilder.append(key.charAt(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String key = <span class="string">&quot;this_is_your_key&quot;</span>;</span><br><span class="line">String keyChange = handle(key);</span><br><span class="line">System.out.println(keyChange);</span><br><span class="line">CryptoTools cipher = <span class="keyword">new</span> CryptoTools(keyChange.getBytes());</span><br><span class="line"><span class="keyword">byte</span>[] result = cipher.aesEncryptData(keyChange.getBytes());</span><br><span class="line">System.out.println(CryptoTools.byte2HexString(result));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中CryptoTools是自己写好的相应的AES加密的类</p><p>跑一下出结果</p><p><code>184b4e1bc353510f7841bb126d94259449055ef296e3b665dac507032e4c01e1</code></p><p>值得一提的是，在初始化秘钥的函数有点混淆的地方</p><p>就是当传入秘钥参数为空时会把空字符串求MD5作为秘钥，这是库中的一点处理，正常是空字符串求不了的吧……</p><p>刚开始还在这卡了点时间，怎么能如此的不熟练</p><p>然后就是眼瞎把最后加密用的字符串或秘钥各种看错，把key换成keyChange、keyChange换成key啥的阿噗，ctf真是个考验眼睛的比赛</p><p>估计是考虑到科普向，mobile的题就这三题（这才是我主场啊喂）</p><p>不过，我也蜜汁ak了re红红火火恍恍惚惚</p><h2 id="Re60"><a href="#Re60" class="headerlink" title="Re60"></a>Re60</h2><p>跑一下程序运行时让输入flag，正确就会输出对应的flag</p><p>直接拖到ida用f5神器看一下</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zps10cjd4ei.jpg" alt="1"></p><p>calLenEqual32，函数名说得挺清楚的</p><p>然后进到里面也是一个很简单的判断，输入长度为32即返回5</p><p>其中sub_3c4d函数就是很简单的一个strcmp函数，相等即返回5，输出flag</p><p>所以关键就是在sub_3c4c函数中</p><p>分析可知第一个参数是输入的字符串，第二个参数是内存中一段数据，第三个是结果</p><p>进到该函数看</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/2_zpsqvhs25em.jpg" alt="2"></p><p>在OD中调试能看到strupr是把字符串都转换为大写的函数</p><p>iHenStrlenLow是数据字符串的长度，Gap那个很复杂，但input和bc2e（自己改的名）长度应该是相同的，所以都不用管。</p><p>关键就是中间一段循环，调用的两个函数</p><p>两个函数也很简单，判断输入大小跟64和9的关系，把输入的字符-55、-48或+55、+48</p><p>我一开始写解密函数时还想着改写下这两个函数，仔细一看55+9=64，这两个函数时互补的</p><p>在OD调试中看到硬编码的字符串，长度32，直接写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> str[] = <span class="string">&quot;bc2e0d7f253d7fff9f9d56053d051f0b&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> in)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> in&lt;=<span class="number">64</span>? in<span class="number">-48</span> : in<span class="number">-55</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">fun2</span><span class="params">(<span class="keyword">char</span> in)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> in&lt;=<span class="number">9</span>? in+<span class="number">48</span> : in+<span class="number">55</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toUpper</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">str[i] = <span class="built_in">toupper</span>(str[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char rel[] = &quot;17500E5A4DCC77B3475ADD736DAB2FB4&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> result2[<span class="number">32</span>];</span><br><span class="line"><span class="comment">//char result[32];</span></span><br><span class="line"><span class="comment">//char input[] = &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;;</span></span><br><span class="line"><span class="built_in">toUpper</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line"><span class="keyword">char</span> tmp;</span><br><span class="line">rel[i] = <span class="built_in">fun</span>(rel[i]);</span><br><span class="line">tmp = rel[i] ^ <span class="built_in">fun</span>(str[i]);</span><br><span class="line">result2[i] = <span class="built_in">fun2</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for(int i=0;i&lt;32;i++)&#123;</span></span><br><span class="line"><span class="comment">// char tmp = fun(input[i]);</span></span><br><span class="line"><span class="comment">// result[i] = tmp ^ fun(str[i]);</span></span><br><span class="line"><span class="comment">// result[i] = fun2(result[i]);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">cout&lt;&lt;result2[i];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//input: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span></span><br><span class="line"><span class="comment">//result:17500E5A4DCC77B3475ADD736DAB2FB4</span></span><br></pre></td></tr></table></figure><p>跑出来flag是<code>AB7E032568F1084CD8C78B7650AE30BF</code></p><h2 id="Re100-Easy-GUI"><a href="#Re100-Easy-GUI" class="headerlink" title="Re100 (Easy GUI)"></a>Re100 (Easy GUI)</h2><p>windows下的gui逆向，输入正确的password</p><p>一般来说有两种定位的思路，一是查找相应的字符串，二是在GetDlgItem这类获取控制句柄的winapi中下断点</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zps6fvp52ls.jpg" alt="1"></p><p>这里字符串一下子看不到有用的信息，于是在GetDlgItem下断点，OD跑出来</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/2_zpsw8zjzje5.jpg" alt="2"></p><p>然后就可以定位到关键函数了，这里发挥自己的想象瞎搞一波</p><p>可以直接到ida相关地方f5</p><p>也可以直接OD动态调试看寄存器</p><p>像这样，稍微阅读汇编发现password长度为13</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/3_zpsfzvmyesh.jpg" alt="3"></p><p>cmp地方下个断点，反复跑13次程序，就能骗出flag了，这样解密程序都不用写233333</p><p>flag: <code>w1napi_1s_old</code></p><h2 id="Re150-Easy-Linux"><a href="#Re150-Easy-Linux" class="headerlink" title="Re150 (Easy Linux)"></a>Re150 (Easy Linux)</h2><p>拖到linux中跑来看看</p><p>结果发现data.dat文件不一起放过去的话是跑不动的</p><p>所以可以猜想一部分代码在data.dat中</p><p>然后拖进ida就发现了checkpassword函数</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/2_zpsdvysqafc.jpg" alt="2"></p><p>非常简单的逻辑，跳转到secret的地方，获得13位数据</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/3_zpsxbnt8hs5.jpg" alt="3"></p><p>写个程序跑一下就出来了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> str[] = &#123;<span class="number">0xFF</span>,<span class="number">0xA0</span>,<span class="number">0xAF</span>,<span class="number">0xFC</span>,<span class="number">0xA1</span>,<span class="number">0xA9</span>,<span class="number">0xFE</span>,<span class="number">0x80</span>,<span class="number">0xA5</span>,<span class="number">0xA2</span>,<span class="number">0xB9</span>,<span class="number">0xB4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">13</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,str[i]^<span class="number">0xcc</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//W3lc0me2Linux</span></span><br></pre></td></tr></table></figure><p>flag <code>W3lc0me2Linux</code></p><h2 id="Re200-壶中的大银河-Easy"><a href="#Re200-壶中的大银河-Easy" class="headerlink" title="Re200 (壶中的大银河~Easy~)"></a>Re200 (壶中的大银河~Easy~)</h2><p>然后后面这几题就真的学到很多东西了</p><p>这题提示着linux signal机制</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zpsotlsyy0l.jpg" alt="1"></p><p>ida看到main函数很简单，主要有alarm、pause函数</p><p>注意在gdb调试中，默认alarm信号是不传进程序的，会导致程序阻塞在pause的地方</p><p>学习了一轮signal机制，知道了这么一回事</p><p>signal函数 void (*<em>signal</em>(int signo, void (*handler)(int)))(int);</p><p>在接受到signo的信号后，会跳转到第二个参数（一个函数指针）去处理</p><p>这里主程序是发出了alarm的信号</p><p>ida中搜了一下signal，就能发现这个函数</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/2_zpsymyo3nut.jpg" alt="2"></p><p>跳转到handler里面</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/3_zps9emx6l1o.jpg" alt="3"></p><p>然后查看各个地址，0x8049B40中获得奇怪的字符串一个</p><p>写个程序就跑出来了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> cmp[] = <span class="string">&quot;8BVXznh]z^VXdAfC&#125;PgE&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> rel[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i &amp; <span class="number">1</span>)&#123;</span><br><span class="line">rel[i] = cmp[i] ^ rel[<span class="number">0</span>];</span><br><span class="line"> &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">rel[i] = cmp[i] ^ <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,rel[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag: <code>1s_is_also_important</code></p><h2 id="Re250-蓬莱的玉枝"><a href="#Re250-蓬莱的玉枝" class="headerlink" title="Re250 (蓬莱的玉枝)"></a>Re250 (蓬莱的玉枝)</h2><p>也是一个winGUI</p><p>跟之前同样道理，定位到关键函数，用ida查看</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zpsft4yihgp.jpg" alt="1"></p><p>这个函数非常简单！而且Seed是写死的，rand()每次运行程序都一样</p><p>那么思路就是获得0x0041c010的数据，写个程序跑出来</p><p>嗯……然后出来一堆奇怪的东西，所以这样不对吧</p><p>然后用OD调试，发现长度27，到这里会有判断……</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/2_zpsw8ig4y8g.jpg" alt="2"></p><p>又是累一点下个断点一次次跑然后出结果2333333</p><p>后来再想其实那个程序为什么会不对呢，有可能在某个函数对那块空间处理了一下</p><p>在OD中看那块地址空间果然跟原来的不一样了</p><p>后来果然找到了那个函数</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/3_zpsnjjgio1s.jpg" alt="3"></p><p>咦……IsDebuggerPresent()函数</p><p>如果检测到在调试模式下变换出来的字符串是错误的</p><p>结果我就发现……用OD调试时IsDebuggerPresent()函数返回的是非！厉害了OD</p><p>同时用ida调试了一下，出来的是非0值，检测到在调试，再修改下程序，就跑出来了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//char ch[] = &#123;0x17,0x14,0xE7,0x83,0xA4,0x63,0xAC,0x91,0xCB,0xC5,0x42,0x4A,0x8B,0x5B,0x9D,0x93,5,0x98,0x20,0xB1,0x29,0xC1,0x8C,0x53,0x92,0x8D,0x36&#125;; //source</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch[] = &#123;<span class="number">0x12</span>,<span class="number">0x11</span>,<span class="number">0xE2</span>,<span class="number">0x86</span>,<span class="number">0xA1</span>,<span class="number">0x66</span>,<span class="number">0xA9</span>,<span class="number">0x94</span>,<span class="number">0xCE</span>,<span class="number">0xC0</span>,<span class="number">0x47</span>,<span class="number">0x4F</span>,<span class="number">0x8E</span>,<span class="number">0x5E</span>,<span class="number">0x98</span>,<span class="number">0x96</span>,<span class="number">0x9D</span>,<span class="number">0x00</span>,<span class="number">0x25</span>,<span class="number">0xB4</span>,<span class="number">0x2C</span>,<span class="number">0xC4</span>,<span class="number">0x89</span>,<span class="number">0x56</span>,<span class="number">0x97</span>,<span class="number">0x88</span>,<span class="number">0x33</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char ch[] = &#123;0x1E,0x1D,0xEE,0x8A,0xAD,0x6A,0xA5,0x98,0xC2,0xCC,0x4B,0x43,0x82,0x52,0x94,0x9A,0x91,0x0C,0x29,0xB8,0x20,0xC8,0x85,0x5A,0x9B,0x84,0x3F&#125;; //wrong</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="number">17</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">27</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,(ch[i] ^ (<span class="built_in">rand</span>() % <span class="number">0xFF</span>u)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LCTF&#123;learn_more_think_more&#125;</span></span><br></pre></td></tr></table></figure><p><code>LCTF&#123;learn_more_think_more&#125;</code></p><h2 id="Re350-永遠の春夢"><a href="#Re350-永遠の春夢" class="headerlink" title="Re350 (永遠の春夢)"></a>Re350 (永遠の春夢)</h2><p>嗯……做的时候提示还没出来</p><p>分析出来后成就感满满的啊噢！</p><p>这个比较麻烦我就直接用ida调试了，先看主操作函数</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/1_zpsuyqxpzmu.jpg" alt="1"></p><p>关键就是在sub_401621函数中了</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/2_zpshtql795o.jpg" alt="2"></p><p>刚开始就懵逼的发现前面有个异或的操作，后面有个a1(a4)这特么是个啥！</p><p>然后再前面传入的第一个参数一直分不清到底是数据还是程序</p><p>a2的长度刚好就是a1地址中数据的长度</p><p>这时看看汇编代码</p><p>看到一个call eax</p><p><img src="/2017/02/21/NGfish_mini-lctf_writeup/3_zpswwklg0cu.jpg" alt="3"></p><p>所以那就是个函数咯</p><p>那前面异或？这是就想到动态自修改了</p><p>调试中看到这段汇编代码，这个就用不了f5了，直接阅读吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">.text:00401584 push    ebp</span><br><span class="line">.text:00401584 sub_401584 endp ; sp-analysis failed</span><br><span class="line">.text:00401584</span><br><span class="line">.text:00401585 mov     ebp, esp</span><br><span class="line">.text:00401587 mov     eax, [ebp+8]</span><br><span class="line">.text:0040158A mov     eax, ds:dword_40EA40[eax*4]</span><br><span class="line">.text:00401591 shl     eax, 4</span><br><span class="line">.text:00401594 movzx   edx, al</span><br><span class="line">.text:00401597 mov     eax, [ebp+8]</span><br><span class="line">.text:0040159A mov     eax, ds:dword_40EA40[eax*4]</span><br><span class="line">.text:004015A1 shr     eax, 4</span><br><span class="line">.text:004015A4 and     eax, 0Fh</span><br><span class="line">.text:004015A7 or      eax, edx</span><br><span class="line">.text:004015A9 movzx   edx, al</span><br><span class="line">.text:004015AC mov     eax, [ebp+8]</span><br><span class="line">.text:004015AF mov     ds:dword_40EA40[eax*4], edx</span><br><span class="line">.text:004015B6 mov     eax, [ebp+8]</span><br><span class="line">.text:004015B9 mov     eax, dword_40A020[eax*4]</span><br><span class="line">.text:004015C0 lea     ecx, [eax+30h]</span><br><span class="line">.text:004015C3 mov     edx, 80808081h</span><br><span class="line">.text:004015C8 mov     eax, ecx</span><br><span class="line">.text:004015CA mul     edx</span><br><span class="line">.text:004015CC mov     eax, edx</span><br><span class="line">.text:004015CE shr     eax, 7</span><br><span class="line">.text:004015D1 mov     edx, eax</span><br><span class="line">.text:004015D3 shl     edx, 8</span><br><span class="line">.text:004015D6 sub     edx, eax</span><br><span class="line">.text:004015D8 mov     eax, ecx</span><br><span class="line">.text:004015DA sub     eax, edx</span><br><span class="line">.text:004015DC mov     edx, [ebp+8]</span><br><span class="line">.text:004015DF mov     dword_40A020[edx*4], eax</span><br><span class="line">.text:004015E6 mov     eax, 0</span><br><span class="line">.text:004015EB pop     ebp</span><br><span class="line">.text:004015EC retn</span><br></pre></td></tr></table></figure><p>大致就是每次取ds:dword_40EA40的值中的8位字符数据低四位与高四位交换一下</p><p>再把dword_40A020中的数据进行一点处理，这里似乎是取模？</p><p>然后结合外部f5出来的代码可以猜想对输入字符串都进行这个操作了</p><p>然后是第二个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.text:004015ED push    ebp                             ; DATA XREF: sub_4014C8+8Do</span><br><span class="line">.text:004015EE mov     ebp, esp</span><br><span class="line">.text:004015F0 sub     esp, 10h</span><br><span class="line">.text:004015F3 mov     eax, [ebp+8]</span><br><span class="line">.text:004015F6 mov     eax, ds:dword_40EA40[eax*4]</span><br><span class="line">.text:004015FD mov     [ebp-4], eax</span><br><span class="line">.text:00401600 xor     dword ptr [ebp-4], 55h</span><br><span class="line">.text:00401604 mov     eax, [ebp+8]</span><br><span class="line">.text:00401607 mov     eax, dword_40A020[eax*4]</span><br><span class="line">.text:0040160E cmp     eax, [ebp-4]</span><br><span class="line">.text:00401611 jz      short loc_40161A</span><br><span class="line">.text:00401613 mov     eax, 0</span><br><span class="line">.text:00401618 jmp     short locret_40161F</span><br></pre></td></tr></table></figure><p>很简单的异或一下，然后比较</p><p>所以就可以写程序跑了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> chr[] = &#123;<span class="number">0x61</span>,<span class="number">0x31</span>,<span class="number">0xdf</span>,<span class="number">1</span>,<span class="number">0xb2</span>,<span class="number">0x30</span>,<span class="number">0x51</span>,<span class="number">0x31</span>,<span class="number">0x70</span>,<span class="number">0x93</span>,<span class="number">0x32</span>,<span class="number">0x70</span>,<span class="number">0xd2</span>,<span class="number">0xa2</span>,<span class="number">0x33</span>,<span class="number">0x93</span>,<span class="number">0xe1</span>,<span class="number">0xd2</span>,<span class="number">0xe2</span>,<span class="number">0x17</span>,<span class="number">0x52</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> chr2[<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">21</span>;i++)&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> d1 = chr[i] + <span class="number">0x30</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> e1 = d1*<span class="number">0x80808081</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> e2 = e1&gt;&gt;<span class="number">32</span>;</span><br><span class="line">e2 = e2&gt;&gt;<span class="number">7</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> e3 = e2&lt;&lt;<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">chr2[i] = d1-(e3-e2);</span><br><span class="line">chr2[i] = chr2[i]^<span class="number">0x55</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tmp = chr2[i];</span><br><span class="line"><span class="keyword">int</span> tmp2 = (tmp&lt;&lt;<span class="number">4</span>) &amp; <span class="number">0xff</span>;<span class="comment">//获取低四位</span></span><br><span class="line"><span class="keyword">int</span> tmp3 = (tmp&gt;&gt;<span class="number">4</span>) &amp; <span class="number">0xf</span>; <span class="comment">//获取高四位</span></span><br><span class="line">chr2[i] = tmp2^tmp3;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">21</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,chr2[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为前面没分析出来mul 0x80808081的作用，所以就直接强行模拟了</p><p>后来看这结合上下代码似乎是一个取模的操作</p><p>跑出来结果</p><p><code>LCTF&#123;SMC_is_excited!&#125;</code></p><p>Excited!</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mini-lctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnhub无用的电脑_丧心病狂_writeup</title>
      <link href="2017/02/20/pwnhub%E6%97%A0%E7%94%A8%E7%9A%84%E7%94%B5%E8%84%91-%E4%B8%A7%E5%BF%83%E7%97%85%E7%8B%82-writeup/"/>
      <url>2017/02/20/pwnhub%E6%97%A0%E7%94%A8%E7%9A%84%E7%94%B5%E8%84%91-%E4%B8%A7%E5%BF%83%E7%97%85%E7%8B%82-writeup/</url>
      
        <content type="html"><![CDATA[<p>比赛地址是 pwnhub.cn</p><p>也可以下载我上传的writeup来看</p><p>弱渣用的解法超奇怪233333333</p><p>然而居然还被选上了官方推荐</p><p>接下来看看正文吧</p><hr><p>得到pwnhub.jar包，先跑起看看</p><p><code>java -jar pwnhub.jar</code></p><p><img src="/2017/02/20/pwnhub%E6%97%A0%E7%94%A8%E7%9A%84%E7%94%B5%E8%84%91-%E4%B8%A7%E5%BF%83%E7%97%85%E7%8B%82-writeup/pwnhub无用的电脑-丧心病狂-writeup/1_zpsoqcgrhb4.jpg" alt="1"></p><span id="more"></span><p>jar包好说，拖进jd-gui看看</p><p>结果出来一堆疑似MD5处理的类名，除了最后五个小写的类能正常反编译外，其余1500+个都不能正常打开</p><p><img src="/2017/02/20/pwnhub%E6%97%A0%E7%94%A8%E7%9A%84%E7%94%B5%E8%84%91-%E4%B8%A7%E5%BF%83%E7%97%85%E7%8B%82-writeup/pwnhub无用的电脑-丧心病狂-writeup/2_zpsuj7qfqed.jpg" alt="2"></p><p>反编译看出，先验证code，code的长度为4，接着就是验证code的类</p><p>对应<code>a4a89174426b40307102e165374ab8ab.class</code>这个类，里面的验证代码略复杂</p><p>因为code只有4位，copy一下代码暴力跑下就出来了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pwnhub.ConvertClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] word = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;</span>.toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> a : word)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> b : word)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> c : word)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> d : word)&#123;</span><br><span class="line">String tmp = String.valueOf(a)+String.valueOf(b)+String.valueOf(c)+String.valueOf(d);</span><br><span class="line"><span class="keyword">if</span>(ConvertClass.b(tmp))&#123;</span><br><span class="line">System.out.println(tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//result: mdzz</span></span><br></pre></td></tr></table></figure><p>跑出来code = mdzz</p><p><img src="/2017/02/20/pwnhub%E6%97%A0%E7%94%A8%E7%9A%84%E7%94%B5%E8%84%91-%E4%B8%A7%E5%BF%83%E7%97%85%E7%8B%82-writeup/pwnhub无用的电脑-丧心病狂-writeup/3_zps5y4x3irm.jpg" alt="3"></p><p>接下来就是输入flag验证了</p><p>跟踪到这个类中，发现通过java的反射机制加载checkFlag这个类</p><p><img src="/2017/02/20/pwnhub%E6%97%A0%E7%94%A8%E7%9A%84%E7%94%B5%E8%84%91-%E4%B8%A7%E5%BF%83%E7%97%85%E7%8B%82-writeup/pwnhub无用的电脑-丧心病狂-writeup/4_zpsxigy8ngg.jpg" alt="4"></p><p>跟踪进去<code>mc</code>这个类，就能看到其中重载了<code>ClassLoader</code>中<code>findClass</code>这个函数</p><p>通过MD5转换类名，找到对应类文件，并通过AES解密，秘钥写死，解密后获取对应的类</p><p><img src="/2017/02/20/pwnhub%E6%97%A0%E7%94%A8%E7%9A%84%E7%94%B5%E8%84%91-%E4%B8%A7%E5%BF%83%E7%97%85%E7%8B%82-writeup/pwnhub无用的电脑-丧心病狂-writeup/5_zpsx0ahwwsx.jpg" alt="5"></p><hr><p><img src="/2017/02/20/pwnhub%E6%97%A0%E7%94%A8%E7%9A%84%E7%94%B5%E8%84%91-%E4%B8%A7%E5%BF%83%E7%97%85%E7%8B%82-writeup/pwnhub无用的电脑-丧心病狂-writeup/6_zpsmh1ezgq6.jpg" alt="6"></p><p>把类copy出来，并且在最后添加一段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//output the decoded file</span></span><br><span class="line"><span class="comment">//********************************my operation**************************</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">FileOutputStream out = <span class="keyword">new</span> FileOutputStream(name);</span><br><span class="line">out.write(en, <span class="number">0</span>, en.length);</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//********************************finish********************************</span></span><br></pre></td></tr></table></figure><p>获取解密后的类</p><p>获得的checkFlag类</p><p><img src="/2017/02/20/pwnhub%E6%97%A0%E7%94%A8%E7%9A%84%E7%94%B5%E8%84%91-%E4%B8%A7%E5%BF%83%E7%97%85%E7%8B%82-writeup/pwnhub无用的电脑-丧心病狂-writeup/7_zpskalmrgjm.jpg" alt="7"></p><p>把b和flag的字节码传进函数中获取返回值验证</p><p>前面有个<code>load.l()</code>的函数，<code>cadqa</code>也不知道是什么类</p><p>但猜想可通过同样原理从一堆加密的class中把原来的类解密出来</p><p>获得cadqa类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GetClass mClass = <span class="keyword">new</span> GetClass();</span><br><span class="line">Class&lt;?&gt; clazz = mClass.findClass(<span class="string">&quot;pwnhub.cadqa&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/2017/02/20/pwnhub%E6%97%A0%E7%94%A8%E7%9A%84%E7%94%B5%E8%84%91-%E4%B8%A7%E5%BF%83%E7%97%85%E7%8B%82-writeup/pwnhub无用的电脑-丧心病狂-writeup/8_zpslvqunj48.jpg" alt="8"></p><p>y变换出下一个类名，同样通过反射机制获取下一个类</p><p>注意到对b[2]进行了一次异或操作，并继续传进下一个函数</p><p>同理copy出来获取下一个类<code>pwnhub.wmyvg</code></p><p>会发现下一个类中也是差不多同样的东西</p><p>一直传递进去</p><p>好，所以换种思路，可以在开始重载的findClass函数中加进输出类名的信息，替换掉原jar包中的类，则可以输出逐步加载的类名</p><p>这里注意之前提到过的<code>load.l()</code>函数，通过findClass找到该类发现方法中把所有的类都加载了一遍</p><p>所以还需要做出一点修改</p><p><img src="/2017/02/20/pwnhub%E6%97%A0%E7%94%A8%E7%9A%84%E7%94%B5%E8%84%91-%E4%B8%A7%E5%BF%83%E7%97%85%E7%8B%82-writeup/pwnhub无用的电脑-丧心病狂-writeup/9_zpslsnlymka.jpg" alt="9"></p><p><strong>思路是：</strong> 修改checkFlag类，注释掉<code>load.l()</code>语句，注意到传进的<code>int[] b</code>在每次迭代的类中都对其中一位进行异或，每个中间的类只对该数组进行了修改，别的都无关，我们直接在最后输出最终的b数组的值，不必关注当中的过程。</p><p>修改checkFlag</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pwnhub;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">checkFlag</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// load.l();</span></span><br><span class="line">BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">System.out.println(<span class="string">&quot;ok, now give me flag&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;flag:&quot;</span>);</span><br><span class="line">String flag = strin.readLine();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] b = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] result = cadqa.i(flag.getBytes(), b);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;Array b: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : b)&#123;</span><br><span class="line">System.out.print(i + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] tFlag = &#123; <span class="number">16</span>, <span class="number">37</span>, -<span class="number">54</span>, -<span class="number">1</span>, -<span class="number">36</span>, -<span class="number">34</span>, -<span class="number">83</span>, -<span class="number">64</span>, <span class="number">39</span>, -<span class="number">112</span>, <span class="number">5</span>, -<span class="number">85</span>, <span class="number">61</span>, <span class="number">108</span>, -<span class="number">4</span>, <span class="number">13</span>, <span class="number">85</span>, -<span class="number">22</span>, -<span class="number">116</span>, -<span class="number">77</span>, <span class="number">31</span>, <span class="number">21</span>, -<span class="number">64</span>, <span class="number">13</span>, -<span class="number">86</span>, -<span class="number">48</span>, -<span class="number">86</span>, -<span class="number">115</span>, -<span class="number">28</span>, -<span class="number">82</span>, <span class="number">48</span>, -<span class="number">15</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (Arrays.equals(result, tFlag)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;pwnhub&#123;flag:&quot;</span> + flag + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;try again&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为该类是通过AES解密出来的，替换原jar包中的该类必须先把类加密</p><p>对于java中AES的方法非常简单，因为秘钥已写死，只要把重写的findClass中的代码拷贝出来</p><p>因为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ENCRYPT_MODE = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DECRYPT_MODE = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>所以在<code>cipher.init(2, skey, iv);</code>改为<code>cipher.init(1, skey, iv);</code>就加密出来了</p><p>输出加密后的类就可以替换原jar包中的类了</p><p>跑一下修改后的jar包</p><p>得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">no passcode, no game</span><br><span class="line">code:mdzz</span><br><span class="line">classname: checkFlag</span><br><span class="line">ok, now give me flag</span><br><span class="line">flag:aaaaaa</span><br><span class="line">classname: cadqa</span><br><span class="line">classname: wmyvg</span><br><span class="line">classname: fthyl</span><br><span class="line">classname: knklz</span><br><span class="line">classname: swygk</span><br><span class="line">classname: xbzvx</span><br><span class="line">classname: bstqh</span><br><span class="line">classname: lmvxj</span><br><span class="line">classname: iaclf</span><br><span class="line">classname: civgj</span><br><span class="line">classname: jzlnc</span><br><span class="line">classname: wpzay</span><br><span class="line">classname: yhusg</span><br><span class="line">classname: qrleu</span><br><span class="line">classname: ryugj</span><br><span class="line">classname: krvkv</span><br><span class="line">classname: rysks</span><br><span class="line">classname: mcnky</span><br><span class="line">classname: pqxex</span><br><span class="line">classname: hfdxm</span><br><span class="line">classname: bhlro</span><br><span class="line">classname: ghxxg</span><br><span class="line">classname: kxgjk</span><br><span class="line">classname: ugeia</span><br><span class="line">classname: gxizy</span><br><span class="line">classname: whpuy</span><br><span class="line">classname: itjyb</span><br><span class="line">classname: dypmm</span><br><span class="line">classname: vphxl</span><br><span class="line">classname: xmopd</span><br><span class="line">classname: bkarw</span><br><span class="line">classname: xwver</span><br><span class="line">classname: qujkq</span><br><span class="line">classname: jwzgx</span><br><span class="line">classname: lpodr</span><br><span class="line">classname: dfhcv</span><br><span class="line">classname: uxxlh</span><br><span class="line">classname: qkznr</span><br><span class="line">classname: jovrk</span><br><span class="line">classname: plmbn</span><br><span class="line">classname: dnmoe</span><br><span class="line">classname: lxmpw</span><br><span class="line">classname: mvhaz</span><br><span class="line">classname: ekuyu</span><br><span class="line">classname: zqggw</span><br><span class="line">classname: oxodn</span><br><span class="line">classname: tjoao</span><br><span class="line">classname: ytpej</span><br><span class="line">classname: yjubo</span><br><span class="line">classname: igjiv</span><br><span class="line">classname: aaisy</span><br><span class="line">classname: uvrut</span><br><span class="line">classname: krdya</span><br><span class="line">classname: rmrou</span><br><span class="line">classname: tknxh</span><br><span class="line">classname: gzmbz</span><br><span class="line">classname: dkqcg</span><br><span class="line">classname: zrhvo</span><br><span class="line">classname: biosp</span><br><span class="line">classname: ddbfz</span><br><span class="line">classname: tdozs</span><br><span class="line">classname: klfqs</span><br><span class="line">classname: wtwpi</span><br><span class="line">classname: icpbr</span><br><span class="line">classname: angkn</span><br><span class="line">classname: vjsqq</span><br><span class="line">classname: lazus</span><br><span class="line">classname: hjtcg</span><br><span class="line">classname: jwuvs</span><br><span class="line">classname: eximk</span><br><span class="line">classname: qotct</span><br><span class="line">classname: prlhh</span><br><span class="line">classname: ictnz</span><br><span class="line">classname: vdwrx</span><br><span class="line">classname: akkks</span><br><span class="line">classname: mtyvu</span><br><span class="line">classname: ummng</span><br><span class="line">classname: zltaa</span><br><span class="line">classname: ptqro</span><br><span class="line">classname: bdoqu</span><br><span class="line">classname: iaedu</span><br><span class="line">classname: ekjiz</span><br><span class="line">classname: wzvnt</span><br><span class="line">classname: uxxzo</span><br><span class="line">classname: oshbc</span><br><span class="line">classname: jfwqa</span><br><span class="line">classname: ubvnq</span><br><span class="line">classname: itlpk</span><br><span class="line">classname: wwigc</span><br><span class="line">classname: hnvij</span><br><span class="line">classname: ctavm</span><br><span class="line">classname: gsqdi</span><br><span class="line">classname: wqeuz</span><br><span class="line">classname: rjfog</span><br><span class="line">classname: fkviz</span><br><span class="line">classname: bjbwm</span><br><span class="line">classname: gefao</span><br><span class="line">classname: hllei</span><br><span class="line">classname: wmolw</span><br><span class="line">classname: herqz</span><br><span class="line">classname: dlfnv</span><br><span class="line">classname: frsu</span><br><span class="line">try again</span><br></pre></td></tr></table></figure><p>看待迭代了这么多个类……</p><p>并且跑出了最终b数组的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> b[] = &#123;<span class="number">187632156</span>, <span class="number">874189824</span>, <span class="number">254150144</span>, <span class="number">924386310</span>, <span class="number">121057538</span>, <span class="number">840500228</span>, <span class="number">389160971</span>, <span class="number">907870729</span>, <span class="number">389426184</span>, <span class="number">973875457</span>, <span class="number">372376604</span>, <span class="number">707731490</span>, <span class="number">1043334948</span>, <span class="number">439222784</span>, <span class="number">876216579</span>, <span class="number">455999525</span>&#125;;</span><br></pre></td></tr></table></figure><p>查看最后加载的两个类，类<code>dlfnv</code>是跟上面的一样的迭代类</p><p>最后的<code>frsu</code>是最终的解密类</p><p>同理获得解出来的类，得到一段复杂的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">byte</span>[] b(<span class="keyword">byte</span>[] flag, <span class="keyword">int</span>[] bInt) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">int</span>[] constantArr1 = &#123; <span class="number">943331329</span>, <span class="number">170788368</span>, <span class="number">1008414755</span>, <span class="number">187049985</span>, <span class="number">1010368540</span>, <span class="number">220604441</span>, <span class="number">940377620</span>, <span class="number">255209728</span>,</span><br><span class="line"><span class="number">689771012</span>, <span class="number">221709344</span>, <span class="number">957157408</span>, <span class="number">892536332</span>, <span class="number">722417666</span>, <span class="number">1026621720</span>, <span class="number">655302664</span>, <span class="number">890966315</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr2 = &#123; <span class="number">1847617210</span>, <span class="number">1994607775</span>, <span class="number">1906299266</span>, <span class="number">1443467998</span>, <span class="number">1753140052</span>, <span class="number">782026644</span>, <span class="number">743697037</span>, <span class="number">1500018807</span>,</span><br><span class="line"><span class="number">1015162722</span>, <span class="number">141403752</span>, <span class="number">1057274701</span>, <span class="number">1430471406</span>, <span class="number">921937966</span>, <span class="number">1419221067</span>, <span class="number">962664086</span>, <span class="number">2133607337</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">bInt[i] ^= constantArr2[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>[] mergeBInt = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">mergeBInt[i] = constantArr1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">mergeBInt[(i + <span class="number">16</span>)] = bInt[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">byte</span>[] flagcp = flag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] constantArr3 = &#123; <span class="number">16843776</span>, <span class="number">0</span>, <span class="number">65536</span>, <span class="number">16843780</span>, <span class="number">16842756</span>, <span class="number">66564</span>, <span class="number">4</span>, <span class="number">65536</span>, <span class="number">1024</span>, <span class="number">16843776</span>, <span class="number">16843780</span>, <span class="number">1024</span>,</span><br><span class="line"><span class="number">16778244</span>, <span class="number">16842756</span>, <span class="number">16777216</span>, <span class="number">4</span>, <span class="number">1028</span>, <span class="number">16778240</span>, <span class="number">16778240</span>, <span class="number">66560</span>, <span class="number">66560</span>, <span class="number">16842752</span>, <span class="number">16842752</span>, <span class="number">16778244</span>,</span><br><span class="line"><span class="number">65540</span>, <span class="number">16777220</span>, <span class="number">16777220</span>, <span class="number">65540</span>, <span class="number">0</span>, <span class="number">1028</span>, <span class="number">66564</span>, <span class="number">16777216</span>, <span class="number">65536</span>, <span class="number">16843780</span>, <span class="number">4</span>, <span class="number">16842752</span>, <span class="number">16843776</span>,</span><br><span class="line"><span class="number">16777216</span>, <span class="number">16777216</span>, <span class="number">1024</span>, <span class="number">16842756</span>, <span class="number">65536</span>, <span class="number">66560</span>, <span class="number">16777220</span>, <span class="number">1024</span>, <span class="number">4</span>, <span class="number">16778244</span>, <span class="number">66564</span>, <span class="number">16843780</span>, <span class="number">65540</span>,</span><br><span class="line"><span class="number">16842752</span>, <span class="number">16778244</span>, <span class="number">16777220</span>, <span class="number">1028</span>, <span class="number">66564</span>, <span class="number">16843776</span>, <span class="number">1028</span>, <span class="number">16778240</span>, <span class="number">16778240</span>, <span class="number">0</span>, <span class="number">65540</span>, <span class="number">66560</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">16842756</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr4 = &#123; -<span class="number">2146402272</span>, -<span class="number">2147450880</span>, <span class="number">32768</span>, <span class="number">1081376</span>, <span class="number">1048576</span>, <span class="number">32</span>, -<span class="number">2146435040</span>, -<span class="number">2147450848</span>, -<span class="number">2147483616</span>,</span><br><span class="line">-<span class="number">2146402272</span>, -<span class="number">2146402304</span>, Integer.MIN_VALUE, -<span class="number">2147450880</span>, <span class="number">1048576</span>, <span class="number">32</span>, -<span class="number">2146435040</span>, <span class="number">1081344</span>, <span class="number">1048608</span>,</span><br><span class="line">-<span class="number">2147450848</span>, <span class="number">0</span>, Integer.MIN_VALUE, <span class="number">32768</span>, <span class="number">1081376</span>, -<span class="number">2146435072</span>, <span class="number">1048608</span>, -<span class="number">2147483616</span>, <span class="number">0</span>, <span class="number">1081344</span>, <span class="number">32800</span>,</span><br><span class="line">-<span class="number">2146402304</span>, -<span class="number">2146435072</span>, <span class="number">32800</span>, <span class="number">0</span>, <span class="number">1081376</span>, -<span class="number">2146435040</span>, <span class="number">1048576</span>, -<span class="number">2147450848</span>, -<span class="number">2146435072</span>,</span><br><span class="line">-<span class="number">2146402304</span>, <span class="number">32768</span>, -<span class="number">2146435072</span>, -<span class="number">2147450880</span>, <span class="number">32</span>, -<span class="number">2146402272</span>, <span class="number">1081376</span>, <span class="number">32</span>, <span class="number">32768</span>, Integer.MIN_VALUE,</span><br><span class="line"><span class="number">32800</span>, -<span class="number">2146402304</span>, <span class="number">1048576</span>, -<span class="number">2147483616</span>, <span class="number">1048608</span>, -<span class="number">2147450848</span>, -<span class="number">2147483616</span>, <span class="number">1048608</span>, <span class="number">1081344</span>, <span class="number">0</span>,</span><br><span class="line">-<span class="number">2147450880</span>, <span class="number">32800</span>, Integer.MIN_VALUE, -<span class="number">2146435040</span>, -<span class="number">2146402272</span>, <span class="number">1081344</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr5 = &#123; <span class="number">520</span>, <span class="number">134349312</span>, <span class="number">0</span>, <span class="number">134348808</span>, <span class="number">134218240</span>, <span class="number">0</span>, <span class="number">131592</span>, <span class="number">134218240</span>, <span class="number">131080</span>, <span class="number">134217736</span>, <span class="number">134217736</span>,</span><br><span class="line"><span class="number">131072</span>, <span class="number">134349320</span>, <span class="number">131080</span>, <span class="number">134348800</span>, <span class="number">520</span>, <span class="number">134217728</span>, <span class="number">8</span>, <span class="number">134349312</span>, <span class="number">512</span>, <span class="number">131584</span>, <span class="number">134348800</span>, <span class="number">134348808</span>,</span><br><span class="line"><span class="number">131592</span>, <span class="number">134218248</span>, <span class="number">131584</span>, <span class="number">131072</span>, <span class="number">134218248</span>, <span class="number">8</span>, <span class="number">134349320</span>, <span class="number">512</span>, <span class="number">134217728</span>, <span class="number">134349312</span>, <span class="number">134217728</span>,</span><br><span class="line"><span class="number">131080</span>, <span class="number">520</span>, <span class="number">131072</span>, <span class="number">134349312</span>, <span class="number">134218240</span>, <span class="number">0</span>, <span class="number">512</span>, <span class="number">131080</span>, <span class="number">134349320</span>, <span class="number">134218240</span>, <span class="number">134217736</span>, <span class="number">512</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">134348808</span>, <span class="number">134218248</span>, <span class="number">131072</span>, <span class="number">134217728</span>, <span class="number">134349320</span>, <span class="number">8</span>, <span class="number">131592</span>, <span class="number">131584</span>, <span class="number">134217736</span>, <span class="number">134348800</span>, <span class="number">134218248</span>,</span><br><span class="line"><span class="number">520</span>, <span class="number">134348800</span>, <span class="number">131592</span>, <span class="number">8</span>, <span class="number">134348808</span>, <span class="number">131584</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr6 = &#123; <span class="number">8396801</span>, <span class="number">8321</span>, <span class="number">8321</span>, <span class="number">128</span>, <span class="number">8396928</span>, <span class="number">8388737</span>, <span class="number">8388609</span>, <span class="number">8193</span>, <span class="number">0</span>, <span class="number">8396800</span>, <span class="number">8396800</span>, <span class="number">8396929</span>, <span class="number">129</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">8388736</span>, <span class="number">8388609</span>, <span class="number">1</span>, <span class="number">8192</span>, <span class="number">8388608</span>, <span class="number">8396801</span>, <span class="number">128</span>, <span class="number">8388608</span>, <span class="number">8193</span>, <span class="number">8320</span>, <span class="number">8388737</span>, <span class="number">1</span>, <span class="number">8320</span>, <span class="number">8388736</span>, <span class="number">8192</span>,</span><br><span class="line"><span class="number">8396928</span>, <span class="number">8396929</span>, <span class="number">129</span>, <span class="number">8388736</span>, <span class="number">8388609</span>, <span class="number">8396800</span>, <span class="number">8396929</span>, <span class="number">129</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8396800</span>, <span class="number">8320</span>, <span class="number">8388736</span>, <span class="number">8388737</span>,</span><br><span class="line"><span class="number">1</span>, <span class="number">8396801</span>, <span class="number">8321</span>, <span class="number">8321</span>, <span class="number">128</span>, <span class="number">8396929</span>, <span class="number">129</span>, <span class="number">1</span>, <span class="number">8192</span>, <span class="number">8388609</span>, <span class="number">8193</span>, <span class="number">8396928</span>, <span class="number">8388737</span>, <span class="number">8193</span>, <span class="number">8320</span>,</span><br><span class="line"><span class="number">8388608</span>, <span class="number">8396801</span>, <span class="number">128</span>, <span class="number">8388608</span>, <span class="number">8192</span>, <span class="number">8396928</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr7 = &#123; <span class="number">256</span>, <span class="number">34078976</span>, <span class="number">34078720</span>, <span class="number">1107296512</span>, <span class="number">524288</span>, <span class="number">256</span>, <span class="number">1073741824</span>, <span class="number">34078720</span>, <span class="number">1074266368</span>, <span class="number">524288</span>,</span><br><span class="line"><span class="number">33554688</span>, <span class="number">1074266368</span>, <span class="number">1107296512</span>, <span class="number">1107820544</span>, <span class="number">524544</span>, <span class="number">1073741824</span>, <span class="number">33554432</span>, <span class="number">1074266112</span>, <span class="number">1074266112</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">1073742080</span>, <span class="number">1107820800</span>, <span class="number">1107820800</span>, <span class="number">33554688</span>, <span class="number">1107820544</span>, <span class="number">1073742080</span>, <span class="number">0</span>, <span class="number">1107296256</span>, <span class="number">34078976</span>, <span class="number">33554432</span>,</span><br><span class="line"><span class="number">1107296256</span>, <span class="number">524544</span>, <span class="number">524288</span>, <span class="number">1107296512</span>, <span class="number">256</span>, <span class="number">33554432</span>, <span class="number">1073741824</span>, <span class="number">34078720</span>, <span class="number">1107296512</span>, <span class="number">1074266368</span>,</span><br><span class="line"><span class="number">33554688</span>, <span class="number">1073741824</span>, <span class="number">1107820544</span>, <span class="number">34078976</span>, <span class="number">1074266368</span>, <span class="number">256</span>, <span class="number">33554432</span>, <span class="number">1107820544</span>, <span class="number">1107820800</span>, <span class="number">524544</span>,</span><br><span class="line"><span class="number">1107296256</span>, <span class="number">1107820800</span>, <span class="number">34078720</span>, <span class="number">0</span>, <span class="number">1074266112</span>, <span class="number">1107296256</span>, <span class="number">524544</span>, <span class="number">33554688</span>, <span class="number">1073742080</span>, <span class="number">524288</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">1074266112</span>, <span class="number">34078976</span>, <span class="number">1073742080</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr8 = &#123; <span class="number">536870928</span>, <span class="number">541065216</span>, <span class="number">16384</span>, <span class="number">541081616</span>, <span class="number">541065216</span>, <span class="number">16</span>, <span class="number">541081616</span>, <span class="number">4194304</span>, <span class="number">536887296</span>, <span class="number">4210704</span>,</span><br><span class="line"><span class="number">4194304</span>, <span class="number">536870928</span>, <span class="number">4194320</span>, <span class="number">536887296</span>, <span class="number">536870912</span>, <span class="number">16400</span>, <span class="number">0</span>, <span class="number">4194320</span>, <span class="number">536887312</span>, <span class="number">16384</span>, <span class="number">4210688</span>,</span><br><span class="line"><span class="number">536887312</span>, <span class="number">16</span>, <span class="number">541065232</span>, <span class="number">541065232</span>, <span class="number">0</span>, <span class="number">4210704</span>, <span class="number">541081600</span>, <span class="number">16400</span>, <span class="number">4210688</span>, <span class="number">541081600</span>, <span class="number">536870912</span>,</span><br><span class="line"><span class="number">536887296</span>, <span class="number">16</span>, <span class="number">541065232</span>, <span class="number">4210688</span>, <span class="number">541081616</span>, <span class="number">4194304</span>, <span class="number">16400</span>, <span class="number">536870928</span>, <span class="number">4194304</span>, <span class="number">536887296</span>, <span class="number">536870912</span>,</span><br><span class="line"><span class="number">16400</span>, <span class="number">536870928</span>, <span class="number">541081616</span>, <span class="number">4210688</span>, <span class="number">541065216</span>, <span class="number">4210704</span>, <span class="number">541081600</span>, <span class="number">0</span>, <span class="number">541065232</span>, <span class="number">16</span>, <span class="number">16384</span>, <span class="number">541065216</span>,</span><br><span class="line"><span class="number">4210704</span>, <span class="number">16384</span>, <span class="number">4194320</span>, <span class="number">536887312</span>, <span class="number">0</span>, <span class="number">541081600</span>, <span class="number">536870912</span>, <span class="number">4194320</span>, <span class="number">536887312</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr9 = &#123; <span class="number">2097152</span>, <span class="number">69206018</span>, <span class="number">67110914</span>, <span class="number">0</span>, <span class="number">2048</span>, <span class="number">67110914</span>, <span class="number">2099202</span>, <span class="number">69208064</span>, <span class="number">69208066</span>, <span class="number">2097152</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">67108866</span>, <span class="number">2</span>, <span class="number">67108864</span>, <span class="number">69206018</span>, <span class="number">2050</span>, <span class="number">67110912</span>, <span class="number">2099202</span>, <span class="number">2097154</span>, <span class="number">67110912</span>, <span class="number">67108866</span>, <span class="number">69206016</span>,</span><br><span class="line"><span class="number">69208064</span>, <span class="number">2097154</span>, <span class="number">69206016</span>, <span class="number">2048</span>, <span class="number">2050</span>, <span class="number">69208066</span>, <span class="number">2099200</span>, <span class="number">2</span>, <span class="number">67108864</span>, <span class="number">2099200</span>, <span class="number">67108864</span>, <span class="number">2099200</span>,</span><br><span class="line"><span class="number">2097152</span>, <span class="number">67110914</span>, <span class="number">67110914</span>, <span class="number">69206018</span>, <span class="number">69206018</span>, <span class="number">2</span>, <span class="number">2097154</span>, <span class="number">67108864</span>, <span class="number">67110912</span>, <span class="number">2097152</span>, <span class="number">69208064</span>,</span><br><span class="line"><span class="number">2050</span>, <span class="number">2099202</span>, <span class="number">69208064</span>, <span class="number">2050</span>, <span class="number">67108866</span>, <span class="number">69208066</span>, <span class="number">69206016</span>, <span class="number">2099200</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">69208066</span>, <span class="number">0</span>, <span class="number">2099202</span>,</span><br><span class="line"><span class="number">69206016</span>, <span class="number">2048</span>, <span class="number">67108866</span>, <span class="number">67110912</span>, <span class="number">2048</span>, <span class="number">2097154</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr10 = &#123; <span class="number">268439616</span>, <span class="number">4096</span>, <span class="number">262144</span>, <span class="number">268701760</span>, <span class="number">268435456</span>, <span class="number">268439616</span>, <span class="number">64</span>, <span class="number">268435456</span>, <span class="number">262208</span>, <span class="number">268697600</span>,</span><br><span class="line"><span class="number">268701760</span>, <span class="number">266240</span>, <span class="number">268701696</span>, <span class="number">266304</span>, <span class="number">4096</span>, <span class="number">64</span>, <span class="number">268697600</span>, <span class="number">268435520</span>, <span class="number">268439552</span>, <span class="number">4160</span>, <span class="number">266240</span>, <span class="number">262208</span>,</span><br><span class="line"><span class="number">268697664</span>, <span class="number">268701696</span>, <span class="number">4160</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">268697664</span>, <span class="number">268435520</span>, <span class="number">268439552</span>, <span class="number">266304</span>, <span class="number">262144</span>, <span class="number">266304</span>, <span class="number">262144</span>,</span><br><span class="line"><span class="number">268701696</span>, <span class="number">4096</span>, <span class="number">64</span>, <span class="number">268697664</span>, <span class="number">4096</span>, <span class="number">266304</span>, <span class="number">268439552</span>, <span class="number">64</span>, <span class="number">268435520</span>, <span class="number">268697600</span>, <span class="number">268697664</span>, <span class="number">268435456</span>,</span><br><span class="line"><span class="number">262144</span>, <span class="number">268439616</span>, <span class="number">0</span>, <span class="number">268701760</span>, <span class="number">262208</span>, <span class="number">268435520</span>, <span class="number">268697600</span>, <span class="number">268439552</span>, <span class="number">268439616</span>, <span class="number">0</span>, <span class="number">268701760</span>,</span><br><span class="line"><span class="number">266240</span>, <span class="number">266240</span>, <span class="number">4160</span>, <span class="number">4160</span>, <span class="number">262208</span>, <span class="number">268435456</span>, <span class="number">268701696</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> flagLen = flagcp.length;</span><br><span class="line"><span class="keyword">int</span> var72 = flagLen % <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (var72 != <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;try again&quot;</span>);</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">var72 = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] var21 = <span class="keyword">new</span> <span class="keyword">int</span>[var72];</span><br><span class="line"><span class="keyword">byte</span>[] var22 = <span class="keyword">new</span> <span class="keyword">byte</span>[flagLen];</span><br><span class="line"><span class="keyword">int</span> var23 = flagLen / <span class="number">8</span>; <span class="comment">//2</span></span><br><span class="line"><span class="keyword">int</span> var24 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (var24 &lt; var23) &#123;</span><br><span class="line"><span class="keyword">int</span> var25 = var24 * <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> var26 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//二进制&#123;flag[0]flag[1]flag[2]flag[3]&#125;构成var21[0]</span></span><br><span class="line"><span class="comment">//二进制&#123;flag[4]flag[5]flag[6]flag[7]&#125;构成var21[1]</span></span><br><span class="line"><span class="keyword">while</span> (var26 &lt; <span class="number">2</span>) &#123;</span><br><span class="line">var21[var26] = ((flagcp[(var25 + var26 * <span class="number">4</span>)] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span></span><br><span class="line">| (flagcp[(var25 + var26 * <span class="number">4</span> + <span class="number">1</span>)] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span> | (flagcp[(var25 + var26 * <span class="number">4</span> + <span class="number">2</span>)] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span></span><br><span class="line">| flagcp[(var25 + var26 * <span class="number">4</span> + <span class="number">3</span>)] &amp; <span class="number">0xFF</span>);</span><br><span class="line">var26++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> var31 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> var29 = var21[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> var28 = var21[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> var27 = (var29 &gt;&gt;&gt; <span class="number">4</span> ^ var28) &amp; <span class="number">0xF0F0F0F</span>;</span><br><span class="line">var28 ^= var27;</span><br><span class="line">var29 ^= var27 &lt;&lt; <span class="number">4</span>;</span><br><span class="line">var27 = (var29 &gt;&gt;&gt; <span class="number">16</span> ^ var28) &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">var28 ^= var27;</span><br><span class="line">var29 ^= var27 &lt;&lt; <span class="number">16</span>;</span><br><span class="line">var27 = (var28 &gt;&gt;&gt; <span class="number">2</span> ^ var29) &amp; <span class="number">0x33333333</span>;</span><br><span class="line">var29 ^= var27;</span><br><span class="line">var28 ^= var27 &lt;&lt; <span class="number">2</span>;</span><br><span class="line">var27 = (var28 &gt;&gt;&gt; <span class="number">8</span> ^ var29) &amp; <span class="number">0xFF00FF</span>;</span><br><span class="line">var29 ^= var27;</span><br><span class="line">var28 ^= var27 &lt;&lt; <span class="number">8</span>;</span><br><span class="line">var28 = var28 &lt;&lt; <span class="number">1</span> | var28 &gt;&gt;&gt; <span class="number">31</span> &amp; <span class="number">0x1</span>;</span><br><span class="line">var27 = (var29 ^ var28) &amp; <span class="number">0xAAAAAAAA</span>;</span><br><span class="line">var29 ^= var27;</span><br><span class="line">var28 ^= var27;</span><br><span class="line">var29 = var29 &lt;&lt; <span class="number">1</span> | var29 &gt;&gt;&gt; <span class="number">31</span> &amp; <span class="number">0x1</span>;</span><br><span class="line"><span class="keyword">int</span> var30 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (var30 &lt; <span class="number">8</span>) &#123;</span><br><span class="line">var27 = var28 &lt;&lt; <span class="number">28</span> | var28 &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">var27 ^= mergeBInt[(var31++)];</span><br><span class="line">var26 = constantArr9[(var27 &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr7[(var27 &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr5[(var27 &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr3[(var27 &gt;&gt;&gt; <span class="number">24</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var27 = var28 ^ mergeBInt[(var31++)];</span><br><span class="line">var26 |= constantArr10[(var27 &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr8[(var27 &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr6[(var27 &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr4[(var27 &gt;&gt;&gt; <span class="number">24</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var29 ^= var26;</span><br><span class="line">var27 = var29 &lt;&lt; <span class="number">28</span> | var29 &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">var27 ^= mergeBInt[(var31++)];</span><br><span class="line">var26 = constantArr9[(var27 &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr7[(var27 &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr5[(var27 &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr3[(var27 &gt;&gt;&gt; <span class="number">24</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var27 = var29 ^ mergeBInt[(var31++)];</span><br><span class="line">var26 |= constantArr10[(var27 &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr8[(var27 &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr6[(var27 &gt;&gt;&gt; <span class="number">16</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var26 |= constantArr4[(var27 &gt;&gt;&gt; <span class="number">24</span> &amp; <span class="number">0x3F</span>)];</span><br><span class="line">var28 ^= var26;</span><br><span class="line">var30++;</span><br><span class="line">&#125;</span><br><span class="line">var28 = var28 &lt;&lt; <span class="number">31</span> | var28 &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">var27 = (var29 ^ var28) &amp; <span class="number">0xAAAAAAAA</span>;</span><br><span class="line">var29 ^= var27;</span><br><span class="line">var28 ^= var27;</span><br><span class="line">var29 = var29 &lt;&lt; <span class="number">31</span> | var29 &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">var27 = (var29 &gt;&gt;&gt; <span class="number">8</span> ^ var28) &amp; <span class="number">0xFF00FF</span>;</span><br><span class="line">var28 ^= var27;</span><br><span class="line">var29 ^= var27 &lt;&lt; <span class="number">8</span>;</span><br><span class="line">var27 = (var29 &gt;&gt;&gt; <span class="number">2</span> ^ var28) &amp; <span class="number">0x33333333</span>;</span><br><span class="line">var28 ^= var27;</span><br><span class="line">var29 ^= var27 &lt;&lt; <span class="number">2</span>;</span><br><span class="line">var27 = (var28 &gt;&gt;&gt; <span class="number">16</span> ^ var29) &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">var29 ^= var27;</span><br><span class="line">var28 ^= var27 &lt;&lt; <span class="number">16</span>;</span><br><span class="line">var27 = (var28 &gt;&gt;&gt; <span class="number">4</span> ^ var29) &amp; <span class="number">0xF0F0F0F</span>;</span><br><span class="line">var29 ^= var27;</span><br><span class="line">var28 ^= var27 &lt;&lt; <span class="number">4</span>;</span><br><span class="line">var21[<span class="number">0</span>] = var28;</span><br><span class="line">var21[<span class="number">1</span>] = var29;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> var32 = var24 * <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> var33 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//var22[0]var22[1]var22[2]var22[3]由var21[0]拆解得，对应变换后的flag[0]flag[1]flag[2]flag[3]</span></span><br><span class="line"><span class="keyword">while</span> (var33 &lt; <span class="number">2</span>) &#123;</span><br><span class="line">var22[(var32 + var33 * <span class="number">4</span>)] = ((<span class="keyword">byte</span>) (var21[var33] &gt;&gt;&gt; <span class="number">24</span>));</span><br><span class="line">var22[(var32 + var33 * <span class="number">4</span> + <span class="number">1</span>)] = ((<span class="keyword">byte</span>) (var21[var33] &gt;&gt;&gt; <span class="number">16</span>));</span><br><span class="line">var22[(var32 + var33 * <span class="number">4</span> + <span class="number">2</span>)] = ((<span class="keyword">byte</span>) (var21[var33] &gt;&gt;&gt; <span class="number">8</span>));</span><br><span class="line">var22[(var32 + var33 * <span class="number">4</span> + <span class="number">3</span>)] = ((<span class="keyword">byte</span>) var21[var33]);</span><br><span class="line">var33++;</span><br><span class="line">&#125;</span><br><span class="line">var24++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">byte</span> var66 = var22[(var22.length - <span class="number">1</span>)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> var22;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己反推太复杂了，猜测是某种加密的算法</p><p>搜索关键的字符，发现这是<code>DESEngine的代码</code></p><p>通过搜索得到的代码得知</p><p>通过<code>generateWorkKey</code>获得秘钥，加密秘钥与解密秘钥的关系非常大</p><p>秘钥为len = 32的int数组，其中</p><p><code>decKey[i] = encKey[30-i], decKey[i+1] = encKey[30-i+1], i=0,2,4,6...14</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] constantArr1 = &#123; <span class="number">943331329</span>, <span class="number">170788368</span>, <span class="number">1008414755</span>, <span class="number">187049985</span>, <span class="number">1010368540</span>, <span class="number">220604441</span>, <span class="number">940377620</span>, <span class="number">255209728</span>, <span class="number">689771012</span>, <span class="number">221709344</span>, <span class="number">957157408</span>, <span class="number">892536332</span>, <span class="number">722417666</span>, <span class="number">1026621720</span>, <span class="number">655302664</span>, <span class="number">890966315</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] constantArr2 = &#123; <span class="number">1847617210</span>, <span class="number">1994607775</span>, <span class="number">1906299266</span>, <span class="number">1443467998</span>, <span class="number">1753140052</span>, <span class="number">782026644</span>, <span class="number">743697037</span>, <span class="number">1500018807</span>, <span class="number">1015162722</span>, <span class="number">141403752</span>, <span class="number">1057274701</span>, <span class="number">1430471406</span>, <span class="number">921937966</span>, <span class="number">1419221067</span>, <span class="number">962664086</span>, <span class="number">2133607337</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">bInt[i] ^= constantArr2[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>[] mergeBInt = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">mergeBInt[i] = constantArr1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">mergeBInt[(i + <span class="number">16</span>)] = bInt[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------add-------</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = mergeBInt[<span class="number">30</span>-i];</span><br><span class="line">mergeBInt[<span class="number">30</span>-i] = mergeBInt[i];</span><br><span class="line">mergeBInt[i] = tmp;</span><br><span class="line"></span><br><span class="line">tmp = mergeBInt[<span class="number">30</span>-i+<span class="number">1</span>];</span><br><span class="line">mergeBInt[<span class="number">30</span>-i+<span class="number">1</span>] = mergeBInt[i+<span class="number">1</span>];</span><br><span class="line">mergeBInt[i+<span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----add finish---</span></span><br></pre></td></tr></table></figure><p>前面加入一段代码就能变为解密的函数</p><p>这里还有点得注意的，因为在传进函数后有这么一段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">bInt[i] ^= constantArr2[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以输出的b数组是异或后的结果。</p><p>解密时先异或回来再传进函数解密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b[] = &#123;<span class="number">187632156</span>, <span class="number">874189824</span>, <span class="number">254150144</span>, <span class="number">924386310</span>, <span class="number">121057538</span>, <span class="number">840500228</span>, <span class="number">389160971</span>, <span class="number">907870729</span>, <span class="number">389426184</span>, <span class="number">973875457</span>, <span class="number">372376604</span>, <span class="number">707731490</span>, <span class="number">1043334948</span>, <span class="number">439222784</span>, <span class="number">876216579</span>, <span class="number">455999525</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] constantArr2 = &#123; <span class="number">1847617210</span>, <span class="number">1994607775</span>, <span class="number">1906299266</span>, <span class="number">1443467998</span>, <span class="number">1753140052</span>, <span class="number">782026644</span>, <span class="number">743697037</span>, <span class="number">1500018807</span>, <span class="number">1015162722</span>, <span class="number">141403752</span>, <span class="number">1057274701</span>, <span class="number">1430471406</span>, <span class="number">921937966</span>, <span class="number">1419221067</span>, <span class="number">962664086</span>, <span class="number">2133607337</span> &#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.length;i++)&#123;</span><br><span class="line">b[i] ^= constantArr2[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String flag = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">byte</span>[] tFlag = &#123;<span class="number">16</span>, <span class="number">37</span>, -<span class="number">54</span>, -<span class="number">1</span>, -<span class="number">36</span>, -<span class="number">34</span>, -<span class="number">83</span>, -<span class="number">64</span>, <span class="number">39</span>, -<span class="number">112</span>, <span class="number">5</span>, -<span class="number">85</span>, <span class="number">61</span>, <span class="number">108</span>, -<span class="number">4</span>, <span class="number">13</span>, <span class="number">85</span>, -<span class="number">22</span>, -<span class="number">116</span>, -<span class="number">77</span>, <span class="number">31</span>, <span class="number">21</span>, -<span class="number">64</span>, <span class="number">13</span>, -<span class="number">86</span>, -<span class="number">48</span>, -<span class="number">86</span>, -<span class="number">115</span>, -<span class="number">28</span>, -<span class="number">82</span>, <span class="number">48</span>, -<span class="number">15</span> &#125;;</span><br><span class="line"><span class="keyword">byte</span>[] result = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">result = frsu.decode(tFlag, b);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;result.length;i++)&#123;</span><br><span class="line">System.out.print(result[i] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">flag = <span class="keyword">new</span> String(result);</span><br><span class="line">System.out.println(flag);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即可跑出<code>3c5ab398eb3bcb8e829126f5ae60442b</code></p><p>并验证成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">no passcode, no game</span><br><span class="line">code:mdzz</span><br><span class="line">ok, now give me flag</span><br><span class="line">flag:3c5ab398eb3bcb8e829126f5ae60442b</span><br><span class="line">pwnhub&#123;flag:3c5ab398eb3bcb8e829126f5ae60442b&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> java </tag>
            
            <tag> pwnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种编码区别及内存映射</title>
      <link href="2017/02/17/%E5%90%84%E7%A7%8D%E7%BC%96%E7%A0%81%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84/"/>
      <url>2017/02/17/%E5%90%84%E7%A7%8D%E7%BC%96%E7%A0%81%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<p>整件事起因是一个程序（这条死咸鱼还欠着两篇文章没有写）</p><p>室友问道为啥一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;中&quot;</span>;</span><br><span class="line">str.getBytes().length;</span><br></pre></td></tr></table></figure><p>结果是3，而不是我们当时常见的一个中文对应2字节</p><p>本质上的原因是因为他编辑器用了utf-8编码</p><p>后来又看到这么一段话</p><blockquote><p>“计算机内存中，统一使用Unicode编码，需要保存或者传输时，转换成UTF8编码。”</p></blockquote><p>然后我就懵逼了</p><p>对于编码方面的知识我的理解是混乱的，因此写篇blog理清一下思路</p><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h3 id="1-编码规范的发展"><a href="#1-编码规范的发展" class="headerlink" title="1. 编码规范的发展"></a>1. 编码规范的发展</h3><p>常见编码有<code>ASCII</code>，<code>GBK</code>，<code>Unicode</code>，<code>UTF-8</code>，<code>GB2312</code>等等等</p><p>所以有什么区别呢？</p><p>推荐一篇浅显易懂的文章</p><p><a href="http://zhihu.com/question/23374078/answer/69732605">Unicode 和 UTF-8 有何区别？ - 回答作者: 于洋 </a></p><h6 id="本身答主也是转发的，并不清楚原文最初发表在哪"><a href="#本身答主也是转发的，并不清楚原文最初发表在哪" class="headerlink" title="本身答主也是转发的，并不清楚原文最初发表在哪"></a>本身答主也是转发的，并不清楚原文最初发表在哪</h6><p>所以，总结一下</p><ul><li><p><strong>ASCII</strong> (American Standard Code for Information Interchange)</p><p>学过计算机的人都知道 ASCII 码，总共有 128 个，用一个字节的低 7 位表示，0~31 是控制字符如换行回车删除等；32~126 是打印字符，可以通过键盘输入并且能够显示出来。</p></li><li><p><strong>Unicode</strong> (Universal Coded)</p><p>每个字符占两字节，解决不同国家间字符编码不相容的问题。但这样的话对于多英文字符的其大小就会变大。</p></li></ul><ul><li><p><strong>ISO-8859-1</strong></p><p>128 个字符显然是不够用的，于是 ISO 组织在 ASCII 码基础上又制定了一些列标准用来扩展 ASCII 编码，它们是 ISO-8859-1~ISO-8859-15，其中 ISO-8859-1 涵盖了大多数西欧语言字符，所有应用的最广泛。ISO-8859-1 仍然是单字节编码，它总共能表示 256 个字符。</p></li><li><p><strong>GB2312</strong></p><p>它的全称是《信息交换用汉字编码字符集 基本集》，它是双字节编码，总的编码范围是 A1-F7，其中从 A1-A9 是符号区，总共包含 682 个符号，从 B0-F7 是汉字区，包含 6763 个汉字。</p></li><li><p><strong>GBK</strong> (Guojia Biaozhun Kuozhan)</p><p>全称叫《汉字内码扩展规范》，是国家技术监督局为 windows95 所制定的新的汉字内码规范，它的出现是为了扩展 GB2312，加入更多的汉字，它的编码范围是 8140~FEFE（去掉 XX7F）总共有 23940 个码位，它能表示 21003 个汉字，它的编码是和 GB2312 兼容的，也就是说用 GB2312 编码的汉字可以用 GBK 来解码，并且不会有乱码。</p></li><li><p><strong>GB18030</strong></p><p>全称是《信息交换用汉字编码字符集》，是我国的强制标准，它可能是单字节、双字节或者四字节编码，它的编码与 GB2312 编码兼容，这个虽然是国家标准，但是实际应用系统中使用的并不广泛。</p></li><li><p><strong>UTF-16</strong></p><p>说到 UTF 必须要提到 Unicode（Universal Code 统一码），ISO 试图想创建一个全新的超语言字典，世界上所有的语言都可以通过这本字典来相互翻译。可想而知这个字典是多么的复杂，关于 Unicode 的详细规范可以参考相应文档。Unicode 是 Java 和 XML 的基础，下面详细介绍 Unicode 在计算机中的存储形式。</p><p>UTF-16 具体定义了 Unicode 字符在计算机中存取方法。UTF-16 用两个字节来表示 Unicode 转化格式，这个是定长的表示方法，不论什么字符都可以用两个字节表示，两个字节是 16 个 bit，所以叫 UTF-16。UTF-16 表示字符非常方便，每两个字节表示一个字符，这个在字符串操作时就大大简化了操作，这也是 Java 以 UTF-16 作为内存的字符存储格式的一个很重要的原因。</p></li><li><p><strong>UTF-8</strong></p><p>UTF-16 统一采用两个字节表示一个字符，虽然在表示上非常简单方便，但是也有其缺点，有很大一部分字符用一个字节就可以表示的现在要两个字节表示，存储空间放大了一倍，在现在的网络带宽还非常有限的今天，这样会增大网络传输的流量，而且也没必要。而 UTF-8 采用了一种变长技术，每个编码区域有不同的字码长度。不同类型的字符可以是由 1~6 个字节组成。</p><p>UTF-8 有以下编码规则：</p></li></ul><ol><li>如果一个字节，最高位（第 8 位）为 0，表示这是一个 ASCII 字符（00 - 7F）。可见，所有 ASCII 编码已经是 UTF-8 了。</li><li>如果一个字节，以 11 开头，连续的 1 的个数暗示这个字符的字节数，例如：110xxxxx 代表它是双字节 UTF-8 字符的首字节。</li><li>如果一个字节，以 10 开始，表示它不是首字节，需要向前查找才能得到当前字符的首字节。</li></ol><p>在搜索资料过程看到一个解释得非常清楚的文章，介绍在Java中的中文编码问题，也把编码本身说得很清晰了。</p><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/">https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/</a></p><h3 id="二、问题"><a href="#二、问题" class="headerlink" title="二、问题"></a>二、问题</h3><p>但其实，我当时最不理解的是看到的一句话</p><blockquote><p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码</p></blockquote><p>感觉需要理解的是，Unicode是一种字符集，而UTF-8是一种字符编码</p><p>可以看一下这篇博文<a href="http://cenalulu.github.io/linux/character-encoding/">http://cenalulu.github.io/linux/character-encoding/</a></p><p>UTF-8跟Unicode之间通过一定关系转化，而UTF-8并没有涵盖整个Unicode字库</p><p>感觉目前很多说法都有问题，说某个文件用了Unicode编码</p><p>例如在记事本中，然而如果我用Unicode保存，在别的编辑器(vscode, sublime)上显示出来的是UTF-16 LE</p><p>Unicode是一种字符集，并不是一种字符编码，这样理解才对</p>]]></content>
      
      
      <categories>
          
          <category> Study_Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码 </tag>
            
            <tag> utf-8 </tag>
            
            <tag> unicode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016minilctf-Forensics500-Angel Beats!</title>
      <link href="2017/01/28/2016minilctf-Forensics500-Angel-Beats/"/>
      <url>2017/01/28/2016minilctf-Forensics500-Angel-Beats/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>mini-lctf是我们校内的一个小型ctf比赛，在2016年12月初持续一周……</p><p>对，大家都注意到了现在马上到2月了233333，新年快乐~</p><p>嗯，因为当时这题并没有做出来</p><p>马格鸡虽然我太菜然而还是ak了入门级的mobile和re，还排名第五（因为dalao们都是出题人23333）</p><p>然而因为我单挑没有带学弟玩居然不给我奖品，好气啊！</p><p>赛后wp里re和mobile我还是写的比较详细的，然而这时回老家过年没网，迟点改改结合出题人wp再发</p><span id="more"></span><h1 id="0x01-题目分析"><a href="#0x01-题目分析" class="headerlink" title="0x01 题目分析"></a>0x01 题目分析</h1><p>赛后补做这题，Forensics500，500分学到的真不是一般的多啊= =</p><p>信息只有一张图片，就先瞎搞一波</p><p>二进制看不到东西，调各种对比度之类的也看不到</p><p>用Stegsolve瞎搞一下，会发现在最低位隐藏了个链接</p><p><img src="/2017/01/28/2016minilctf-Forensics500-Angel-Beats/1_zps0e3vfsp7.jpg" alt="1"></p><p>然后下了一个700+MB的压缩包……</p><p>压缩包里有一个<code>.dockerenv</code>的文件，所以其实这是一个docker镜像（我也是看wp才懂的，捂脸痛哭）</p><p>嗯，然后我看了一波docker才能做下去。。。</p><p>有关docker的介绍请自行搜索233333，或等待一下我下一篇通俗的介绍233333</p><h1 id="0x02-瞎折腾docker找flag"><a href="#0x02-瞎折腾docker找flag" class="headerlink" title="0x02 瞎折腾docker找flag"></a>0x02 瞎折腾docker找flag</h1><p>嗯，我在我Ubuntu中配好了docker的环境，然后用</p><p><code>docker import Angel_Beats.tar minilctf:f500</code></p><p>导入镜像</p><p><img src="/2017/01/28/2016minilctf-Forensics500-Angel-Beats/2_zpsnscqcod1.jpg" alt="2"></p><p>通过</p><p><code>docker run -t -i minilctf:f500 /bin/bash</code></p><p>通过bash操作系统</p><p>在home目录中看到flag文件</p><p>内容<code>J1tVVOxbNhkyQTuScJMqhg==</code></p><p>然而base64解码出来是乱码= =</p><p>继续探索</p><p>在系统中看到有这么几个可执行程序</p><p><img src="/2017/01/28/2016minilctf-Forensics500-Angel-Beats/3_zpsm7xyzjfb.jpg" alt="3"></p><p>mysql数据库带密码进不去，运行httpd后发现挂了个博客</p><p>在配置文件<code>/etc/httpd/conf/httpd.conf</code>中看到网站的目录为<code>/srv/http/</code></p><p>从配置文件中可以看到数据库root的密码</p><p><img src="/2017/01/28/2016minilctf-Forensics500-Angel-Beats/4_zps92vpayg2.jpg" alt="4"></p><p><code>username: root</code></p><p><code>password:asdfjkljkladf</code></p><p>在数据库看到这个key</p><p><img src="/2017/01/28/2016minilctf-Forensics500-Angel-Beats/5_zpskdckxwax.jpg" alt="5"></p><p>这个应该就是密钥了，猜测AES加密（其实常见的AES、DES啥的都试试就能解出了）</p><p>最普通的ECB方式</p><p>结合开头的flag，解出</p><p><code>,Y0ur-Be2ts!&#125;</code></p><p>……</p><p>次奥，这才只有一半的flag</p><p>继续看数据库</p><p><img src="/2017/01/28/2016minilctf-Forensics500-Angel-Beats/6_zpsabncuuwt.jpg" alt="6"></p><p>看到只有admin一个用户</p><p>这个hash没怎么了解过，搜了一波还不太懂</p><p>然后wp说可以是弱口令攻击</p><p><code>username: admin</code></p><p><code>password: admin888</code></p><p>于是登陆进去后搜寻一波能看到一篇私密的文章<code>flag</code>!!!</p><p><img src="/2017/01/28/2016minilctf-Forensics500-Angel-Beats/7_zpssakfb9ow.jpg" alt="7"></p><p>组合起来得到flag</p><p><code>LCTF&#123;My_Soul,Y0ur-Be2ts!&#125;</code></p><h6 id="写起来似乎很简单……但做着真尼玛复杂啊！！！"><a href="#写起来似乎很简单……但做着真尼玛复杂啊！！！" class="headerlink" title="写起来似乎很简单……但做着真尼玛复杂啊！！！"></a>写起来似乎很简单……但做着真尼玛复杂啊！！！</h6>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Forensics </tag>
            
            <tag> minilctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu的apache2配置PHP不能运行问题</title>
      <link href="2017/01/21/Ubuntu%E7%9A%84apache2%E9%85%8D%E7%BD%AEPHP%E4%B8%8D%E8%83%BD%E8%BF%90%E8%A1%8C%E9%97%AE%E9%A2%98/"/>
      <url>2017/01/21/Ubuntu%E7%9A%84apache2%E9%85%8D%E7%BD%AEPHP%E4%B8%8D%E8%83%BD%E8%BF%90%E8%A1%8C%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>好久没写过了，在总算考完试并且获得一堆烂成绩后，是时候要回归到学习自己的兴趣点</p><p>并且填补一下基础</p><p>首先记录一下这个问题吧</p><h3 id="Ubuntu中配置好apache2后php代码没执行"><a href="#Ubuntu中配置好apache2后php代码没执行" class="headerlink" title="Ubuntu中配置好apache2后php代码没执行"></a>Ubuntu中配置好apache2后php代码没执行</h3><p>首先我是准备在虚拟机本地搭个sqli-labs来学习sql injection</p><p>因为在之前也搭过，所以应该没什么大问题</p><p>结果，就出现了一开始点setup databases时没有反应，即没有任何输出，但其他html元素均能正常显示</p><p>我这里配置是</p><p><code>ubuntu gnome 15.10</code></p><p><code>php5</code></p><p><code>apache2</code></p><p><code>mysql</code></p><p>简单来说，就是PHP代码根本就没有运行</p><p>此时查看网页源码也能看到php代码，其实还有另外一种情况是网页源码中根本就没有显示php代码</p><p>分类讨论下</p><p>ps：因为我没有学过多少web的内容，所以以下一些概念性的解释不一定正确，最好自己去搜一下，倘若有错误，还请指出。</p><ol><li><p><strong>网页源码根本看不到PHP代码</strong></p><p>这里我猜测是因为lamp没有装完整</p><p>首先，php要装上php-cgi，CGI<code>Common Gateway Interface</code>，通过这个借口，php程序可以对服务器和客户端交换信息做一些事情</p><p>另外，还有php-cli，这个是用于在命令行运行php脚本的</p><p>还有php-gd库，用于处理图像。在网站上GD库通常用来生成缩略图，或者用来对图片加水印，或者用来生成汉字验证码，或者对网站数据生成报表等。</p><p>另外，要链接数据库，还要装上相应的php的数据库支持，例如php-mysql</p><p>倘若还不能解决，可以参考一下这篇解答</p><p> <a href="http://stackoverflow.com/questions/3555681/why-are-my-php-files-showing-as-plain-text">http://stackoverflow.com/questions/3555681/why-are-my-php-files-showing-as-plain-text</a></p><blockquote><p>You’ll need to add this to your server configuration:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .php</span><br></pre></td></tr></table></figure><blockquote><p>that is assuming you have installed php properly, which may not be the case since it doesn’t work where it normally would immediately after installing.</p><p>It is entirely possible that you’ll also have to add the php so/dll to your apache config using a <code>LoadModule</code> directive (usually in <code>httpd.conf</code>)</p></blockquote></li><li><p><strong>网页源码中能看到PHP代码</strong></p><p>这个就可以参考这篇解答了</p><p><a href="http://askubuntu.com/questions/451708/php-script-not-executing-on-apache-server">http://askubuntu.com/questions/451708/php-script-not-executing-on-apache-server</a></p><blockquote><p>Typing:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2 php5 libapache2-mod-php5</span><br></pre></td></tr></table></figure><blockquote><p>will install everything you need and will start the apache server with support for PHP.</p><p>To verify that the php module is loaded, type:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a2query -m php5</span><br></pre></td></tr></table></figure><blockquote><p>if not enabled, then load with:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod php5</span><br></pre></td></tr></table></figure><blockquote><p>and restart apache:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><blockquote><p><strong>Update for php7.0, tested on Ubuntu 16.04 and 16.10</strong></p><p>Thanks to the comments, I update the answer for php7.</p><p>Install:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2 php7.0 libapache2-mod-php7.0 </span><br></pre></td></tr></table></figure><blockquote><p>Verify:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a2query -m php7.0</span><br></pre></td></tr></table></figure><blockquote><p>Load:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod php7.0</span><br></pre></td></tr></table></figure><blockquote><p>Restart apache:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><p>这个原因似乎是因为apache安装后默认还缺一个php的支持库</p><p>因为我就是这个原因，按照上面安装了libapache2-mod-php5后，嗨呀，一切正常了</p></li></ol><p>在配置过程中，apache2的默认根目录是<code>/var/www/html</code>，并不是以前的<code>/var/www</code>，当然，这个可以到配置文件中进行设置。</p><p>为了测试php代码是否正常执行，可以通过最简单的一个php脚本测试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">phpinfo(); </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>因为我并没有学过php，对于web服务器的配置也一知半解，所以在这个过程耗费了我好多的时间</p><p>不过，感谢网上各种大牛的帮助，也是解决了这个问题。</p><hr><h6 id="假期别颓啊喂，好好学习！！！"><a href="#假期别颓啊喂，好好学习！！！" class="headerlink" title="假期别颓啊喂，好好学习！！！"></a>假期别颓啊喂，好好学习！！！</h6>]]></content>
      
      
      <categories>
          
          <category> Study_Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> apache2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库坑之记录</title>
      <link href="2016/12/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9D%91%E4%B9%8B%E8%AE%B0%E5%BD%95/"/>
      <url>2016/12/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9D%91%E4%B9%8B%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>最近在忙各种神奇的大作业</p><ul><li>网络程序设计的聊天室</li><li>java的文件快速搜索工具</li><li>数据库学籍管理系统</li><li>数字图像的图像处理</li><li>排队论的建模分析</li></ul><p>神TM忙= =</p><p>期末真是九门功课同步学</p><p>这时涉及到数据库时遇到了一些坑，来总结下</p><p>数据库：Mysql</p><span id="more"></span><h2 id="网程大作业远程连接数据库时，连接不上"><a href="#网程大作业远程连接数据库时，连接不上" class="headerlink" title="网程大作业远程连接数据库时，连接不上"></a>网程大作业远程连接数据库时，连接不上</h2><p>这个首先要修改my.cnf文件，改bind-address  = 0.0.0.0</p><p>原来bind-address = localhost是不允许外部访问的</p><p>然后就是登陆的用户要允许远程登陆</p><p>再有一个坑就是！！！</p><p>腾讯云服务器默认安全组只开启22端口= =</p><p>到官网设置下安全组，不然你打死都不能远程连上数据库的</p><h2 id="数据库大作业批量导入数据"><a href="#数据库大作业批量导入数据" class="headerlink" title="数据库大作业批量导入数据"></a>数据库大作业批量导入数据</h2><p>这里用的是在win10中用load data local infile导入txt的数据</p><p>然后，他一直给我提示<code>Errcode: 2 - No such file or directory</code></p><p>各种谷歌、stackoverflow后都不出结果</p><p>首先是路径字符串中<code>\</code>要用<code>\\</code>，转义符嘛，都懂的</p><p>然后，还是打死都Errcode: 2</p><p>后来终于发现，因为我的路径中包含中文= =……</p><p>正确显示了，但蜜汁搜不到对应文件</p><p>然后就是路径中不含中文了，导入时给我报</p><p><code>Error Code: 1300. Invalid utf8 character string: &#39;ë&#39;</code></p><p>???尼克扬哦</p><p>这时我还不知道已经解决路径问题了</p><p>后来莫名想到这如果是路径没出问题，那就是内容出问题了</p><p>终于发现……数据是老师给的，包含中文</p><p>win下记事本这编码是GB2312……但读取是utf-8……</p><p>sublime打开……果然中文一堆乱码 : )</p><p>修改编码后……果然成功了woc</p><hr><h6 id="感谢mysql不杀之恩"><a href="#感谢mysql不杀之恩" class="headerlink" title="感谢mysql不杀之恩"></a>感谢mysql不杀之恩</h6>]]></content>
      
      
      <categories>
          
          <category> Study_Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编学习&amp;&amp;nasm使用&amp;&amp;调试</title>
      <link href="2016/11/06/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0-nasm%E4%BD%BF%E7%94%A8-%E8%B0%83%E8%AF%95/"/>
      <url>2016/11/06/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0-nasm%E4%BD%BF%E7%94%A8-%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了更好的做逆向，刚学了点汇编的知识，尽管在我们微机课上也会有教，但总有时会分心。而且，这些不自己实际操作下也是搞不懂的。</p><p>尽管在这之前我已近玩过一些逆向了，但更多的是单步调试，通过ida、OD等强大的功能飘过，一些细节并不清楚。所以必须要系统地学习汇编的知识。</p><p>这里我选择的书是王爽的《汇编语言(第三版)》，虽然这书讲的是8086的16位的汇编（啊喂，太过时了吧！），不过基本原理都是差不多的，既然那么多人推荐我也就不浪费时间在选择书上了。</p><h2 id="环境选择"><a href="#环境选择" class="headerlink" title="环境选择"></a>环境选择</h2><p>在王爽的书中，他教学使用的是masm，即是微软开发的汇编开发环境，然后通过dos下的debug来调试。</p><p>然而，debug这个调试器早在win7时已经没加入到windows系统中了</p><span id="more"></span><p>对于这个程序，描述是</p><blockquote><p>​    DOS Debug is an improved MS-DOS DEBUG command. There are two binaries available: the small and simple DEBUG.COM, which can debug DOS 16-bit real-mode applications only and DEBUGX.COM, which additionally can debug protected-mode DPMI applications, both 16-bit and 32-bit</p></blockquote><p>嗯……只能调试实模式下16位的程序和保护模式下16位、32位的程序……所以，要你何用！</p><p>然后就是masm了，masm只能在windows下用呀……而且看着感觉会略老旧（事实上微软是继续支持发展这个产品的），反正就是看着不想用。</p><p>这时我看到了nasm，这个一款基于80x86和x86-64平台的汇编语言编译程序，其设计初衷是为了实现编译器程序跨平台和模块化的特性。所以各平台都兼容的很好呀！关键是，他支持多种系统版本系统的文件生成，语法上还比masm简单……</p><p>以下是其支持输出的文件格式<img src="/2016/11/06/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0-nasm%E4%BD%BF%E7%94%A8-%E8%B0%83%E8%AF%95/汇编学习-nasm使用-调试/outputFile_zpsudht7pkw.jpg" alt="outputFile"></p><p>关键我还不用往我windows下装软件，我直接在Ubuntu上apt-get install nasm就好了！</p><h2 id="使用nasm"><a href="#使用nasm" class="headerlink" title="使用nasm"></a>使用nasm</h2><p>首先我找了这么一段汇编代码，效果是输出Hello world!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">section .text                                                                                                                                   </span><br><span class="line">global main</span><br><span class="line">main:</span><br><span class="line">    mov eax,4;</span><br><span class="line">    mov ebx,1;</span><br><span class="line">    mov ecx,message;</span><br><span class="line">    mov edx,14;</span><br><span class="line">    int 80h;</span><br><span class="line">    mov eax,1;</span><br><span class="line">    int 80h;</span><br><span class="line">message:</span><br><span class="line">db &quot;Hello world!&quot;,0ah,0dh</span><br></pre></td></tr></table></figure><p>跟masm语法有点不一样，在masm定义段还有<code>XXX segment...XXX ends</code> <code>assume cs:XXX...end</code></p><p>而在这只需要一个<code>section .text</code>，意思我还不太懂。这里定义的global main即在汇编中定义的main函数。</p><p>nasm我测试了这几条命令，感觉常用也就这个组合了。</p><p><code>nasm -f elf32 test.asm -o test.o     %生成32位elf的.o文件</code></p><p><code>nasm -f win32 test.asm -o test32.o     %生成32位windows的.o文件</code></p><p><code>nasm -f win64 test.asm -o test64.o     %生成64位windows的.o文件</code></p><p>通过file查看输出格式 <img src="/2016/11/06/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0-nasm%E4%BD%BF%E7%94%A8-%E8%B0%83%E8%AF%95/汇编学习-nasm使用-调试/fileType_zpsmo5ioh4y.jpg" alt="fileType"></p><p>这里很奇怪的是test64.o是data，看来是没有识别出来。</p><p>然后就可以通过<code>gcc -m32 test.o -o test</code>生成可执行文件test了(这里-m32是gcc在64位系统编译32位文件需要加的参数)</p><p> <img src="/2016/11/06/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0-nasm%E4%BD%BF%E7%94%A8-%E8%B0%83%E8%AF%95/汇编学习-nasm使用-调试/op_zps7liklweq.jpg" alt="op"></p><p>事实上这里gcc是起到一个链接器的作用，查阅得，所谓的gcc叫做gcc工具链，这个工具链包括很多工具，其中用于链接的叫做ld.用 gcc链接时会根据选项不同调用不同的工具，如果到了链接阶段就会调用ld这个工具。所以事实上这里要用ld这个工具呀。</p><h2 id="调试演示"><a href="#调试演示" class="headerlink" title="调试演示"></a>调试演示</h2><p>然后就是调试了，抛弃了debug这个陈旧的东西，我们还有很多强大的调试器选择</p><p>例如win下的OllyDbg、IDA PRO，还有gdb</p><p>这里gdb推荐github上的一个配置文件<code>peda</code>，这个配置文件很强大，不需要另外装别的插件，似乎是玩pwn的好工具啊。</p><h4 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h4><p><img src="/2016/11/06/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0-nasm%E4%BD%BF%E7%94%A8-%E8%B0%83%E8%AF%95/汇编学习-nasm使用-调试/Ubuntu15.10-2016-11-06-23-34-49_zpslku1vnhc.png" alt="Ubuntu15.10-2016-11-06-23-34-49"></p><p>然后我把那两个win下的.o文件拖到windows下同样原理用gcc编译了一下，并用OD和IDA调试</p><h4 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h4><p>这里只用IDA演示调试64位的<img src="/2016/11/06/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0-nasm%E4%BD%BF%E7%94%A8-%E8%B0%83%E8%AF%95/汇编学习-nasm使用-调试/ida_zpsa0iyohkd.jpg" alt="ida"></p><h4 id="OllyDbg"><a href="#OllyDbg" class="headerlink" title="OllyDbg"></a>OllyDbg</h4><p>OD调试的是32位的</p><p><img src="/2016/11/06/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0-nasm%E4%BD%BF%E7%94%A8-%E8%B0%83%E8%AF%95/汇编学习-nasm使用-调试/OD_zpsct2lubdk.jpg" alt="OD"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看起来很简单，但实际上还是遇到好多问题的，这里总结一下</p><ol><li>通过.asm编译出来的.o文件必须要通过链接器生成可执行文件，这里链接器实际上用的是ld，gcc只是提供了一个工具的入口。</li><li>在64位的系统下链接生成32位的程序需要加-m32 <em>(gcc)</em>参数或 -mi386pe <em>(ld on win)</em>的参数。</li><li>在windows下用gcc链接可能会出现各种奇怪的错误，例如找不到msvcrt.dll文件（然而我确定过我电脑有……）（至少我在我的64位win下用gcc链接32位.o是没成功）</li><li>因为我上面汇编代码没有改过，在windows下中断指令不是<code>int 80h</code>，所以事实上上面编译生成的可执行文件在windows下运行时是崩溃的。</li><li>因为我才刚看怎么写汇编，上面汇编代码是我从网上找的，对于nasm的一些语法并不清楚，所以上面的代码可能极其极其不规范！做参考的话请谨慎~</li></ol><hr><p><small><em>蜜汁觉得思路清晰了很多呢</em></small></p>]]></content>
      
      
      <categories>
          
          <category> Study_Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> nasm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016 L-ctf神奇的压缩文件</title>
      <link href="2016/10/11/L-ctf%E7%A5%9E%E5%A5%87%E7%9A%84%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/"/>
      <url>2016/10/11/L-ctf%E7%A5%9E%E5%A5%87%E7%9A%84%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>L-ctf是由xdsec办的ctf比赛，由学生出题</p><p>不得不说，dalao们是在是太强了Orz</p><p>又受到了深深的碾压。。。太懒了。国庆的比赛现在才来写</p><p>简单说下简单的android题</p><p>那题android题是很简单的混淆处理，对字符串进行变换，可在调试中直接看到变换后的值。</p><p>然后变换后的字符串做秘钥，对输入信息AES加密，与固定的byte[]比较，得出flag。</p><hr><p>这里就说下让我学得比较多的一题吧~（因为别的题都没做出，有空要刷出来！！！）</p><p>这题名叫神奇的压缩文件，一个428k的压缩文件，解压出来只有一个19字节的txt文件。</p><p>此时，我就是尼克扬问号？？？</p><p>说实话，要不是题目提示（ntfs文件流），我tmd就卡在这一步了，再Orz下dalao们的知识面</p><span id="more"></span><p>简单来说，ntfs数据流就是可以在宿主文件背后关联数据流文件，这个宿主文件可以是各种普通文件。而winrar这个压缩程序还能压缩ntfs数据流。</p><p>因为网上介绍的文章已经很多，我就不赘述了。<br>[NTFS文件流的特性以及实现原理讨论]: <a href="http://www.cnblogs.com/nevergone/archive/2013/04/08/3009173.html">http://www.cnblogs.com/nevergone/archive/2013/04/08/3009173.html</a></p><p>解压出来的txt内容是”Flag.zip behind me.”</p><p>在cmd可以用winrar访问<code>misc150.txt:Flag.zip</code>打开Flag.zip</p><p>然后我第一想法就是先解压出来啦！ <img src="/2016/10/11/L-ctf%E7%A5%9E%E5%A5%87%E7%9A%84%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/L-ctf神奇的压缩文件/1_zps15mtxgoq.jpg" alt="1"></p><p>然而，直接解压会提示<code>文件名、目录名或卷标语法不正确。</code></p><p>蛋痛……这应该是因为那个冒号的原因，于是我转为自解压格式，把文件名中的冒号去掉了，这才成功。</p><p>如你所见，压缩包中有<code>Steins;Gate.zip</code>和<code>Christina.jpg</code>两个文件，其中那个zip里是这样的 <img src="/2016/10/11/L-ctf%E7%A5%9E%E5%A5%87%E7%9A%84%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/L-ctf神奇的压缩文件/2_zpsm2jfo2rn.jpg" alt="2"></p><p>然后droste.zip里面包含着droste.zip和dorste.jpg，里面的droste.zip里又包含着droste.zip和dorste.jpg，里里面的droste.zip又又包含……………………无穷无尽！</p><p>google了下droste，意思就是图中图又包含图的内容那种，类似下面这图</p><p><img src="L-ctf神奇的压缩文件\http://rescdn.qqmail.com/dyimg/20140319/7A6523C087A9.jpg" alt="droste"></p><p>所以……这个压缩包无穷无尽咯……</p><p>后来我网上搜到了droste.zip的原版压缩包，这个压缩包可以一直解压直到你的硬盘被占满！（害怕.jpg）</p><p>把这个压缩包下下来了，我二进制对比了下比赛中得到的droste.zip，发现一毛一样！</p><p>所以flag不在这咯，然后去看看Christina.jpg吧……</p><p>接着，我用了stegdetect、ps、google搜图、百度搜图……</p><p>毫无收获，甚至我还特意去了解了下命运石之门的剧情！（holy shit！）</p><p>还试了下什么鬼世界线变动率那个数……全部gg</p><p>啊喂！傻逼吗！后来看了writeup才知道怎么做</p><p>提示里明明都写明了flag不在压缩包里！</p><p>大家注意到一开始Flag.zip旁边xdsec的注释了吗？</p><p><img src="/2016/10/11/L-ctf%E7%A5%9E%E5%A5%87%E7%9A%84%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/L-ctf神奇的压缩文件/1_zps15mtxgoq.jpg" alt="1"></p><p>hello和XDSEC中间有蜜汁的三行……</p><p>这三行……是很迷的tab和空格的组合</p><p> <img src="/2016/10/11/L-ctf%E7%A5%9E%E5%A5%87%E7%9A%84%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/L-ctf神奇的压缩文件/3_zpscujkdrrx.jpg" alt="3"></p><p>然后把tab变1，空格变0，得到01序列……</p><p>数了数，有98个，7个一组，正好分成14组……</p><p>转换成ascii码……（因为ascii码第一位都是0）</p><p>得到flag……</p><p><code>lctf&#123;6d3677dd&#125;</code></p><p>嗯……内心很凌乱……dalao们比我叼，脑洞还比我大……</p><p>还有另一种方法是通过Ultra edit等软件，查看包数据也能发现问题。在这一部分有规律的 0x09 ， 0x20 ，将其提取出来，替换一下也能得到flag……</p><p>dalao……你们屌……</p><p>不过这样一来真的能学到很多，长很多见识！真是很棒的！</p><p>另外，我想去刷下命运石之门了2333333</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滴滴!!!学生卡</title>
      <link href="2016/09/23/%E6%BB%B4%E6%BB%B4-%E5%AD%A6%E7%94%9F%E5%8D%A1/"/>
      <url>2016/09/23/%E6%BB%B4%E6%BB%B4-%E5%AD%A6%E7%94%9F%E5%8D%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="WTF？？？"><a href="#WTF？？？" class="headerlink" title="WTF？？？"></a>WTF？？？</h2><p>距离上一篇讲述破解forest的文章已经一个半月了，为什么作者还不更？？？</p><p>复古一下就是我等得花儿都谢了</p><p>于是我社工了作者的电脑，添加上这篇文章！好让咸鱼的作者看到后能反省自己！</p><p>哼哼，你好自为之吧！</p><p>——From giglf 的第二人格</p><hr><h2 id="你出去！"><a href="#你出去！" class="headerlink" title="你出去！"></a>你出去！</h2><p>我的电脑怎么能随意被社工的，在我的保护下必然是固若金汤！</p><p>After cracking forest. 新学期开学，一波又一波实验滚来，告别周末的doge</p><p>然而学习还是要继续，最近接触到许多dalao，打了几个比赛，做了几道android逆向题</p><p>发现……马格鸡自己学的都是啥嘛(╯‵□′)╯︵┻━┻</p><p>有种逆向叫 只会看反编译代码，脑海debug</p><p>所以，最近遇到一些简单题都不写writeup啦，等遇到一些思路新颖的，涉及到不同的技术再来</p><p>详细剖析一下（当然还得比较空闲的时间）</p><p>潜心治学，彩笔该滚粗了</p><p>——From 赶跑了没钱交房租的giglf的第二人格的giglf的第一人格</p><hr><h6 id="盐缸还是得放在干燥的地方，不然咸鱼会变臭的"><a href="#盐缸还是得放在干燥的地方，不然咸鱼会变臭的" class="headerlink" title="盐缸还是得放在干燥的地方，不然咸鱼会变臭的"></a>盐缸还是得放在干燥的地方，不然咸鱼会变臭的</h6>]]></content>
      
      
      <categories>
          
          <category> 感想or发疯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随便写写啦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android APP破解--Forest3.6.2</title>
      <link href="2016/08/11/Android-APP%E7%A0%B4%E8%A7%A3-Forest3-6-2/"/>
      <url>2016/08/11/Android-APP%E7%A0%B4%E8%A7%A3-Forest3-6-2/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>​    为什么会想去破解这个app呢？正所谓有需求才有生产……</p><p>​    这一切都要从上个学期期末那个抽烟种树喝洗脚水的日子讲起……</p><p>（往事不堪回首，此处省略一个里约奥运碧池的苦水）</p><p>​    所以，其实forest的用处就是让你离开手机，设定种树时间，如果你在这个时间中打开了别的app，微信啊、QQ啊，总之如果你玩了手机，那么你的树就会死掉。<img src="/2016/08/11/Android-APP%E7%A0%B4%E8%A7%A3-Forest3-6-2/Android-APP破解-Forest3-6-2/1_zpsu0bg5zgn.jpg" alt="1"></p><p>​    <span id="more"></span></p><p>​    好啊，所以这个app为什么要破解呢？因为解锁后可以关注好友，单机模式种树一点意思都没有啊！ <img src="/2016/08/11/Android-APP%E7%A0%B4%E8%A7%A3-Forest3-6-2/Android-APP破解-Forest3-6-2/620032545567660226_zps4lh97gjj.jpg" alt="620032545567660226"></p><p>​    但是，解锁需要0.99刀，对应着6rmb，6rmb买一个好的app也是不错的，但是。。。支付方式只有通过Google账号，PayPal没有绑定卡，而GooglePlay礼品卡最小面值是10刀，在淘宝卖60+，当然，也有另外的办法，借用别人已解锁的Google账号登陆，app自然也成解锁的了。</p><p>​    除此之外还有另外一个功能的解锁，同样也需要0.99刀，方法一样，不过这个功能具体怎么样我还没用过，最重要还是先加波好友。</p><p>​    而对于iOS用户……直接Apple Store付款就好了……</p><p>​    之前我借了别人已解锁的账号，解锁，但昨晚刷了一次机，数据全空了，重新下回这个app也变回了未解锁状态。</p><p>​    刚好这几天也在看关于Android逆向的知识，让我产生了破解的念头。</p><p>​    （有条件的人还是付款好啊T_T，毕竟app开发也不容易）</p><h2 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><p>​    根据这个app，在解锁页面应该是调用相应的API支付，那么支付应该会有个支付是否成功的函数，那只需要定位到这个函数，把无论是否成功都返回true就好了。（然而我事实上不是用这种方式，具体见后面）</p><p>​    通过DDMS输出的log，可以发现在触发支付页面时，出现了一个有关</p><p><code>MoreFeaturesViewController</code>的log，然后我就可以到反编译出来的工程中搜索这个类。</p><p> <img src="/2016/08/11/Android-APP%E7%A0%B4%E8%A7%A3-Forest3-6-2/Android-APP破解-Forest3-6-2/2_zpsdfeg1o4e.jpg" alt="2"></p><h2 id="0x02-查看源码"><a href="#0x02-查看源码" class="headerlink" title="0x02 查看源码"></a>0x02 查看源码</h2><p>​    这里看到个很神奇的地方，就是安装上是用GooglePlay支付，但在源码中我却发现了支付宝、微信支付的接口，不知道怎么才能触发，显然这更适合国内的用户支付。</p><p> <img src="/2016/08/11/Android-APP%E7%A0%B4%E8%A7%A3-Forest3-6-2/Android-APP破解-Forest3-6-2/3_zps7srjwyog.jpg" alt="3"></p><p> <img src="/2016/08/11/Android-APP%E7%A0%B4%E8%A7%A3-Forest3-6-2/Android-APP破解-Forest3-6-2/4_zpsz4uw9lx7.jpg" alt="4"></p><p>​    在微信支付中，我看到了一下接口，但安装的APP触发的不是微信支付，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">succeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Log.wtf(<span class="string">&quot;MoreFeaturesViewController&quot;</span>, MoreFeaturesViewController.<span class="keyword">this</span>.selectedSku + <span class="string">&quot; 支付成功!&quot;</span>);</span><br><span class="line">MoreFeaturesViewController.<span class="keyword">this</span>.setupUnlockedSku(MoreFeaturesViewController.<span class="keyword">this</span>.selectedSku);</span><br><span class="line">MoreFeaturesViewController.<span class="keyword">this</span>.hideDialog();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在这里看到一个FeaturesManager的类，用过这个app就知道feature对应各种可解锁出来的特性。 <img src="/2016/08/11/Android-APP%E7%A0%B4%E8%A7%A3-Forest3-6-2/Android-APP破解-Forest3-6-2/5_zpsoipnlglm.jpg" alt="5"></p><p>​    进入到FeatureManager这个类，可以看到构造函数中初始化了很多东西，其中便有关键的三个getIsASUnlocked、getIsCTUnlocked、setLocked<img src="/2016/08/11/Android-APP%E7%A0%B4%E8%A7%A3-Forest3-6-2/6_zpscjhy2hlv.jpg" alt="6"></p><p>​    分析代码，当getIsCTUnlocked函数返回true，setLocked就是false。</p><p>​    于是，从前更改支付是否成功的方法改了，我们直接在他预设中setLock设置为true就可以了，或者我们进入到getIsCTUnlocked函数中强制返回true。</p><h2 id="0x03-修改源码"><a href="#0x03-修改源码" class="headerlink" title="0x03 修改源码"></a>0x03 修改源码</h2><p>​    这里我选择了第二种，因为并不清楚是否在别的地方还调用了getIsCTUnlocked这个函数，更改这个函数也更彻底。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getIsASUnlocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getBoolean(<span class="string">&quot;pro_version&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getIsCTUnlocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getBoolean(<span class="string">&quot;customizable_tags&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是这两个函数，我们在smali代码中直接改为return true就可以了。</p><p>​    对应samli代码</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span> getIsASUnlocked()Z</span><br><span class="line"><span class="keyword">    .locals</span> 2</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 29</span><br><span class="line">   <span class="built_in"> const-string </span>v0, <span class="string">&quot;pro_version&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> const/4 </span>v1, 0x0</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;p0, v0, v1&#125;, <span class="class">Lcc/forestapp/tools/coredataUtil/MFDataManager;</span>-&gt;getBoolean(<span class="class">Ljava/lang/String;</span>Z)Z</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> move-result </span>v0</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> const/4 </span>v0, 0x1  <span class="comment">#插入这句，即吧v0赋值0x1，即是true</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> return </span>v0</span><br><span class="line"><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span> getIsCTUnlocked()Z</span><br><span class="line"><span class="keyword">    .locals</span> 2</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 33</span><br><span class="line">   <span class="built_in"> const-string </span>v0, <span class="string">&quot;customizable_tags&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> const/4 </span>v1, 0x0</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;p0, v0, v1&#125;, <span class="class">Lcc/forestapp/tools/coredataUtil/MFDataManager;</span>-&gt;getBoolean(<span class="class">Ljava/lang/String;</span>Z)Z</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> move-result </span>v0</span><br><span class="line">    </span><br><span class="line">   <span class="built_in"> const/4 </span>v0, 0x1  <span class="comment">#插入这句，即吧v0赋值0x1，即是true</span></span><br><span class="line">    </span><br><span class="line">   <span class="built_in"> return </span>v0</span><br><span class="line"><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure><p>保存，重编译，打包签名~~~</p><p>安装发现，解锁成功！！！</p><p> <img src="/2016/08/11/Android-APP%E7%A0%B4%E8%A7%A3-Forest3-6-2/Android-APP破解-Forest3-6-2/601893834074608656_zpseda5oae9.jpg" alt="601893834074608656"></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>​    嗯……破解成功成就感真的很大啊啊啊，不过破解成功的apk就不上传了，人家开发也不容易嘛~，要的来私戳我。</p><p>​    原apk是通过Android downloader下载的，应该是GooglePlay上的原版吧。</p><p>​    其实过程不难，但真的很很很很有趣啊啊啊啊啊，而且第一次成就感炒鸡大，感觉get到了一项新技能。</p><p>​    另外，其实查看源码时会发现一些很有趣的东西，似乎app会根据某些参数来判断是给你调用GooglePlay或是支付宝或是微信的支付界面，还没发现是怎么样的，而目前我所知道的从GooglePlay下载的全是调用GooglePlay的支付。</p><p>​    嗯嗯，就是酱紫~</p><p>​    </p><hr><h5 id="PS：本博客已改用多说评论，支持微信、qq登陆，对国内用户更加友好了。"><a href="#PS：本博客已改用多说评论，支持微信、qq登陆，对国内用户更加友好了。" class="headerlink" title="PS：本博客已改用多说评论，支持微信、qq登陆，对国内用户更加友好了。"></a>PS：本博客已改用多说评论，支持微信、qq登陆，对国内用户更加友好了。</h5>]]></content>
      
      
      <categories>
          
          <category> Android-App破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全国大学生信息安全竞赛初赛_对称密码1</title>
      <link href="2016/07/29/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9B-%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%811/"/>
      <url>2016/07/29/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9B-%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%811/</url>
      
        <content type="html"><![CDATA[<p>这次比赛我一共做了3题，一题就是之前写的珍贵资料</p><p>一题是这个密码学的</p><p>还有题是摩斯电码+栅栏加密，这题太简单就不写了</p><p>这题是对称密码1</p><h2 id="对称密码1"><a href="#对称密码1" class="headerlink" title="对称密码1"></a>对称密码1</h2><p>题目链接：<a href="http://www.ichunqiu.com/racing/54391">http://www.ichunqiu.com/racing/54391</a></p><p>下载下来是一个.c的文件</p><p>编译运行可以看到以十六进制分别输出三个例子的明文、密文、恢复出来的明文</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PlainLen32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KeyLen16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EncRound8</span></span><br></pre></td></tr></table></figure><p>以上是需要知道的信息，明文长度已知</p><span id="more"></span><p>则我们需要知道的是秘钥的长度，加密次数</p><h6 id="注意：直接进行全局密钥空间穷举的解题方法，将被判定无效，得分在最终结果中将被扣除。"><a href="#注意：直接进行全局密钥空间穷举的解题方法，将被判定无效，得分在最终结果中将被扣除。" class="headerlink" title="注意：直接进行全局密钥空间穷举的解题方法，将被判定无效，得分在最终结果中将被扣除。"></a>注意：直接进行全局密钥空间穷举的解题方法，将被判定无效，得分在最终结果中将被扣除。</h6><p>题目中包含了这个，也就不能直接爆破，其实题目里还有一句提示：</p><h5 id="参照smaple1"><a href="#参照smaple1" class="headerlink" title="参照smaple1"></a>参照smaple1</h5><p>所以我们看一下sample1</p><p>得到信息：1.加密次数1次  2.秘钥“Start”</p><p>所以，我刚开始的思路是秘钥为“End”、“Finish”、“Begin”</p><p>结果……显然都不对，还是太蠢了（捂脸）</p><p>好吧，在继续看，我们注意到，三个例子都是flag{XXXXXXXX}</p><p>最后我们也是要得到flag{XXXXXXXXX}</p><p>所以我们就知道了f,l,a,g,{,}对应的密文，再加上已知加密函数，我们就可以推出一部分秘钥了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f     l     a     g     &#123;      XXXXXXXXXXXXXXXXXXX       &#125;</span><br><span class="line"><span class="number">0x66</span>  <span class="number">0x6c</span>  <span class="number">0x61</span>  <span class="number">0x67</span>  <span class="number">0x7B</span>                             <span class="number">0x7D</span></span><br><span class="line"><span class="number">0x83</span>  <span class="number">0x44</span>  <span class="number">0xD1</span>  <span class="number">0x66</span>  <span class="number">0xA8</span>                       <span class="number">0x40</span>  <span class="number">0x84</span> </span><br><span class="line">cipher[<span class="number">0</span>] = sbox[(<span class="keyword">unsigned</span> <span class="keyword">char</span>) (key[<span class="number">0</span>]^plain[<span class="number">0</span>]^key[<span class="number">1</span>])]     <span class="number">0x83</span></span><br><span class="line">cipher[<span class="number">1</span>] = sbox[(<span class="keyword">unsigned</span> <span class="keyword">char</span>) (cipher[<span class="number">0</span>]^plain[<span class="number">1</span>]^key[<span class="number">2</span>])]  <span class="number">0x44</span></span><br><span class="line">cipher[<span class="number">2</span>] = sbox[(<span class="keyword">unsigned</span> <span class="keyword">char</span>) (cipher[<span class="number">1</span>]^plain[<span class="number">2</span>]^key[<span class="number">3</span>])]  <span class="number">0xD1</span></span><br><span class="line">cipher[<span class="number">3</span>] = sbox[(<span class="keyword">unsigned</span> <span class="keyword">char</span>) (cipher[<span class="number">2</span>]^plain[<span class="number">3</span>]^key[<span class="number">4</span>])]  <span class="number">0x66</span></span><br><span class="line">cipher[<span class="number">4</span>] = sbox[(<span class="keyword">unsigned</span> <span class="keyword">char</span>) (cipher[<span class="number">3</span>]^plain[<span class="number">4</span>]^key[<span class="number">5</span>])]  <span class="number">0xA8</span></span><br><span class="line">cipher[<span class="number">44</span>] = sbox[(<span class="keyword">unsigned</span> <span class="keyword">char</span>) (cipher[<span class="number">43</span>]^plain[<span class="number">45</span>]^key[??])] <span class="number">0x84</span></span><br></pre></td></tr></table></figure><p>按照这个写出程序可得部分秘钥</p><p>并且测试出秘钥长度为6，秘钥后四位为iter，前两位不知</p><p>只有两位不知，大小写加起来52*52爆破也就2704种情况</p><p>并且筛选出解密出来第一位为f的情况，写程序破解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---------- caculate answer ------------\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> round 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> problemkeylen strlen(guesskey)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ansplainlen 45</span></span><br><span class="line"><span class="keyword">char</span>  problem_cipher[] = &#123;</span><br><span class="line"><span class="number">0x83</span>,<span class="number">0x44</span>,<span class="number">0xD1</span>,<span class="number">0x66</span>,<span class="number">0xA8</span>,<span class="number">0x19</span>,<span class="number">0xC0</span>,<span class="number">0x57</span>,</span><br><span class="line"><span class="number">0xFC</span>,<span class="number">0xB0</span>,<span class="number">0x8D</span>,<span class="number">0xCD</span>,<span class="number">0x4B</span>,<span class="number">0x2C</span>,<span class="number">0x75</span>,<span class="number">0x43</span>,</span><br><span class="line"><span class="number">0x1A</span>,<span class="number">0x7C</span>,<span class="number">0xF5</span>,<span class="number">0xBF</span>,<span class="number">0x97</span>,<span class="number">0x5C</span>,<span class="number">0xA0</span>,<span class="number">0xE7</span>,</span><br><span class="line"><span class="number">0x74</span>,<span class="number">0x10</span>,<span class="number">0xAD</span>,<span class="number">0x7A</span>,<span class="number">0xDA</span>,<span class="number">0x68</span>,<span class="number">0xB6</span>,<span class="number">0xA9</span>,</span><br><span class="line"><span class="number">0x6C</span>,<span class="number">0xB1</span>,<span class="number">0x06</span>,<span class="number">0x67</span>,<span class="number">0x10</span>,<span class="number">0xF0</span>,<span class="number">0xF8</span>,<span class="number">0x03</span>,</span><br><span class="line"><span class="number">0x59</span>,<span class="number">0x1B</span>,<span class="number">0x67</span>,<span class="number">0x40</span>,<span class="number">0x84</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> guesskey[] = <span class="string">&quot;00iter&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> ans[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> i=<span class="string">&#x27;A&#x27;</span>;i&lt;=<span class="string">&#x27;Z&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="string">&#x27;a&#x27;</span>;j&lt;=<span class="string">&#x27;z&#x27;</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">guesskey[<span class="number">0</span>]=i;</span><br><span class="line">guesskey[<span class="number">1</span>]=j;</span><br><span class="line"><span class="built_in">Decrypt</span>(problem_cipher, ansplainlen, ans, guesskey, problemkeylen, round);</span><br><span class="line"><span class="keyword">if</span>(ans[<span class="number">0</span>]==<span class="string">&#x27;f&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ShowHex</span>(ans,ansplainlen);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ansplainlen;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;     %s&quot;</span>,guesskey);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2016/07/29/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9B-%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%811/全国大学生信息安全竞赛初赛-对称密码1/1_zpsh7p2k3wu.jpg" alt="1"></p><p>从结果看出来筛选出的第二个显然就是flag了</p><p>（别问我为什么(￣ε(#￣)☆╰╮(￣▽￣///)）</p><p>所以答案就是flag{Congradulations_You_made_the_first_step}</p><p>对应秘钥为Beiter （所以这是什么鬼）</p><p>不得不说，这么想出来成就感好高哈哈哈哈哈哈哈哈（此处为豪迈的笑声）</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> 全国大学生信息安全竞赛初赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全国大学生信息安全竞赛初赛_珍贵资料</title>
      <link href="2016/07/26/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9B_%E7%8F%8D%E8%B4%B5%E8%B5%84%E6%96%99/"/>
      <url>2016/07/26/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9B_%E7%8F%8D%E8%B4%B5%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<p>忙着考试、做各种东西、拖着拖着就半个月了(ノಠ益ಠ)ノ彡┻━┻</p><p>这篇是全国大学生信息安全竞赛初赛珍贵资料的writeup</p><p>第一次参加这种比赛起码还是做出了一道200分的题，然而还是自己太弱</p><p>可惜一堆咸鱼忙着期末考试，最终没能进到复赛（不能去上海玩啊擦擦擦擦）</p><p>好了，进入正题吧= =</p><h2 id="珍贵资料"><a href="#珍贵资料" class="headerlink" title="珍贵资料"></a>珍贵资料</h2><p>题目链接：<a href="http://www.ichunqiu.com/racing/54391">http://www.ichunqiu.com/racing/54391</a></p><p>压缩包解压出来两个文件</p><p>unknown  unknown2</p><p>通过工具易知（例如ida），unknown2是apk文件， 而unknown刚开始我并不知道是什么</p><p>通过文件头可以Google出来</p><p> <img src="/2016/07/26/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9B_%E7%8F%8D%E8%B4%B5%E8%B5%84%E6%96%99/全国大学生信息安全竞赛初赛_珍贵资料/1_zps2em03ay5.jpg" alt="1"></p><p>这是一个android的备份文件</p><span id="more"></span><p>apk安卓类的逆向，先apktool反编译下，装上虚拟机或真机调试</p><p> <img src="/2016/07/26/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9B_%E7%8F%8D%E8%B4%B5%E8%B5%84%E6%96%99/全国大学生信息安全竞赛初赛_珍贵资料/2_zpsrb6a9phk.jpg" alt="2"></p><p>直接点击登录会出现提示</p><p> <img src="/2016/07/26/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9B_%E7%8F%8D%E8%B4%B5%E8%B5%84%E6%96%99/全国大学生信息安全竞赛初赛_珍贵资料/3_zpsmtc5teup.jpg" alt="3"></p><p>所以就是需要找出password是什么</p><p>可以定位代码到LoginActivity.class </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SharedPreferences sp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View paramAnonymousView)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">        LoginActivity.<span class="keyword">this</span>.userNameValue = LoginActivity.<span class="keyword">this</span>.userName.getText().toString();</span><br><span class="line">        LoginActivity.<span class="keyword">this</span>.passwordValue = LoginActivity.<span class="keyword">this</span>.encode(LoginActivity.<span class="keyword">this</span>.password.getText().toString());</span><br><span class="line">        <span class="keyword">if</span> ((LoginActivity.<span class="keyword">this</span>.userNameValue.equals(LoginActivity.<span class="keyword">this</span>.sp.getString(<span class="string">&quot;USER_NAME&quot;</span>, <span class="string">&quot;&quot;</span>))) &amp;&amp; (LoginActivity.<span class="keyword">this</span>.passwordValue.equals(LoginActivity.<span class="keyword">this</span>.sp.getString(<span class="string">&quot;PASSWORD&quot;</span>, <span class="string">&quot;&quot;</span>))))</span><br><span class="line">        &#123;</span><br><span class="line">          Toast.makeText(LoginActivity.<span class="keyword">this</span>, <span class="string">&quot;登录成功&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">          paramAnonymousView = <span class="keyword">new</span> Intent(LoginActivity.<span class="keyword">this</span>, LogoActivity.class);</span><br><span class="line">          LoginActivity.<span class="keyword">this</span>.startActivity(paramAnonymousView);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Toast.makeText(LoginActivity.<span class="keyword">this</span>, <span class="string">&quot;登录失败&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>输入的用户密码跟存在sharepreference里的账户密码做比较</p><p>密码的加密算法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Encryption</span><span class="params">(String paramString)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    StringBuilder localStringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">if</span> ((paramString == <span class="keyword">null</span>) || (paramString.length() &lt; <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;you Input nothing.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    paramString = paramString.toLowerCase();</span><br><span class="line">    <span class="keyword">int</span> m = paramString.length();</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (k &gt;= m) &#123;</span><br><span class="line">        <span class="keyword">return</span> localStringBuilder.toString();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> j = <span class="string">&quot;ijklmstuvwxyz0123abcdenopqrfgh456789&quot;</span>.indexOf(paramString.charAt(k));</span><br><span class="line">      <span class="keyword">int</span> i = j;</span><br><span class="line">      <span class="keyword">if</span> (j == LEN - <span class="number">1</span>) &#123;</span><br><span class="line">        i = -<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      j = i;</span><br><span class="line">      <span class="keyword">if</span> (i == LEN - <span class="number">2</span>) &#123;</span><br><span class="line">        j = -<span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      i = j;</span><br><span class="line">      <span class="keyword">if</span> (j == LEN - <span class="number">3</span>) &#123;</span><br><span class="line">        i = -<span class="number">3</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      localStringBuilder.append(<span class="string">&quot;ijklmstuvwxyz0123abcdenopqrfgh456789&quot;</span>.charAt(i + <span class="number">3</span>));</span><br><span class="line">      k += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>对于安卓备份文件恢复</p><p>用adb restore file命令，在设备上点击恢复，不需要输入密码</p><p>adb shell在<code>/data/data/com.example.login/shared_prefs</code>中可以找到存储用户信息的xml文件userInfo.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27; standalone=&#x27;yes&#x27; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;PASSWORD&quot;</span>&gt;</span>dudqlvqrero1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;USER_NAME&quot;</span>&gt;</span>user<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到加密后的password = dudqlvqrero1</p><p>针对加密算法，写出解密程序（其实那就是一个偏移3位的凯撒加密）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--coding:utf-8--</span></span><br><span class="line"></span><br><span class="line">password = <span class="string">&#x27;dudqlvqrero1&#x27;</span></span><br><span class="line">str1 = <span class="string">&#x27;ijklmstuvwxyz0123abcdenopqrfgh456789&#x27;</span></span><br><span class="line">LEN = <span class="built_in">len</span>(str1)</span><br><span class="line">ans = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> password:</span><br><span class="line">i = str1.find(c)</span><br><span class="line">i -= <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> i == -<span class="number">3</span>:</span><br><span class="line">j = LEN - <span class="number">3</span></span><br><span class="line"><span class="keyword">elif</span> i == -<span class="number">2</span>:</span><br><span class="line">j = LEN -<span class="number">2</span></span><br><span class="line"><span class="keyword">elif</span> i == -<span class="number">1</span>:</span><br><span class="line">j = LEN - <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">j = i</span><br><span class="line">ans += str1[j]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><p>得出 flag = amanisnobody</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 全国大学生信息安全竞赛初赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reversing.kr_ImagePic Write up</title>
      <link href="2016/06/14/reversing-kr-ImagePic-Write-up/"/>
      <url>2016/06/14/reversing-kr-ImagePic-Write-up/</url>
      
        <content type="html"><![CDATA[<p>题目地址：<a href="http://reversing.kr/challenge.php">http://reversing.kr/challenge.php</a></p><p>ImagePic</p><p>这题很有趣的样子，然后我一开始居然没看懂他给的程序是干嘛的！！！</p><p>首先吧，打开程序</p><p> <img src="/2016/06/14/reversing-kr-ImagePic-Write-up/1_zpshcdjeays.jpg" alt="1"></p><p>excuse me？？？</p><p> <img src="/2016/06/14/reversing-kr-ImagePic-Write-up/3_zps8tzbolwt.jpg" alt="3"></p><p>原来白色的地方是可以用鼠标画东西的，然后check看看对不对</p><span id="more"></span><p>OD调试看看，在MessageBoxA下断点，跟踪到这一步  <img src="/2016/06/14/reversing-kr-ImagePic-Write-up/4_zpseslluvhh.jpg" alt="4"></p><p>往上看，看到FindResourceA 、LoadResource、LockResource三个函数</p><p>但我并不知道这是干嘛的，只好去查查了</p><h5 id="FindResourceA"><a href="#FindResourceA" class="headerlink" title="FindResourceA"></a>FindResourceA</h5><blockquote><p>Determines the location of a resource with the specified type and name in the specified module.</p><p>If the function succeeds, the return value is a handle to the specified resource’s information block. To obtain a handle to the resource, pass this handle to the <a href="reversing-kr-ImagePic-Write-up\https://msdn.microsoft.com/zh-cn/library/windows/desktop/ms648046(v=vs.85"><strong>LoadResource</strong></a>.aspx) function.</p><p>If the function fails, the return value is <strong>NULL</strong>. To get extended error information, call <a href="reversing-kr-ImagePic-Write-up\https://msdn.microsoft.com/zh-cn/library/windows/desktop/ms679360(v=vs.85"><strong>GetLastError</strong></a>.aspx).</p></blockquote><h5 id="LoadResource"><a href="#LoadResource" class="headerlink" title="LoadResource"></a>LoadResource</h5><blockquote><p>Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory.</p><p>If the function succeeds, the return value is a handle to the data associated with the resource.</p><p>If the function fails, the return value is <strong>NULL</strong>. To get extended error information, call <a href="reversing-kr-ImagePic-Write-up\https://msdn.microsoft.com/zh-cn/library/windows/desktop/ms679360(v=vs.85"><strong>GetLastError</strong></a>.aspx).</p></blockquote><h5 id="LockResource"><a href="#LockResource" class="headerlink" title="LockResource"></a>LockResource</h5><blockquote><p>Retrieves a pointer to the specified resource in memory.</p><p>If the loaded resource is available, the return value is a pointer to the first byte of the resource; otherwise, it is <strong>NULL</strong>.</p></blockquote><p>所以这三个函数是用来加载资源的，那加载的又是啥资源？？？</p><p>我们观察这一段循环</p><p> <img src="/2016/06/14/reversing-kr-ImagePic-Write-up/5_zpsnlyuawbt.jpg" alt="5"></p><p>从ecx和eax+ecx的地址偏移中取值比较，不同就调到004013CD，而这个地址就是Wrong的函数地址</p><p>到那两个地址看，发现是这样的一堆东西……<img src="/2016/06/14/reversing-kr-ImagePic-Write-up/6_zpsolmxp2cg.jpg" alt="6"></p><p>一大片ff中包含着小小的00</p><p>还好之前玩了下github的tinyrenderer，对图像也知道一些东西</p><p>这是图片数据块，FF对应RGB中的白色，而00就是黑色了</p><p>循环中把输入图存在程序中的图逐位比较，只有全部一样才正确（几万个字节显然手动画不出嘛= =）</p><p>这里就要借助工具了，先把eax+ecx中的图片数据提取出来，我这里用到了exeScope</p><p>提取出来就是图片的字节数据，需要解释为图片。且从结构体指针中得知该图片宽<em>高 = 200\</em>150</p><p>这里提供几个思路</p><p><u>1.直接二进制打开，加入文件头</u></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000 0200 0000 0000 0000 0000 c800 9600 1820</span><br></pre></td></tr></table></figure><p>PS:这是tga文件的文件头，其中c8 96 表示宽度高度，tga文件可以用Photoshop打开（其他不清楚）</p><p><u>2.借用Python的pillow图像库</u></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">width = <span class="number">200</span></span><br><span class="line">height = <span class="number">150</span></span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;rgb.mem&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">data = fp.read()</span><br><span class="line">im = Image.frombytes(<span class="string">&#x27;RGB&#x27;</span>, (width, height), data)</span><br><span class="line">im = im.transpose(Image.FLIP_TOP_BOTTOM)</span><br><span class="line">im.show()</span><br><span class="line">im.save(<span class="string">&#x27;result.bmp&#x27;</span>)</span><br></pre></td></tr></table></figure><p>PS:此代码是从网上copy来的，没有尝试这个，transpose是因为直接用data生成的图像是上下颠倒的</p><p>3.自己写程序处理</p><p>上面也提到了，之前在玩一个github的小项目，教学OpenGL的<a href="reversing-kr-ImagePic-Write-up\tinyrenderer">tinyrenderer</a></p><p>然后我用Java改写，于是就有了如下的源码处理，生成为.tga文件，并且让其上下翻转了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">TGAImage tgaImage = <span class="keyword">new</span> TGAImage(<span class="number">200</span>,<span class="number">150</span>,TGAImage.RGB);</span><br><span class="line"><span class="comment">//drawLine(0, 0, 999, 999, tgaImage, TGAColor.RED);</span></span><br><span class="line">tmpWrite(<span class="string">&quot;picture&quot;</span>, tgaImage);</span><br><span class="line">tgaImage.flipVertically();</span><br><span class="line"><span class="comment">//drawLine(20, 13, 40, 80, tgaImage, TGAColor.WHITE);</span></span><br><span class="line">tgaImage.writeTgaFile(<span class="string">&quot;output.tga&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tmpWrite</span><span class="params">(String fileName, TGAImage image)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">FileInputStream file = <span class="keyword">new</span> FileInputStream(fileName);</span><br><span class="line"><span class="keyword">byte</span>[] color_byte = <span class="keyword">new</span> <span class="keyword">byte</span>[TGAImage.RGB];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">150</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">200</span>;j++)&#123;</span><br><span class="line">file.read(color_byte, <span class="number">0</span>, TGAImage.RGB);</span><br><span class="line">TGAColor color = <span class="keyword">new</span> TGAColor(color_byte, <span class="number">0</span>, TGAImage.RGB);</span><br><span class="line">image.set(j, i, color);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">file.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后生成得到的图片</p><p> <img src="/2016/06/14/reversing-kr-ImagePic-Write-up/7_zpsowhzrptf.jpg" alt="7"></p><p>所以咯，flag就是 GOT 了</p><p>（还好之前玩了下tinyrenderer = =!）</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两年了</title>
      <link href="2016/06/09/%E4%B8%A4%E5%B9%B4%E4%BA%86/"/>
      <url>2016/06/09/%E4%B8%A4%E5%B9%B4%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>//给博客配置上了评论功能，欢迎来炸(～￣▽￣)～</p><p>设置域名，装上评论功能搞到现在，所以这才来写这篇东西</p><h3 id="两年了啊"><a href="#两年了啊" class="headerlink" title="两年了啊"></a>两年了啊</h3><p>​    距离高考过去也两年了，对高考的印象也所剩无几，大概只记得那几天下了雨，很凉快，内心很平静。</p><p>​    本来是想说说关于广东第一年使用全国卷我的看法的，然而我突然发现我已经对大部分的知识都忘得差不多了，看了下数学卷只能觉得似曾相识，有些题还是能做出来，再接着就是听说是葛军出的题（就是那个导致某年某省高考数学均分34的那位），大家都觉得很难。</p><p>​    然后语文作文题目，关于全国卷这题，那几张漫画都要被玩坏了</p><p>​    但是，我对其唯一的感觉就是——烂</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI1MDAzNzExOA==&amp;mid=2649659258&amp;idx=1&amp;sn=a79a2535f2e9268dced7d9cf36e16ffd&amp;scene=1&amp;srcid=0608rNMZQn5x8LU07VLPi2h7&amp;pass_ticket=yTGTZvzzXAaar%2B3kpXm0ZCcwOMbpUZDJA6d6Gc1%2BBXfjkHiZzhgeto0bLZ8frKUe#rd">谢有顺：我为什么批评今年全国I卷作文题？</a></p><p>​    这个题目很好写，因为立意很清晰明显，但也很难写，因为过于明显的立意难以从几十万的作文中脱颖而出（这不是增加阅卷老师的负担嘛）</p><p>​    反正，给人的感觉就是蹲个坑想出来的作文命题。</p><p>​    不过，既然大家都考完了，就好好享受假期，做自己想做的！</p><p>​    记得去年我还发了这样一条票圈 <img src="/2016/06/09/%E4%B8%A4%E5%B9%B4%E4%BA%86/两年了/2129109871_zpsfrmt5qkf.jpg" alt="2129109871"></p><p>​    也是挺感慨的，又一年了啊，马上就大三了</p><p>​    似乎学了很多东西，但又似乎什么都没掌握</p><p>​    Anyway, keep going.</p><p>​    然后这个博客以后大概就成了我长文吐槽的地方了</p><hr><h5 id="自捅一刀"><a href="#自捅一刀" class="headerlink" title="自捅一刀"></a>自捅一刀</h5><p>​    为毛那些家伙都能一本正经地写一大堆废话！</p><hr><h6 id="感谢你看完了我的装逼"><a href="#感谢你看完了我的装逼" class="headerlink" title="感谢你看完了我的装逼"></a><em>感谢你看完了我的装逼</em></h6><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 感想or发疯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随便写写啦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reversing.kr四道Easy</title>
      <link href="2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/"/>
      <url>2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/</url>
      
        <content type="html"><![CDATA[<p>四道题，为一下链接中的四道Easy题（当做入门题真的很好很好啊）</p><p><a href="reversing-kr四道Easy\http://reversing.kr/challenge.php">http://reversing.kr/challenge.php</a></p><p>Easy Crack、Easy Keygen、Easy Unpack、Easy ELF</p><h3 id="0x00-Easy-Crack"><a href="#0x00-Easy-Crack" class="headerlink" title="0x00 Easy Crack"></a>0x00 Easy Crack</h3><p>首先，打开程序发现是要输入正确的password</p><p> <img src="/2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/reversing-kr四道Easy/1_zpssqpievut.png" alt="1"></p><p>于是，拖进OD中调试</p><p>在输入password后，会调用getDlgItemTextA函数获取password，于是在该函数下断点</p><span id="more"></span><p>然后我们会发现跳转到这里</p><p><img src="/2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/reversing-kr四道Easy/2_zpsj4vcq1xb.png" alt="2"></p><p>我们可以看到cmp，不匹配的话会跳转到00401135，</p><p><img src="/2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/reversing-kr四道Easy/3_zps5dttyijx.png" alt="3"></p><p>于是，可以知道这就是password的验证过程。</p><p>分析其中比较的代码，可以得出几个部分（按顺序）</p><p>1.二位是否为a</p><p>2.三四位是否为5y</p><p>3.后面是否接着R3versing</p><p>4.第一位是否为E</p><p>所以便可得出password： Ea5yR3versing</p><h3 id="0x01-EasyKeygen"><a href="#0x01-EasyKeygen" class="headerlink" title="0x01 EasyKeygen"></a>0x01 EasyKeygen</h3><p>下下来后，会看到这么一段</p><p> <img src="/2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/reversing-kr四道Easy/18_zpsjt8af3ft.png" alt="18"></p><p> <img src="/2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/reversing-kr四道Easy/4_zpswxopwxue.png" alt="4"></p><p>也就是说，我们得首先找出他的加密算法</p><p>拖进OD看，可以找到其加密的步骤，然而在汇编下看过于复杂，于是这里换种工具，进入到ida中查看</p><p>在main函数中按f5反编译成c代码</p><p> <img src="/2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/reversing-kr四道Easy/5_zps8gtgxvyx.png" alt="5"></p><p>发现主要是这一段</p><p>v11为输入的name，可以看到其调用了C中sprintf的函数，再把结果存到v15，</p><p>再输入serial到v11与v15比较，而v8、v9、v10可判断为三个连续的量</p><p> <img src="/2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/reversing-kr四道Easy/6_zpsp1collbx.png" alt="6"></p><p>于是定义char v8 = {16，32，48}； </p><p>根据这段代码，可以还原其加密算法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> name[] = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> result[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">char</span> v8[] = &#123;<span class="number">16</span>,<span class="number">32</span>,<span class="number">48</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> v3 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(result,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(result));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;v3&lt;<span class="built_in">strlen</span>(name);i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">3</span>) i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(result,<span class="string">&quot;%s%02X&quot;</span>,result,name[v3++] ^ v8[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,result);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试结果是正确的</p><p><img src="/2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/reversing-kr四道Easy/8_zpslhhbpxuz.png" alt="8"></p><p>根据上面进行的是每位与v8进行异或运算，于是可以写出逆向的算法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> key[] = <span class="string">&quot;5B134977135E7D13&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> num[] = &#123;<span class="number">16</span>,<span class="number">32</span>,<span class="number">48</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> rel[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">memset</span>(rel,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(rel));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(key);i+=<span class="number">2</span>,j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=<span class="number">3</span>) j = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/*    //注释内是我刚开始用极其愚蠢的方法写进制转换</span></span><br><span class="line"><span class="comment">  //后来看别人的writeup才看到了strtol这函数</span></span><br><span class="line"><span class="comment">char tmp;</span></span><br><span class="line"><span class="comment">if(isdigit(key[i]))</span></span><br><span class="line"><span class="comment">tmp = (key[i]-&#x27;0&#x27;)&lt;&lt;4;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">tmp = (key[i]-&#x27;A&#x27;+10)&lt;&lt;4;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if(isdigit(key[i+1]))</span></span><br><span class="line"><span class="comment">tmp += (key[i+1]-&#x27;0&#x27;);</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">tmp += (key[i+1]-&#x27;A&#x27;+10);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sprintf(rel,&quot;%s%c&quot;,rel,tmp^num[j]);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">char</span> tmp[<span class="number">3</span>] = &#123;key[i],key[i+<span class="number">1</span>],<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">sprintf</span>(rel,<span class="string">&quot;%s%c&quot;</span>,rel,<span class="built_in">strtol</span>(tmp,<span class="literal">NULL</span>,<span class="number">16</span>)^num[j]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;rel&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行得出name：K3yg3nm3</p><h3 id="0x02-Easy-Unpack"><a href="#0x02-Easy-Unpack" class="headerlink" title="0x02 Easy Unpack"></a>0x02 Easy Unpack</h3><p>Unpack即是脱壳，然而对脱壳一窍不通，但里面还包含了一个ReadMe</p><p> <img src="/2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/reversing-kr四道Easy/10_zpsiadqkcvj.png" alt="10"></p><p>找到入口点，对这个没什么概念。</p><p>加壳：其实是利用特殊的算法，对可执行文件里的资源进行压缩，只不过这个压缩之后的文件，可以独立运行，解压过程完全隐蔽，都在内存中完成。它们附加在原程序上通过加载器载入内存后，先于原始程序执行，得到控制权，执行过程中对原始程序进行解密、还原，还原完成后再把控制权交还给原始程序，执行原来的代码部分。</p><p><em>来自 &lt;<a href="reversing-kr四道Easy\http://baike.baidu.com/link?url=qQk8JUbxPi-5ze8aeSI05i-A2Q1dqJQ8ASyf2RwlkEyNc3HeBUFvTPFSv56-YOscDXBqG80FgpqBZ6ahcqFZF_">http://baike.baidu.com/link?url=qQk8JUbxPi-5ze8aeSI05i-A2Q1dqJQ8ASyf2RwlkEyNc3HeBUFvTPFSv56-YOscDXBqG80FgpqBZ6ahcqFZF_</a>&gt;</em> </p><p>看了看网上writeup，先拖进OD调试吧</p><p>发现运行到后面，突然来了个jmp 00401150</p><p>跳到这么一段地方</p><p><img src="/2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/reversing-kr四道Easy/11_zpsxbynanfq.png" alt="11"></p><p>Ctrl + A 反汇编</p><p>得到</p><p><img src="/2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/reversing-kr四道Easy/12_zpswbyz3cvj.png" alt="12"></p><p>宛如一个正常程序的开始</p><p>于是00401150就是程序的入口点了</p><p> but…</p><p>这儿还有另外一个思路，就是拖进Peid直接查找（目瞪口呆.gif）</p><p> <img src="/2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/reversing-kr四道Easy/13_zpswc4epbky.png" alt="13"></p><h3 id="0x03-Easy-ELF"><a href="#0x03-Easy-ELF" class="headerlink" title="0x03 Easy ELF"></a>0x03 Easy ELF</h3><p>查了一下，ELF是linux下的可执行文件</p><p>在linux中运行</p><p><img src="/2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/reversing-kr四道Easy/14_zpsdceg6yq0.png" alt="14"></p><p>可看出是一个检测密码的程序</p><p>因为文件格式为ELF，因此OD用不了的</p><p>拖进ida，再用f5</p><p> <img src="/2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/reversing-kr四道Easy/15_zpsphhzatqv.png" alt="15"></p><p>看到main函数是这么一个东西，点进sub_80484F7函数，发现是一个输出correct的函数</p><p>所以，最终就是看if条件里的函数了</p><p> <img src="/2016/06/07/reversing-kr%E5%9B%9B%E9%81%93Easy/reversing-kr四道Easy/16_zps70n5ntnk.png" alt="16"></p><p>然后看到一连好几个if，并且当不满足条件时return result都是0</p><p>上述变量都是char，于是我们猜测flag就在里面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> v1 = <span class="number">120</span>^<span class="number">0x34</span>;</span><br><span class="line"><span class="keyword">char</span> v2 = <span class="number">49</span>;</span><br><span class="line"><span class="keyword">char</span> v3 = <span class="number">124</span>^<span class="number">0x32</span>;</span><br><span class="line"><span class="keyword">char</span> v4 = <span class="number">-35</span>^<span class="number">0x88</span>;</span><br><span class="line"><span class="keyword">char</span> v5 = <span class="number">88</span>;</span><br><span class="line">std::cout&lt;&lt;v1&lt;&lt;v2&lt;&lt;v3&lt;&lt;v4&lt;&lt;v5&lt;&lt;std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照地址顺序排序，输出，得到flag ：L1NUX</p><h5 id="至此，四道Easy题终结"><a href="#至此，四道Easy题终结" class="headerlink" title="至此，四道Easy题终结"></a>至此，四道Easy题终结</h5>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>btcf_quals_2014——最难的题目</title>
      <link href="2016/06/05/btcf_quals_2014%E2%80%94%E2%80%94%E6%9C%80%E9%9A%BE%E7%9A%84%E9%A2%98%E7%9B%AE/"/>
      <url>2016/06/05/btcf_quals_2014%E2%80%94%E2%80%94%E6%9C%80%E9%9A%BE%E7%9A%84%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p> ps: 只是这道题目名叫最难的题目，并不是比赛中最难的题目2333333</p><p>逆向文件下载：<a href="http://oj.xctf.org.cn/files/re_100.8cd4820cbd1300bda951e694298f73a0">http://oj.xctf.org.cn/files/re_100.8cd4820cbd1300bda951e694298f73a0</a></p><p>pps: 题目详情可在oj.xctf.org.cn找到，但是给出的flag无法通过，通过看别人的writeup认为是xctf又搭崩了</p><p>首先看看题目吧</p><p>通过ida就可检测出这是一个pe文件，后缀改为.exe运行一下</p><p>结果就是疯狂跳出这个框，怎么点都会再弹出来</p><p> <img src="/2016/06/05/btcf_quals_2014%E2%80%94%E2%80%94%E6%9C%80%E9%9A%BE%E7%9A%84%E9%A2%98%E7%9B%AE/btcf_quals_2014——最难的题目/2_zpsjnghqfsd.jpg" alt="2"></p><span id="more"></span><p>好吧，拖进OD看看</p><p>结果在调试过程中弹出了个不同的东西，然后后面直接调用了exit函数</p><p>就退出程序了= =</p><p> <img src="/2016/06/05/btcf_quals_2014%E2%80%94%E2%80%94%E6%9C%80%E9%9A%BE%E7%9A%84%E9%A2%98%E7%9B%AE/btcf_quals_2014——最难的题目/3_zpsthwnigf6.jpg" alt="3"></p><p>猜测大概有些调试保护的函数吧（后来看别人的writeup的确如此，不过我的OD没有显示出来） </p><p><img src="/2016/06/05/btcf_quals_2014%E2%80%94%E2%80%94%E6%9C%80%E9%9A%BE%E7%9A%84%E9%A2%98%E7%9B%AE/btcf_quals_2014——最难的题目/4_zpsuuvrhezg.jpg" alt="4"></p><p>搜索字符串，定位到对应函数，发现jnz的跳转语句可以跳过该函数</p><p>好办，空格修改jnz为jz继续调试</p><p>然后就定位到了bctf这个字符串，发现这个函数在很多个循环里面（难怪会疯狂跳出） <img src="/2016/06/05/btcf_quals_2014%E2%80%94%E2%80%94%E6%9C%80%E9%9A%BE%E7%9A%84%E9%A2%98%E7%9B%AE/btcf_quals_2014——最难的题目/5_zpsscg9icj3.jpg" alt="5"></p><p>为了方便理解，进入ida按f5反编译为c查看</p><p> <img src="/2016/06/05/btcf_quals_2014%E2%80%94%E2%80%94%E6%9C%80%E9%9A%BE%E7%9A%84%E9%A2%98%E7%9B%AE/btcf_quals_2014——最难的题目/6_zps2pd3gbk8.jpg" alt="6"></p><p>发现如下函数</p><p> <img src="/2016/06/05/btcf_quals_2014%E2%80%94%E2%80%94%E6%9C%80%E9%9A%BE%E7%9A%84%E9%A2%98%E7%9B%AE/btcf_quals_2014——最难的题目/7_zpsr9tx0v8c.jpg" alt="7"></p><p>对应汇编中如下 </p><p><img src="/2016/06/05/btcf_quals_2014%E2%80%94%E2%80%94%E6%9C%80%E9%9A%BE%E7%9A%84%E9%A2%98%E7%9B%AE/btcf_quals_2014——最难的题目/8_zpsk0hynq5l.jpg" alt="8"></p><p>这么可以猜他这是输出flag啊，那么尝试下 让他输出<img src="/2016/06/05/btcf_quals_2014%E2%80%94%E2%80%94%E6%9C%80%E9%9A%BE%E7%9A%84%E9%A2%98%E7%9B%AE/btcf_quals_2014——最难的题目/9_zpsvsglyx6e.jpg" alt="9"></p><p>可以看到主函数中四次调用了这个函数，并且传入了四个不同的int</p><p>这些int可以理解为包含flag信息的参数</p><p>那么函数中的运算不能随便改，不然就会导致输出flag不对</p><p>于是把里面调用messageBoxA函数用NOP替换，让程序自己跑起来</p><p>这时把断点什么的都关掉，不然每次自己点很麻烦的</p><p>最终跑完结果如下<br><img src="/2016/06/05/btcf_quals_2014%E2%80%94%E2%80%94%E6%9C%80%E9%9A%BE%E7%9A%84%E9%A2%98%E7%9B%AE/btcf_quals_2014——最难的题目/1_zpsucaq2nal.jpg" alt="1"></p><p>嗯，所以flag就是</p><p>Th3_H4rd3st_H3r3</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reversing.kr_replace Write up</title>
      <link href="2016/05/30/reversing.kr_replace-Write-up/"/>
      <url>2016/05/30/reversing.kr_replace-Write-up/</url>
      
        <content type="html"><![CDATA[<p>link：<a href="http://reversing.kr">http://reversing.kr</a> </p><p>​    这道题名称叫replace，这么一看根本看不出什么，我们先打开这个pe文件一览</p><p> <img src="/2016/05/30/reversing.kr_replace-Write-up/1_zpspl3edd8c.jpg" alt="1"></p><p>很奇怪，check后居然直接崩掉了</p><p>那么，拖进OD看看吧。</p><span id="more"></span><p>通过查找 GetDlgItemTextA函数，我们定位到了这里 <img src="/2016/05/30/reversing.kr_replace-Write-up/2_zpsvs9et4lr.jpg" alt="2"></p><p>这里面有两个函数，前一个为输出correct的，后一个为输出false的</p><p>但是，在correct前有两个jmp，后一个没有任何判断就直接就跳过correct的函数了</p><p>那么如何才能让他输出正确呢？</p><p>我们注意到前面还有一个jmp 00404690的指令，这个跳的的地方比较远，单步调试跟过去看看。</p><p> <img src="/2016/05/30/reversing.kr_replace-Write-up/3_zpsfopjnmfg.jpg" alt="3"></p><p>跳到了这么一段东西，单步调试发现</p><p>他会把堆中的601969D9（对应输入密码222222）付给寄存器eax</p><p>在最后会jmp 00401071，也就是上面长跳的下一行代码</p><p><code>mov dword ptr ds:[0x40466F],0xC39000C6</code></p><p>然后这一段代码执行后，上面一段直接变了 <img src="/2016/05/30/reversing.kr_replace-Write-up/4_zps7gkifnif.jpg" alt="4"></p><p>哈，原来是这么replace</p><p>看这段代码，他把eax的地址转为0x90，正式NOP空操作指令</p><p>这样就能把短跳指令改成NOP了，于是就能输出correct了</p><p>然而，这是eax=601969D9，该地址不可访问，难怪会崩溃</p><p>但是，这是问题来了，堆中的601969D9是怎么来的呢</p><p>简单试了下，通过输入密码来找这个的规律</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;0&quot; &#x3D; 601605cb</span><br><span class="line">&quot;1&quot; &#x3D; 601605cc</span><br><span class="line">&quot;10&quot; &#x3D; 601605d5</span><br></pre></td></tr></table></figure><p>哈，就是对应十六进制加上去呢</p><p>所以，我们目标就是<br>$$<br>601605CB + password = 00401071<br>$$<br>计算器一算得到十六进制A02A0AA6</p><p>转换为无符号十进制password = 2687109798 <img src="/2016/05/30/reversing.kr_replace-Write-up/5_zpsg7ypljfy.jpg" alt="5"></p><p>correct，而且也没崩溃了</p><p>所以这题的flag = 2687109798</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇helloworld及些许说明</title>
      <link href="2016/05/29/%E4%B8%80%E7%AF%87helloworld%E5%8F%8A%E4%BA%9B%E8%AE%B8%E8%AF%B4%E6%98%8E/"/>
      <url>2016/05/29/%E4%B8%80%E7%AF%87helloworld%E5%8F%8A%E4%BA%9B%E8%AE%B8%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h3 id="一些想说的"><a href="#一些想说的" class="headerlink" title="一些想说的"></a>一些想说的</h3><p>​    选来选去，最终还是选择了用github pages搭建博客。</p><p>​    最开始，我在csdn上注册了一个博客，随便写了些东西，也很随便地转发了一些文章。但是，我一直不满于csdn那个界面布局，尽管是能改的，但我还是觉得很丑，而且往往会伴随着一些讨厌的广告，渐渐地，也因为懒惰，也就没有再在上面写文章了，而且一些转发根本就是可有可无。</p><p>​    然后，大概就是上周，我用自己租的vps，用lnmp+WordPress搭建了一个比较丑陋的博客（感觉逼格高好多呀）。但是，最后因为那个服务器毕竟还是租的，我并不能确定什么时候不用了，又容易被我玩坏，而且备份配置也是很麻烦的（太咸鱼了！）。于是，在刚配置好的时候就基本被我放弃了。</p><p>​    最后，综合网上教程，选用了github pages+hexo搞了这个blog，希望能让我坚持写吧23333333</p><p>原csdn博客地址</p><p><a href="http://blog.csdn.net/giglf">http://blog.csdn.net/giglf</a></p><span id="more"></span><hr><h3 id="Some-test"><a href="#Some-test" class="headerlink" title="Some test"></a>Some test</h3><h6 id="Code-Fence"><a href="#Code-Fence" class="headerlink" title="Code Fence"></a>Code Fence</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">cout&lt;&lt;a+b&lt;&lt;<span class="string">&quot;____here is giglf&#x27;s blog&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Math-Block"><a href="#Math-Block" class="headerlink" title="Math Block"></a>Math Block</h6><p>$$<br>f(x) = \int_{-\infty}^{\infty} \sqrt{x^2} dx<br>$$</p><h6 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h6><table><thead><tr><th>姓名</th><th>年龄</th><th>爱好</th></tr></thead><tbody><tr><td>小明</td><td>20</td><td>打豆豆</td></tr><tr><td>Yolanda</td><td>20</td><td>学习</td></tr><tr><td>Medusa</td><td>??</td><td>eating?</td></tr></tbody></table><h6 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h6><p><img src="/2016/05/29/%E4%B8%80%E7%AF%87helloworld%E5%8F%8A%E4%BA%9B%E8%AE%B8%E8%AF%B4%E6%98%8E/一篇helloworld及些许说明/5a878986eb6eceb.jpg" alt="saltyfish"></p><h6 id="Foot-Note"><a href="#Foot-Note" class="headerlink" title="Foot Note"></a>Foot Note</h6>]]></content>
      
      
      <categories>
          
          <category> 感想or发疯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随便写写啦 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
